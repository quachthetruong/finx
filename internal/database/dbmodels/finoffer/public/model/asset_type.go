//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type AssetType string

const (
	AssetType_Underlying AssetType = "UNDERLYING"
	AssetType_Derivative AssetType = "DERIVATIVE"
)

func (e *AssetType) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "UNDERLYING":
		*e = AssetType_Underlying
	case "DERIVATIVE":
		*e = AssetType_Derivative
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for AssetType enum")
	}

	return nil
}

func (e AssetType) String() string {
	return string(e)
}
