//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BlacklistSymbol = newBlacklistSymbolTable("public", "blacklist_symbol", "")

type blacklistSymbolTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	SymbolID     postgres.ColumnInteger
	AffectedFrom postgres.ColumnTimestamp
	AffectedTo   postgres.ColumnTimestamp
	Status       postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BlacklistSymbolTable struct {
	blacklistSymbolTable

	EXCLUDED blacklistSymbolTable
}

// AS creates new BlacklistSymbolTable with assigned alias
func (a BlacklistSymbolTable) AS(alias string) *BlacklistSymbolTable {
	return newBlacklistSymbolTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlacklistSymbolTable with assigned schema name
func (a BlacklistSymbolTable) FromSchema(schemaName string) *BlacklistSymbolTable {
	return newBlacklistSymbolTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlacklistSymbolTable with assigned table prefix
func (a BlacklistSymbolTable) WithPrefix(prefix string) *BlacklistSymbolTable {
	return newBlacklistSymbolTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlacklistSymbolTable with assigned table suffix
func (a BlacklistSymbolTable) WithSuffix(suffix string) *BlacklistSymbolTable {
	return newBlacklistSymbolTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlacklistSymbolTable(schemaName, tableName, alias string) *BlacklistSymbolTable {
	return &BlacklistSymbolTable{
		blacklistSymbolTable: newBlacklistSymbolTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newBlacklistSymbolTableImpl("", "excluded", ""),
	}
}

func newBlacklistSymbolTableImpl(schemaName, tableName, alias string) blacklistSymbolTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		SymbolIDColumn     = postgres.IntegerColumn("symbol_id")
		AffectedFromColumn = postgres.TimestampColumn("affected_from")
		AffectedToColumn   = postgres.TimestampColumn("affected_to")
		StatusColumn       = postgres.StringColumn("status")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, SymbolIDColumn, AffectedFromColumn, AffectedToColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{SymbolIDColumn, AffectedFromColumn, AffectedToColumn, StatusColumn}
	)

	return blacklistSymbolTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		SymbolID:     SymbolIDColumn,
		AffectedFrom: AffectedFromColumn,
		AffectedTo:   AffectedToColumn,
		Status:       StatusColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
