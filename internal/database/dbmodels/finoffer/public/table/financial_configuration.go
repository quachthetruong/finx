//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FinancialConfiguration = newFinancialConfigurationTable("public", "financial_configuration", "")

type financialConfigurationTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	Attribute     postgres.ColumnString
	Value         postgres.ColumnString
	LastUpdatedBy postgres.ColumnString
	CreatedAt     postgres.ColumnTimestamp
	UpdatedAt     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FinancialConfigurationTable struct {
	financialConfigurationTable

	EXCLUDED financialConfigurationTable
}

// AS creates new FinancialConfigurationTable with assigned alias
func (a FinancialConfigurationTable) AS(alias string) *FinancialConfigurationTable {
	return newFinancialConfigurationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FinancialConfigurationTable with assigned schema name
func (a FinancialConfigurationTable) FromSchema(schemaName string) *FinancialConfigurationTable {
	return newFinancialConfigurationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FinancialConfigurationTable with assigned table prefix
func (a FinancialConfigurationTable) WithPrefix(prefix string) *FinancialConfigurationTable {
	return newFinancialConfigurationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FinancialConfigurationTable with assigned table suffix
func (a FinancialConfigurationTable) WithSuffix(suffix string) *FinancialConfigurationTable {
	return newFinancialConfigurationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFinancialConfigurationTable(schemaName, tableName, alias string) *FinancialConfigurationTable {
	return &FinancialConfigurationTable{
		financialConfigurationTable: newFinancialConfigurationTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newFinancialConfigurationTableImpl("", "excluded", ""),
	}
}

func newFinancialConfigurationTableImpl(schemaName, tableName, alias string) financialConfigurationTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		AttributeColumn     = postgres.StringColumn("attribute")
		ValueColumn         = postgres.StringColumn("value")
		LastUpdatedByColumn = postgres.StringColumn("last_updated_by")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, AttributeColumn, ValueColumn, LastUpdatedByColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{AttributeColumn, ValueColumn, LastUpdatedByColumn}
	)

	return financialConfigurationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Attribute:     AttributeColumn,
		Value:         ValueColumn,
		LastUpdatedBy: LastUpdatedByColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
