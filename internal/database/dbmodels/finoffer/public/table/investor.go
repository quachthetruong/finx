//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Investor = newInvestorTable("public", "investor", "")

type investorTable struct {
	postgres.Table

	// Columns
	InvestorID  postgres.ColumnString
	CustodyCode postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvestorTable struct {
	investorTable

	EXCLUDED investorTable
}

// AS creates new InvestorTable with assigned alias
func (a InvestorTable) AS(alias string) *InvestorTable {
	return newInvestorTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvestorTable with assigned schema name
func (a InvestorTable) FromSchema(schemaName string) *InvestorTable {
	return newInvestorTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvestorTable with assigned table prefix
func (a InvestorTable) WithPrefix(prefix string) *InvestorTable {
	return newInvestorTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvestorTable with assigned table suffix
func (a InvestorTable) WithSuffix(suffix string) *InvestorTable {
	return newInvestorTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvestorTable(schemaName, tableName, alias string) *InvestorTable {
	return &InvestorTable{
		investorTable: newInvestorTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newInvestorTableImpl("", "excluded", ""),
	}
}

func newInvestorTableImpl(schemaName, tableName, alias string) investorTable {
	var (
		InvestorIDColumn  = postgres.StringColumn("investor_id")
		CustodyCodeColumn = postgres.StringColumn("custody_code")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		allColumns        = postgres.ColumnList{InvestorIDColumn, CustodyCodeColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{CustodyCodeColumn}
	)

	return investorTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		InvestorID:  InvestorIDColumn,
		CustodyCode: CustodyCodeColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
