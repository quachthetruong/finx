//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var InvestorAccount = newInvestorAccountTable("public", "investor_account", "")

type investorAccountTable struct {
	postgres.Table

	// Columns
	AccountNo    postgres.ColumnString
	InvestorID   postgres.ColumnString
	MarginStatus postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvestorAccountTable struct {
	investorAccountTable

	EXCLUDED investorAccountTable
}

// AS creates new InvestorAccountTable with assigned alias
func (a InvestorAccountTable) AS(alias string) *InvestorAccountTable {
	return newInvestorAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvestorAccountTable with assigned schema name
func (a InvestorAccountTable) FromSchema(schemaName string) *InvestorAccountTable {
	return newInvestorAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvestorAccountTable with assigned table prefix
func (a InvestorAccountTable) WithPrefix(prefix string) *InvestorAccountTable {
	return newInvestorAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvestorAccountTable with assigned table suffix
func (a InvestorAccountTable) WithSuffix(suffix string) *InvestorAccountTable {
	return newInvestorAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvestorAccountTable(schemaName, tableName, alias string) *InvestorAccountTable {
	return &InvestorAccountTable{
		investorAccountTable: newInvestorAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newInvestorAccountTableImpl("", "excluded", ""),
	}
}

func newInvestorAccountTableImpl(schemaName, tableName, alias string) investorAccountTable {
	var (
		AccountNoColumn    = postgres.StringColumn("account_no")
		InvestorIDColumn   = postgres.StringColumn("investor_id")
		MarginStatusColumn = postgres.StringColumn("margin_status")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{AccountNoColumn, InvestorIDColumn, MarginStatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{InvestorIDColumn, MarginStatusColumn}
	)

	return investorAccountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AccountNo:    AccountNoColumn,
		InvestorID:   InvestorIDColumn,
		MarginStatus: MarginStatusColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
