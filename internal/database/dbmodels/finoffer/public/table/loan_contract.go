//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LoanContract = newLoanContractTable("public", "loan_contract", "")

type loanContractTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnInteger
	LoanOfferInterestID  postgres.ColumnInteger
	SymbolID             postgres.ColumnInteger
	InvestorID           postgres.ColumnString
	AccountNo            postgres.ColumnString
	LoanID               postgres.ColumnInteger
	CreatedAt            postgres.ColumnTimestamp
	UpdatedAt            postgres.ColumnTimestamp
	GuaranteedEndAt      postgres.ColumnTimestamp
	LoanPackageAccountID postgres.ColumnInteger
	LoanProductIDRef     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LoanContractTable struct {
	loanContractTable

	EXCLUDED loanContractTable
}

// AS creates new LoanContractTable with assigned alias
func (a LoanContractTable) AS(alias string) *LoanContractTable {
	return newLoanContractTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoanContractTable with assigned schema name
func (a LoanContractTable) FromSchema(schemaName string) *LoanContractTable {
	return newLoanContractTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoanContractTable with assigned table prefix
func (a LoanContractTable) WithPrefix(prefix string) *LoanContractTable {
	return newLoanContractTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoanContractTable with assigned table suffix
func (a LoanContractTable) WithSuffix(suffix string) *LoanContractTable {
	return newLoanContractTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoanContractTable(schemaName, tableName, alias string) *LoanContractTable {
	return &LoanContractTable{
		loanContractTable: newLoanContractTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newLoanContractTableImpl("", "excluded", ""),
	}
}

func newLoanContractTableImpl(schemaName, tableName, alias string) loanContractTable {
	var (
		IDColumn                   = postgres.IntegerColumn("id")
		LoanOfferInterestIDColumn  = postgres.IntegerColumn("loan_offer_interest_id")
		SymbolIDColumn             = postgres.IntegerColumn("symbol_id")
		InvestorIDColumn           = postgres.StringColumn("investor_id")
		AccountNoColumn            = postgres.StringColumn("account_no")
		LoanIDColumn               = postgres.IntegerColumn("loan_id")
		CreatedAtColumn            = postgres.TimestampColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampColumn("updated_at")
		GuaranteedEndAtColumn      = postgres.TimestampColumn("guaranteed_end_at")
		LoanPackageAccountIDColumn = postgres.IntegerColumn("loan_package_account_id")
		LoanProductIDRefColumn     = postgres.IntegerColumn("loan_product_id_ref")
		allColumns                 = postgres.ColumnList{IDColumn, LoanOfferInterestIDColumn, SymbolIDColumn, InvestorIDColumn, AccountNoColumn, LoanIDColumn, CreatedAtColumn, UpdatedAtColumn, GuaranteedEndAtColumn, LoanPackageAccountIDColumn, LoanProductIDRefColumn}
		mutableColumns             = postgres.ColumnList{LoanOfferInterestIDColumn, SymbolIDColumn, InvestorIDColumn, AccountNoColumn, LoanIDColumn, GuaranteedEndAtColumn, LoanPackageAccountIDColumn, LoanProductIDRefColumn}
	)

	return loanContractTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		LoanOfferInterestID:  LoanOfferInterestIDColumn,
		SymbolID:             SymbolIDColumn,
		InvestorID:           InvestorIDColumn,
		AccountNo:            AccountNoColumn,
		LoanID:               LoanIDColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		GuaranteedEndAt:      GuaranteedEndAtColumn,
		LoanPackageAccountID: LoanPackageAccountIDColumn,
		LoanProductIDRef:     LoanProductIDRefColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
