//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LoanPackageOfferInterest = newLoanPackageOfferInterestTable("public", "loan_package_offer_interest", "")

type loanPackageOfferInterestTable struct {
	postgres.Table

	// Columns
	ID                      postgres.ColumnInteger
	LoanPackageOfferID      postgres.ColumnInteger
	ScoreGroupInterestID    postgres.ColumnInteger
	LimitAmount             postgres.ColumnFloat
	LoanRate                postgres.ColumnFloat
	InterestRate            postgres.ColumnFloat
	Status                  postgres.ColumnString
	CreatedAt               postgres.ColumnTimestamp
	UpdatedAt               postgres.ColumnTimestamp
	LoanID                  postgres.ColumnInteger
	CancelledBy             postgres.ColumnString
	CancelledAt             postgres.ColumnTimestamp
	Term                    postgres.ColumnInteger
	FeeRate                 postgres.ColumnFloat
	CancelledReason         postgres.ColumnString
	AssetType               postgres.ColumnString
	InitialRate             postgres.ColumnFloat
	ContractSize            postgres.ColumnInteger
	SubmissionSheetDetailID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LoanPackageOfferInterestTable struct {
	loanPackageOfferInterestTable

	EXCLUDED loanPackageOfferInterestTable
}

// AS creates new LoanPackageOfferInterestTable with assigned alias
func (a LoanPackageOfferInterestTable) AS(alias string) *LoanPackageOfferInterestTable {
	return newLoanPackageOfferInterestTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoanPackageOfferInterestTable with assigned schema name
func (a LoanPackageOfferInterestTable) FromSchema(schemaName string) *LoanPackageOfferInterestTable {
	return newLoanPackageOfferInterestTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoanPackageOfferInterestTable with assigned table prefix
func (a LoanPackageOfferInterestTable) WithPrefix(prefix string) *LoanPackageOfferInterestTable {
	return newLoanPackageOfferInterestTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoanPackageOfferInterestTable with assigned table suffix
func (a LoanPackageOfferInterestTable) WithSuffix(suffix string) *LoanPackageOfferInterestTable {
	return newLoanPackageOfferInterestTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoanPackageOfferInterestTable(schemaName, tableName, alias string) *LoanPackageOfferInterestTable {
	return &LoanPackageOfferInterestTable{
		loanPackageOfferInterestTable: newLoanPackageOfferInterestTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newLoanPackageOfferInterestTableImpl("", "excluded", ""),
	}
}

func newLoanPackageOfferInterestTableImpl(schemaName, tableName, alias string) loanPackageOfferInterestTable {
	var (
		IDColumn                      = postgres.IntegerColumn("id")
		LoanPackageOfferIDColumn      = postgres.IntegerColumn("loan_package_offer_id")
		ScoreGroupInterestIDColumn    = postgres.IntegerColumn("score_group_interest_id")
		LimitAmountColumn             = postgres.FloatColumn("limit_amount")
		LoanRateColumn                = postgres.FloatColumn("loan_rate")
		InterestRateColumn            = postgres.FloatColumn("interest_rate")
		StatusColumn                  = postgres.StringColumn("status")
		CreatedAtColumn               = postgres.TimestampColumn("created_at")
		UpdatedAtColumn               = postgres.TimestampColumn("updated_at")
		LoanIDColumn                  = postgres.IntegerColumn("loan_id")
		CancelledByColumn             = postgres.StringColumn("cancelled_by")
		CancelledAtColumn             = postgres.TimestampColumn("cancelled_at")
		TermColumn                    = postgres.IntegerColumn("term")
		FeeRateColumn                 = postgres.FloatColumn("fee_rate")
		CancelledReasonColumn         = postgres.StringColumn("cancelled_reason")
		AssetTypeColumn               = postgres.StringColumn("asset_type")
		InitialRateColumn             = postgres.FloatColumn("initial_rate")
		ContractSizeColumn            = postgres.IntegerColumn("contract_size")
		SubmissionSheetDetailIDColumn = postgres.IntegerColumn("submission_sheet_detail_id")
		allColumns                    = postgres.ColumnList{IDColumn, LoanPackageOfferIDColumn, ScoreGroupInterestIDColumn, LimitAmountColumn, LoanRateColumn, InterestRateColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn, LoanIDColumn, CancelledByColumn, CancelledAtColumn, TermColumn, FeeRateColumn, CancelledReasonColumn, AssetTypeColumn, InitialRateColumn, ContractSizeColumn, SubmissionSheetDetailIDColumn}
		mutableColumns                = postgres.ColumnList{LoanPackageOfferIDColumn, ScoreGroupInterestIDColumn, LimitAmountColumn, LoanRateColumn, InterestRateColumn, StatusColumn, LoanIDColumn, CancelledByColumn, CancelledAtColumn, TermColumn, FeeRateColumn, CancelledReasonColumn, AssetTypeColumn, InitialRateColumn, ContractSizeColumn, SubmissionSheetDetailIDColumn}
	)

	return loanPackageOfferInterestTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                      IDColumn,
		LoanPackageOfferID:      LoanPackageOfferIDColumn,
		ScoreGroupInterestID:    ScoreGroupInterestIDColumn,
		LimitAmount:             LimitAmountColumn,
		LoanRate:                LoanRateColumn,
		InterestRate:            InterestRateColumn,
		Status:                  StatusColumn,
		CreatedAt:               CreatedAtColumn,
		UpdatedAt:               UpdatedAtColumn,
		LoanID:                  LoanIDColumn,
		CancelledBy:             CancelledByColumn,
		CancelledAt:             CancelledAtColumn,
		Term:                    TermColumn,
		FeeRate:                 FeeRateColumn,
		CancelledReason:         CancelledReasonColumn,
		AssetType:               AssetTypeColumn,
		InitialRate:             InitialRateColumn,
		ContractSize:            ContractSizeColumn,
		SubmissionSheetDetailID: SubmissionSheetDetailIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
