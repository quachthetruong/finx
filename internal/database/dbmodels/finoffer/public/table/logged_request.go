//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LoggedRequest = newLoggedRequestTable("public", "logged_request", "")

type loggedRequestTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	InvestorID postgres.ColumnString
	SymbolID   postgres.ColumnInteger
	Reason     postgres.ColumnString
	Request    postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LoggedRequestTable struct {
	loggedRequestTable

	EXCLUDED loggedRequestTable
}

// AS creates new LoggedRequestTable with assigned alias
func (a LoggedRequestTable) AS(alias string) *LoggedRequestTable {
	return newLoggedRequestTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoggedRequestTable with assigned schema name
func (a LoggedRequestTable) FromSchema(schemaName string) *LoggedRequestTable {
	return newLoggedRequestTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoggedRequestTable with assigned table prefix
func (a LoggedRequestTable) WithPrefix(prefix string) *LoggedRequestTable {
	return newLoggedRequestTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoggedRequestTable with assigned table suffix
func (a LoggedRequestTable) WithSuffix(suffix string) *LoggedRequestTable {
	return newLoggedRequestTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoggedRequestTable(schemaName, tableName, alias string) *LoggedRequestTable {
	return &LoggedRequestTable{
		loggedRequestTable: newLoggedRequestTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newLoggedRequestTableImpl("", "excluded", ""),
	}
}

func newLoggedRequestTableImpl(schemaName, tableName, alias string) loggedRequestTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		InvestorIDColumn = postgres.StringColumn("investor_id")
		SymbolIDColumn   = postgres.IntegerColumn("symbol_id")
		ReasonColumn     = postgres.StringColumn("reason")
		RequestColumn    = postgres.StringColumn("request")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		allColumns       = postgres.ColumnList{IDColumn, InvestorIDColumn, SymbolIDColumn, ReasonColumn, RequestColumn, CreatedAtColumn}
		mutableColumns   = postgres.ColumnList{InvestorIDColumn, SymbolIDColumn, ReasonColumn, RequestColumn}
	)

	return loggedRequestTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		InvestorID: InvestorIDColumn,
		SymbolID:   SymbolIDColumn,
		Reason:     ReasonColumn,
		Request:    RequestColumn,
		CreatedAt:  CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
