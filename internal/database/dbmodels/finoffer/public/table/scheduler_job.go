//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SchedulerJob = newSchedulerJobTable("public", "scheduler_job", "")

type schedulerJobTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	JobType      postgres.ColumnString
	JobStatus    postgres.ColumnString
	TriggerBy    postgres.ColumnString
	TrackingData postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SchedulerJobTable struct {
	schedulerJobTable

	EXCLUDED schedulerJobTable
}

// AS creates new SchedulerJobTable with assigned alias
func (a SchedulerJobTable) AS(alias string) *SchedulerJobTable {
	return newSchedulerJobTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SchedulerJobTable with assigned schema name
func (a SchedulerJobTable) FromSchema(schemaName string) *SchedulerJobTable {
	return newSchedulerJobTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SchedulerJobTable with assigned table prefix
func (a SchedulerJobTable) WithPrefix(prefix string) *SchedulerJobTable {
	return newSchedulerJobTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SchedulerJobTable with assigned table suffix
func (a SchedulerJobTable) WithSuffix(suffix string) *SchedulerJobTable {
	return newSchedulerJobTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSchedulerJobTable(schemaName, tableName, alias string) *SchedulerJobTable {
	return &SchedulerJobTable{
		schedulerJobTable: newSchedulerJobTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newSchedulerJobTableImpl("", "excluded", ""),
	}
}

func newSchedulerJobTableImpl(schemaName, tableName, alias string) schedulerJobTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		JobTypeColumn      = postgres.StringColumn("job_type")
		JobStatusColumn    = postgres.StringColumn("job_status")
		TriggerByColumn    = postgres.StringColumn("trigger_by")
		TrackingDataColumn = postgres.StringColumn("tracking_data")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, JobTypeColumn, JobStatusColumn, TriggerByColumn, TrackingDataColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{JobTypeColumn, JobStatusColumn, TriggerByColumn, TrackingDataColumn}
	)

	return schedulerJobTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		JobType:      JobTypeColumn,
		JobStatus:    JobStatusColumn,
		TriggerBy:    TriggerByColumn,
		TrackingData: TrackingDataColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
