//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ScoreGroup = newScoreGroupTable("public", "score_group", "")

type scoreGroupTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Code      postgres.ColumnString
	MinScore  postgres.ColumnInteger
	MaxScore  postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ScoreGroupTable struct {
	scoreGroupTable

	EXCLUDED scoreGroupTable
}

// AS creates new ScoreGroupTable with assigned alias
func (a ScoreGroupTable) AS(alias string) *ScoreGroupTable {
	return newScoreGroupTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ScoreGroupTable with assigned schema name
func (a ScoreGroupTable) FromSchema(schemaName string) *ScoreGroupTable {
	return newScoreGroupTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ScoreGroupTable with assigned table prefix
func (a ScoreGroupTable) WithPrefix(prefix string) *ScoreGroupTable {
	return newScoreGroupTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ScoreGroupTable with assigned table suffix
func (a ScoreGroupTable) WithSuffix(suffix string) *ScoreGroupTable {
	return newScoreGroupTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newScoreGroupTable(schemaName, tableName, alias string) *ScoreGroupTable {
	return &ScoreGroupTable{
		scoreGroupTable: newScoreGroupTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newScoreGroupTableImpl("", "excluded", ""),
	}
}

func newScoreGroupTableImpl(schemaName, tableName, alias string) scoreGroupTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CodeColumn      = postgres.StringColumn("code")
		MinScoreColumn  = postgres.IntegerColumn("min_score")
		MaxScoreColumn  = postgres.IntegerColumn("max_score")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, CodeColumn, MinScoreColumn, MaxScoreColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{CodeColumn, MinScoreColumn, MaxScoreColumn}
	)

	return scoreGroupTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Code:      CodeColumn,
		MinScore:  MinScoreColumn,
		MaxScore:  MaxScoreColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
