//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var StockExchange = newStockExchangeTable("public", "stock_exchange", "")

type stockExchangeTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Code         postgres.ColumnString
	MinScore     postgres.ColumnInteger
	MaxScore     postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp
	ScoreGroupID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StockExchangeTable struct {
	stockExchangeTable

	EXCLUDED stockExchangeTable
}

// AS creates new StockExchangeTable with assigned alias
func (a StockExchangeTable) AS(alias string) *StockExchangeTable {
	return newStockExchangeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StockExchangeTable with assigned schema name
func (a StockExchangeTable) FromSchema(schemaName string) *StockExchangeTable {
	return newStockExchangeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StockExchangeTable with assigned table prefix
func (a StockExchangeTable) WithPrefix(prefix string) *StockExchangeTable {
	return newStockExchangeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StockExchangeTable with assigned table suffix
func (a StockExchangeTable) WithSuffix(suffix string) *StockExchangeTable {
	return newStockExchangeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStockExchangeTable(schemaName, tableName, alias string) *StockExchangeTable {
	return &StockExchangeTable{
		stockExchangeTable: newStockExchangeTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newStockExchangeTableImpl("", "excluded", ""),
	}
}

func newStockExchangeTableImpl(schemaName, tableName, alias string) stockExchangeTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		CodeColumn         = postgres.StringColumn("code")
		MinScoreColumn     = postgres.IntegerColumn("min_score")
		MaxScoreColumn     = postgres.IntegerColumn("max_score")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		ScoreGroupIDColumn = postgres.IntegerColumn("score_group_id")
		allColumns         = postgres.ColumnList{IDColumn, CodeColumn, MinScoreColumn, MaxScoreColumn, CreatedAtColumn, UpdatedAtColumn, ScoreGroupIDColumn}
		mutableColumns     = postgres.ColumnList{CodeColumn, MinScoreColumn, MaxScoreColumn, ScoreGroupIDColumn}
	)

	return stockExchangeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Code:         CodeColumn,
		MinScore:     MinScoreColumn,
		MaxScore:     MaxScoreColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		ScoreGroupID: ScoreGroupIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
