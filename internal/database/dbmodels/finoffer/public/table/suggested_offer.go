//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SuggestedOffer = newSuggestedOfferTable("public", "suggested_offer", "")

type suggestedOfferTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ConfigID  postgres.ColumnInteger
	AccountNo postgres.ColumnString
	Symbols   postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SuggestedOfferTable struct {
	suggestedOfferTable

	EXCLUDED suggestedOfferTable
}

// AS creates new SuggestedOfferTable with assigned alias
func (a SuggestedOfferTable) AS(alias string) *SuggestedOfferTable {
	return newSuggestedOfferTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SuggestedOfferTable with assigned schema name
func (a SuggestedOfferTable) FromSchema(schemaName string) *SuggestedOfferTable {
	return newSuggestedOfferTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SuggestedOfferTable with assigned table prefix
func (a SuggestedOfferTable) WithPrefix(prefix string) *SuggestedOfferTable {
	return newSuggestedOfferTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SuggestedOfferTable with assigned table suffix
func (a SuggestedOfferTable) WithSuffix(suffix string) *SuggestedOfferTable {
	return newSuggestedOfferTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSuggestedOfferTable(schemaName, tableName, alias string) *SuggestedOfferTable {
	return &SuggestedOfferTable{
		suggestedOfferTable: newSuggestedOfferTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSuggestedOfferTableImpl("", "excluded", ""),
	}
}

func newSuggestedOfferTableImpl(schemaName, tableName, alias string) suggestedOfferTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ConfigIDColumn  = postgres.IntegerColumn("config_id")
		AccountNoColumn = postgres.StringColumn("account_no")
		SymbolsColumn   = postgres.StringColumn("symbols")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, ConfigIDColumn, AccountNoColumn, SymbolsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{ConfigIDColumn, AccountNoColumn, SymbolsColumn}
	)

	return suggestedOfferTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ConfigID:  ConfigIDColumn,
		AccountNo: AccountNoColumn,
		Symbols:   SymbolsColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
