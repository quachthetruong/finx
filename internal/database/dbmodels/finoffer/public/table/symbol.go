//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Symbol = newSymbolTable("public", "symbol", "")

type symbolTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	StockExchangeID postgres.ColumnInteger
	Symbol          postgres.ColumnString
	CreatedAt       postgres.ColumnTimestamp
	UpdatedAt       postgres.ColumnTimestamp
	AssetType       postgres.ColumnString
	Status          postgres.ColumnString
	LastUpdatedBy   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SymbolTable struct {
	symbolTable

	EXCLUDED symbolTable
}

// AS creates new SymbolTable with assigned alias
func (a SymbolTable) AS(alias string) *SymbolTable {
	return newSymbolTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SymbolTable with assigned schema name
func (a SymbolTable) FromSchema(schemaName string) *SymbolTable {
	return newSymbolTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SymbolTable with assigned table prefix
func (a SymbolTable) WithPrefix(prefix string) *SymbolTable {
	return newSymbolTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SymbolTable with assigned table suffix
func (a SymbolTable) WithSuffix(suffix string) *SymbolTable {
	return newSymbolTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSymbolTable(schemaName, tableName, alias string) *SymbolTable {
	return &SymbolTable{
		symbolTable: newSymbolTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newSymbolTableImpl("", "excluded", ""),
	}
}

func newSymbolTableImpl(schemaName, tableName, alias string) symbolTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		StockExchangeIDColumn = postgres.IntegerColumn("stock_exchange_id")
		SymbolColumn          = postgres.StringColumn("symbol")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampColumn("updated_at")
		AssetTypeColumn       = postgres.StringColumn("asset_type")
		StatusColumn          = postgres.StringColumn("status")
		LastUpdatedByColumn   = postgres.StringColumn("last_updated_by")
		allColumns            = postgres.ColumnList{IDColumn, StockExchangeIDColumn, SymbolColumn, CreatedAtColumn, UpdatedAtColumn, AssetTypeColumn, StatusColumn, LastUpdatedByColumn}
		mutableColumns        = postgres.ColumnList{StockExchangeIDColumn, SymbolColumn, AssetTypeColumn, StatusColumn, LastUpdatedByColumn}
	)

	return symbolTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		StockExchangeID: StockExchangeIDColumn,
		Symbol:          SymbolColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		AssetType:       AssetTypeColumn,
		Status:          StatusColumn,
		LastUpdatedBy:   LastUpdatedByColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
