//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SymbolScore = newSymbolScoreTable("public", "symbol_score", "")

type symbolScoreTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	SymbolID     postgres.ColumnInteger
	Score        postgres.ColumnInteger
	AffectedFrom postgres.ColumnTimestamp
	Status       postgres.ColumnString
	Type         postgres.ColumnString
	Creator      postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SymbolScoreTable struct {
	symbolScoreTable

	EXCLUDED symbolScoreTable
}

// AS creates new SymbolScoreTable with assigned alias
func (a SymbolScoreTable) AS(alias string) *SymbolScoreTable {
	return newSymbolScoreTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SymbolScoreTable with assigned schema name
func (a SymbolScoreTable) FromSchema(schemaName string) *SymbolScoreTable {
	return newSymbolScoreTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SymbolScoreTable with assigned table prefix
func (a SymbolScoreTable) WithPrefix(prefix string) *SymbolScoreTable {
	return newSymbolScoreTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SymbolScoreTable with assigned table suffix
func (a SymbolScoreTable) WithSuffix(suffix string) *SymbolScoreTable {
	return newSymbolScoreTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSymbolScoreTable(schemaName, tableName, alias string) *SymbolScoreTable {
	return &SymbolScoreTable{
		symbolScoreTable: newSymbolScoreTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newSymbolScoreTableImpl("", "excluded", ""),
	}
}

func newSymbolScoreTableImpl(schemaName, tableName, alias string) symbolScoreTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		SymbolIDColumn     = postgres.IntegerColumn("symbol_id")
		ScoreColumn        = postgres.IntegerColumn("score")
		AffectedFromColumn = postgres.TimestampColumn("affected_from")
		StatusColumn       = postgres.StringColumn("status")
		TypeColumn         = postgres.StringColumn("type")
		CreatorColumn      = postgres.StringColumn("creator")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, SymbolIDColumn, ScoreColumn, AffectedFromColumn, StatusColumn, TypeColumn, CreatorColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{SymbolIDColumn, ScoreColumn, AffectedFromColumn, StatusColumn, TypeColumn, CreatorColumn}
	)

	return symbolScoreTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		SymbolID:     SymbolIDColumn,
		Score:        ScoreColumn,
		AffectedFrom: AffectedFromColumn,
		Status:       StatusColumn,
		Type:         TypeColumn,
		Creator:      CreatorColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
