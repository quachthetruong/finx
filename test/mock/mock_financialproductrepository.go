// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockFinancialProductRepository is an autogenerated mock type for the FinancialProductRepository type
type MockFinancialProductRepository struct {
	mock.Mock
}

type MockFinancialProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFinancialProductRepository) EXPECT() *MockFinancialProductRepository_Expecter {
	return &MockFinancialProductRepository_Expecter{mock: &_m.Mock}
}

// AssignLoanPackage provides a mock function with given fields: ctx, accountNo, loanId, assetType
func (_m *MockFinancialProductRepository) AssignLoanPackage(ctx context.Context, accountNo string, loanId int64, assetType entity.AssetType) (int64, error) {
	ret := _m.Called(ctx, accountNo, loanId, assetType)

	if len(ret) == 0 {
		panic("no return value specified for AssignLoanPackage")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, entity.AssetType) (int64, error)); ok {
		return rf(ctx, accountNo, loanId, assetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, entity.AssetType) int64); ok {
		r0 = rf(ctx, accountNo, loanId, assetType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, entity.AssetType) error); ok {
		r1 = rf(ctx, accountNo, loanId, assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_AssignLoanPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignLoanPackage'
type MockFinancialProductRepository_AssignLoanPackage_Call struct {
	*mock.Call
}

// AssignLoanPackage is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNo string
//   - loanId int64
//   - assetType entity.AssetType
func (_e *MockFinancialProductRepository_Expecter) AssignLoanPackage(ctx interface{}, accountNo interface{}, loanId interface{}, assetType interface{}) *MockFinancialProductRepository_AssignLoanPackage_Call {
	return &MockFinancialProductRepository_AssignLoanPackage_Call{Call: _e.mock.On("AssignLoanPackage", ctx, accountNo, loanId, assetType)}
}

func (_c *MockFinancialProductRepository_AssignLoanPackage_Call) Run(run func(ctx context.Context, accountNo string, loanId int64, assetType entity.AssetType)) *MockFinancialProductRepository_AssignLoanPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(entity.AssetType))
	})
	return _c
}

func (_c *MockFinancialProductRepository_AssignLoanPackage_Call) Return(loanPackageAccountId int64, err error) *MockFinancialProductRepository_AssignLoanPackage_Call {
	_c.Call.Return(loanPackageAccountId, err)
	return _c
}

func (_c *MockFinancialProductRepository_AssignLoanPackage_Call) RunAndReturn(run func(context.Context, string, int64, entity.AssetType) (int64, error)) *MockFinancialProductRepository_AssignLoanPackage_Call {
	_c.Call.Return(run)
	return _c
}

// AssignLoanPackageOrGetLoanPackageAccountId provides a mock function with given fields: ctx, accountNo, loanId, assetType
func (_m *MockFinancialProductRepository) AssignLoanPackageOrGetLoanPackageAccountId(ctx context.Context, accountNo string, loanId int64, assetType entity.AssetType) (int64, error) {
	ret := _m.Called(ctx, accountNo, loanId, assetType)

	if len(ret) == 0 {
		panic("no return value specified for AssignLoanPackageOrGetLoanPackageAccountId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, entity.AssetType) (int64, error)); ok {
		return rf(ctx, accountNo, loanId, assetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, entity.AssetType) int64); ok {
		r0 = rf(ctx, accountNo, loanId, assetType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, entity.AssetType) error); ok {
		r1 = rf(ctx, accountNo, loanId, assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignLoanPackageOrGetLoanPackageAccountId'
type MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call struct {
	*mock.Call
}

// AssignLoanPackageOrGetLoanPackageAccountId is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNo string
//   - loanId int64
//   - assetType entity.AssetType
func (_e *MockFinancialProductRepository_Expecter) AssignLoanPackageOrGetLoanPackageAccountId(ctx interface{}, accountNo interface{}, loanId interface{}, assetType interface{}) *MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call {
	return &MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call{Call: _e.mock.On("AssignLoanPackageOrGetLoanPackageAccountId", ctx, accountNo, loanId, assetType)}
}

func (_c *MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call) Run(run func(ctx context.Context, accountNo string, loanId int64, assetType entity.AssetType)) *MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(entity.AssetType))
	})
	return _c
}

func (_c *MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call) Return(loanPackageAccountId int64, err error) *MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call {
	_c.Call.Return(loanPackageAccountId, err)
	return _c
}

func (_c *MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call) RunAndReturn(run func(context.Context, string, int64, entity.AssetType) (int64, error)) *MockFinancialProductRepository_AssignLoanPackageOrGetLoanPackageAccountId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAccountDetail provides a mock function with given fields: ctx, investorId
func (_m *MockFinancialProductRepository) GetAllAccountDetail(ctx context.Context, investorId string) ([]entity.FinancialAccountDetail, error) {
	ret := _m.Called(ctx, investorId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAccountDetail")
	}

	var r0 []entity.FinancialAccountDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.FinancialAccountDetail, error)); ok {
		return rf(ctx, investorId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.FinancialAccountDetail); ok {
		r0 = rf(ctx, investorId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.FinancialAccountDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, investorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetAllAccountDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAccountDetail'
type MockFinancialProductRepository_GetAllAccountDetail_Call struct {
	*mock.Call
}

// GetAllAccountDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - investorId string
func (_e *MockFinancialProductRepository_Expecter) GetAllAccountDetail(ctx interface{}, investorId interface{}) *MockFinancialProductRepository_GetAllAccountDetail_Call {
	return &MockFinancialProductRepository_GetAllAccountDetail_Call{Call: _e.mock.On("GetAllAccountDetail", ctx, investorId)}
}

func (_c *MockFinancialProductRepository_GetAllAccountDetail_Call) Run(run func(ctx context.Context, investorId string)) *MockFinancialProductRepository_GetAllAccountDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetAllAccountDetail_Call) Return(accounts []entity.FinancialAccountDetail, err error) *MockFinancialProductRepository_GetAllAccountDetail_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockFinancialProductRepository_GetAllAccountDetail_Call) RunAndReturn(run func(context.Context, string) ([]entity.FinancialAccountDetail, error)) *MockFinancialProductRepository_GetAllAccountDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAccountDetailByCustodyCode provides a mock function with given fields: ctx, custodyCode
func (_m *MockFinancialProductRepository) GetAllAccountDetailByCustodyCode(ctx context.Context, custodyCode string) ([]entity.FinancialAccountDetail, error) {
	ret := _m.Called(ctx, custodyCode)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAccountDetailByCustodyCode")
	}

	var r0 []entity.FinancialAccountDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.FinancialAccountDetail, error)); ok {
		return rf(ctx, custodyCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.FinancialAccountDetail); ok {
		r0 = rf(ctx, custodyCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.FinancialAccountDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, custodyCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAccountDetailByCustodyCode'
type MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call struct {
	*mock.Call
}

// GetAllAccountDetailByCustodyCode is a helper method to define mock.On call
//   - ctx context.Context
//   - custodyCode string
func (_e *MockFinancialProductRepository_Expecter) GetAllAccountDetailByCustodyCode(ctx interface{}, custodyCode interface{}) *MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call {
	return &MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call{Call: _e.mock.On("GetAllAccountDetailByCustodyCode", ctx, custodyCode)}
}

func (_c *MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call) Run(run func(ctx context.Context, custodyCode string)) *MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call) Return(accounts []entity.FinancialAccountDetail, err error) *MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call) RunAndReturn(run func(context.Context, string) ([]entity.FinancialAccountDetail, error)) *MockFinancialProductRepository_GetAllAccountDetailByCustodyCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanPackageAccountIdByAccountNoAndLoanPackageId provides a mock function with given fields: ctx, accountNo, loanPackageId, assetType
func (_m *MockFinancialProductRepository) GetLoanPackageAccountIdByAccountNoAndLoanPackageId(ctx context.Context, accountNo string, loanPackageId int64, assetType entity.AssetType) (int64, error) {
	ret := _m.Called(ctx, accountNo, loanPackageId, assetType)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanPackageAccountIdByAccountNoAndLoanPackageId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, entity.AssetType) (int64, error)); ok {
		return rf(ctx, accountNo, loanPackageId, assetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, entity.AssetType) int64); ok {
		r0 = rf(ctx, accountNo, loanPackageId, assetType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, entity.AssetType) error); ok {
		r1 = rf(ctx, accountNo, loanPackageId, assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanPackageAccountIdByAccountNoAndLoanPackageId'
type MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call struct {
	*mock.Call
}

// GetLoanPackageAccountIdByAccountNoAndLoanPackageId is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNo string
//   - loanPackageId int64
//   - assetType entity.AssetType
func (_e *MockFinancialProductRepository_Expecter) GetLoanPackageAccountIdByAccountNoAndLoanPackageId(ctx interface{}, accountNo interface{}, loanPackageId interface{}, assetType interface{}) *MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call {
	return &MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call{Call: _e.mock.On("GetLoanPackageAccountIdByAccountNoAndLoanPackageId", ctx, accountNo, loanPackageId, assetType)}
}

func (_c *MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call) Run(run func(ctx context.Context, accountNo string, loanPackageId int64, assetType entity.AssetType)) *MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(entity.AssetType))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call) Return(_a0 int64, _a1 error) *MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call) RunAndReturn(run func(context.Context, string, int64, entity.AssetType) (int64, error)) *MockFinancialProductRepository_GetLoanPackageAccountIdByAccountNoAndLoanPackageId_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanPackageDerivative provides a mock function with given fields: ctx, loanPackageId
func (_m *MockFinancialProductRepository) GetLoanPackageDerivative(ctx context.Context, loanPackageId int64) (entity.FinancialProductLoanPackageDerivative, error) {
	ret := _m.Called(ctx, loanPackageId)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanPackageDerivative")
	}

	var r0 entity.FinancialProductLoanPackageDerivative
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.FinancialProductLoanPackageDerivative, error)); ok {
		return rf(ctx, loanPackageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.FinancialProductLoanPackageDerivative); ok {
		r0 = rf(ctx, loanPackageId)
	} else {
		r0 = ret.Get(0).(entity.FinancialProductLoanPackageDerivative)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, loanPackageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetLoanPackageDerivative_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanPackageDerivative'
type MockFinancialProductRepository_GetLoanPackageDerivative_Call struct {
	*mock.Call
}

// GetLoanPackageDerivative is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageId int64
func (_e *MockFinancialProductRepository_Expecter) GetLoanPackageDerivative(ctx interface{}, loanPackageId interface{}) *MockFinancialProductRepository_GetLoanPackageDerivative_Call {
	return &MockFinancialProductRepository_GetLoanPackageDerivative_Call{Call: _e.mock.On("GetLoanPackageDerivative", ctx, loanPackageId)}
}

func (_c *MockFinancialProductRepository_GetLoanPackageDerivative_Call) Run(run func(ctx context.Context, loanPackageId int64)) *MockFinancialProductRepository_GetLoanPackageDerivative_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageDerivative_Call) Return(_a0 entity.FinancialProductLoanPackageDerivative, _a1 error) *MockFinancialProductRepository_GetLoanPackageDerivative_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageDerivative_Call) RunAndReturn(run func(context.Context, int64) (entity.FinancialProductLoanPackageDerivative, error)) *MockFinancialProductRepository_GetLoanPackageDerivative_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanPackageDetail provides a mock function with given fields: ctx, loanPackageId
func (_m *MockFinancialProductRepository) GetLoanPackageDetail(ctx context.Context, loanPackageId int64) (entity.FinancialProductLoanPackage, error) {
	ret := _m.Called(ctx, loanPackageId)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanPackageDetail")
	}

	var r0 entity.FinancialProductLoanPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.FinancialProductLoanPackage, error)); ok {
		return rf(ctx, loanPackageId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.FinancialProductLoanPackage); ok {
		r0 = rf(ctx, loanPackageId)
	} else {
		r0 = ret.Get(0).(entity.FinancialProductLoanPackage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, loanPackageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetLoanPackageDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanPackageDetail'
type MockFinancialProductRepository_GetLoanPackageDetail_Call struct {
	*mock.Call
}

// GetLoanPackageDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageId int64
func (_e *MockFinancialProductRepository_Expecter) GetLoanPackageDetail(ctx interface{}, loanPackageId interface{}) *MockFinancialProductRepository_GetLoanPackageDetail_Call {
	return &MockFinancialProductRepository_GetLoanPackageDetail_Call{Call: _e.mock.On("GetLoanPackageDetail", ctx, loanPackageId)}
}

func (_c *MockFinancialProductRepository_GetLoanPackageDetail_Call) Run(run func(ctx context.Context, loanPackageId int64)) *MockFinancialProductRepository_GetLoanPackageDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageDetail_Call) Return(_a0 entity.FinancialProductLoanPackage, _a1 error) *MockFinancialProductRepository_GetLoanPackageDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageDetail_Call) RunAndReturn(run func(context.Context, int64) (entity.FinancialProductLoanPackage, error)) *MockFinancialProductRepository_GetLoanPackageDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanPackageDetails provides a mock function with given fields: ctx, loanPackageIds
func (_m *MockFinancialProductRepository) GetLoanPackageDetails(ctx context.Context, loanPackageIds []int64) ([]entity.FinancialProductLoanPackage, error) {
	ret := _m.Called(ctx, loanPackageIds)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanPackageDetails")
	}

	var r0 []entity.FinancialProductLoanPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]entity.FinancialProductLoanPackage, error)); ok {
		return rf(ctx, loanPackageIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.FinancialProductLoanPackage); ok {
		r0 = rf(ctx, loanPackageIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.FinancialProductLoanPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, loanPackageIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetLoanPackageDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanPackageDetails'
type MockFinancialProductRepository_GetLoanPackageDetails_Call struct {
	*mock.Call
}

// GetLoanPackageDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageIds []int64
func (_e *MockFinancialProductRepository_Expecter) GetLoanPackageDetails(ctx interface{}, loanPackageIds interface{}) *MockFinancialProductRepository_GetLoanPackageDetails_Call {
	return &MockFinancialProductRepository_GetLoanPackageDetails_Call{Call: _e.mock.On("GetLoanPackageDetails", ctx, loanPackageIds)}
}

func (_c *MockFinancialProductRepository_GetLoanPackageDetails_Call) Run(run func(ctx context.Context, loanPackageIds []int64)) *MockFinancialProductRepository_GetLoanPackageDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageDetails_Call) Return(_a0 []entity.FinancialProductLoanPackage, _a1 error) *MockFinancialProductRepository_GetLoanPackageDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanPackageDetails_Call) RunAndReturn(run func(context.Context, []int64) ([]entity.FinancialProductLoanPackage, error)) *MockFinancialProductRepository_GetLoanPackageDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanProducts provides a mock function with given fields: ctx, filter
func (_m *MockFinancialProductRepository) GetLoanProducts(ctx context.Context, filter entity.MarginProductFilter) ([]entity.MarginProduct, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanProducts")
	}

	var r0 []entity.MarginProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.MarginProductFilter) ([]entity.MarginProduct, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.MarginProductFilter) []entity.MarginProduct); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MarginProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.MarginProductFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetLoanProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanProducts'
type MockFinancialProductRepository_GetLoanProducts_Call struct {
	*mock.Call
}

// GetLoanProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.MarginProductFilter
func (_e *MockFinancialProductRepository_Expecter) GetLoanProducts(ctx interface{}, filter interface{}) *MockFinancialProductRepository_GetLoanProducts_Call {
	return &MockFinancialProductRepository_GetLoanProducts_Call{Call: _e.mock.On("GetLoanProducts", ctx, filter)}
}

func (_c *MockFinancialProductRepository_GetLoanProducts_Call) Run(run func(ctx context.Context, filter entity.MarginProductFilter)) *MockFinancialProductRepository_GetLoanProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.MarginProductFilter))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanProducts_Call) Return(_a0 []entity.MarginProduct, _a1 error) *MockFinancialProductRepository_GetLoanProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanProducts_Call) RunAndReturn(run func(context.Context, entity.MarginProductFilter) ([]entity.MarginProduct, error)) *MockFinancialProductRepository_GetLoanProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanRateDetail provides a mock function with given fields: ctx, loanRateId
func (_m *MockFinancialProductRepository) GetLoanRateDetail(ctx context.Context, loanRateId int64) (entity.LoanRate, error) {
	ret := _m.Called(ctx, loanRateId)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanRateDetail")
	}

	var r0 entity.LoanRate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.LoanRate, error)); ok {
		return rf(ctx, loanRateId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.LoanRate); ok {
		r0 = rf(ctx, loanRateId)
	} else {
		r0 = ret.Get(0).(entity.LoanRate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, loanRateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetLoanRateDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanRateDetail'
type MockFinancialProductRepository_GetLoanRateDetail_Call struct {
	*mock.Call
}

// GetLoanRateDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - loanRateId int64
func (_e *MockFinancialProductRepository_Expecter) GetLoanRateDetail(ctx interface{}, loanRateId interface{}) *MockFinancialProductRepository_GetLoanRateDetail_Call {
	return &MockFinancialProductRepository_GetLoanRateDetail_Call{Call: _e.mock.On("GetLoanRateDetail", ctx, loanRateId)}
}

func (_c *MockFinancialProductRepository_GetLoanRateDetail_Call) Run(run func(ctx context.Context, loanRateId int64)) *MockFinancialProductRepository_GetLoanRateDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanRateDetail_Call) Return(_a0 entity.LoanRate, _a1 error) *MockFinancialProductRepository_GetLoanRateDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanRateDetail_Call) RunAndReturn(run func(context.Context, int64) (entity.LoanRate, error)) *MockFinancialProductRepository_GetLoanRateDetail_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoanRatesByIds provides a mock function with given fields: ctx, loanRateIds
func (_m *MockFinancialProductRepository) GetLoanRatesByIds(ctx context.Context, loanRateIds []int64) ([]entity.LoanRate, error) {
	ret := _m.Called(ctx, loanRateIds)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanRatesByIds")
	}

	var r0 []entity.LoanRate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]entity.LoanRate, error)); ok {
		return rf(ctx, loanRateIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.LoanRate); ok {
		r0 = rf(ctx, loanRateIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanRate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, loanRateIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetLoanRatesByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoanRatesByIds'
type MockFinancialProductRepository_GetLoanRatesByIds_Call struct {
	*mock.Call
}

// GetLoanRatesByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - loanRateIds []int64
func (_e *MockFinancialProductRepository_Expecter) GetLoanRatesByIds(ctx interface{}, loanRateIds interface{}) *MockFinancialProductRepository_GetLoanRatesByIds_Call {
	return &MockFinancialProductRepository_GetLoanRatesByIds_Call{Call: _e.mock.On("GetLoanRatesByIds", ctx, loanRateIds)}
}

func (_c *MockFinancialProductRepository_GetLoanRatesByIds_Call) Run(run func(ctx context.Context, loanRateIds []int64)) *MockFinancialProductRepository_GetLoanRatesByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanRatesByIds_Call) Return(_a0 []entity.LoanRate, _a1 error) *MockFinancialProductRepository_GetLoanRatesByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetLoanRatesByIds_Call) RunAndReturn(run func(context.Context, []int64) ([]entity.LoanRate, error)) *MockFinancialProductRepository_GetLoanRatesByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarginBasketsByIds provides a mock function with given fields: ctx, ids
func (_m *MockFinancialProductRepository) GetMarginBasketsByIds(ctx context.Context, ids []int64) ([]entity.MarginBasket, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetMarginBasketsByIds")
	}

	var r0 []entity.MarginBasket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]entity.MarginBasket, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.MarginBasket); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MarginBasket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancialProductRepository_GetMarginBasketsByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarginBasketsByIds'
type MockFinancialProductRepository_GetMarginBasketsByIds_Call struct {
	*mock.Call
}

// GetMarginBasketsByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
func (_e *MockFinancialProductRepository_Expecter) GetMarginBasketsByIds(ctx interface{}, ids interface{}) *MockFinancialProductRepository_GetMarginBasketsByIds_Call {
	return &MockFinancialProductRepository_GetMarginBasketsByIds_Call{Call: _e.mock.On("GetMarginBasketsByIds", ctx, ids)}
}

func (_c *MockFinancialProductRepository_GetMarginBasketsByIds_Call) Run(run func(ctx context.Context, ids []int64)) *MockFinancialProductRepository_GetMarginBasketsByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockFinancialProductRepository_GetMarginBasketsByIds_Call) Return(_a0 []entity.MarginBasket, _a1 error) *MockFinancialProductRepository_GetMarginBasketsByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancialProductRepository_GetMarginBasketsByIds_Call) RunAndReturn(run func(context.Context, []int64) ([]entity.MarginBasket, error)) *MockFinancialProductRepository_GetMarginBasketsByIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFinancialProductRepository creates a new instance of MockFinancialProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinancialProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinancialProductRepository {
	mock := &MockFinancialProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
