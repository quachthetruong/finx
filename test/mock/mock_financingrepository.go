// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockFinancingRepository is an autogenerated mock type for the FinancingRepository type
type MockFinancingRepository struct {
	mock.Mock
}

type MockFinancingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFinancingRepository) EXPECT() *MockFinancingRepository_Expecter {
	return &MockFinancingRepository_Expecter{mock: &_m.Mock}
}

// GetDateAfter provides a mock function with given fields: date, workingDays
func (_m *MockFinancingRepository) GetDateAfter(date time.Time, workingDays int) (time.Time, error) {
	ret := _m.Called(date, workingDays)

	if len(ret) == 0 {
		panic("no return value specified for GetDateAfter")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, int) (time.Time, error)); ok {
		return rf(date, workingDays)
	}
	if rf, ok := ret.Get(0).(func(time.Time, int) time.Time); ok {
		r0 = rf(date, workingDays)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(time.Time, int) error); ok {
		r1 = rf(date, workingDays)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFinancingRepository_GetDateAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDateAfter'
type MockFinancingRepository_GetDateAfter_Call struct {
	*mock.Call
}

// GetDateAfter is a helper method to define mock.On call
//   - date time.Time
//   - workingDays int
func (_e *MockFinancingRepository_Expecter) GetDateAfter(date interface{}, workingDays interface{}) *MockFinancingRepository_GetDateAfter_Call {
	return &MockFinancingRepository_GetDateAfter_Call{Call: _e.mock.On("GetDateAfter", date, workingDays)}
}

func (_c *MockFinancingRepository_GetDateAfter_Call) Run(run func(date time.Time, workingDays int)) *MockFinancingRepository_GetDateAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(int))
	})
	return _c
}

func (_c *MockFinancingRepository_GetDateAfter_Call) Return(_a0 time.Time, _a1 error) *MockFinancingRepository_GetDateAfter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFinancingRepository_GetDateAfter_Call) RunAndReturn(run func(time.Time, int) (time.Time, error)) *MockFinancingRepository_GetDateAfter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFinancingRepository creates a new instance of MockFinancingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinancingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinancingRepository {
	mock := &MockFinancingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
