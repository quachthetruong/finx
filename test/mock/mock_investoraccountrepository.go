// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockInvestorAccountRepository is an autogenerated mock type for the InvestorAccountRepository type
type MockInvestorAccountRepository struct {
	mock.Mock
}

type MockInvestorAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInvestorAccountRepository) EXPECT() *MockInvestorAccountRepository_Expecter {
	return &MockInvestorAccountRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, account
func (_m *MockInvestorAccountRepository) Create(ctx context.Context, account entity.InvestorAccount) (entity.InvestorAccount, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.InvestorAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.InvestorAccount) (entity.InvestorAccount, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.InvestorAccount) entity.InvestorAccount); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(entity.InvestorAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.InvestorAccount) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvestorAccountRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockInvestorAccountRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - account entity.InvestorAccount
func (_e *MockInvestorAccountRepository_Expecter) Create(ctx interface{}, account interface{}) *MockInvestorAccountRepository_Create_Call {
	return &MockInvestorAccountRepository_Create_Call{Call: _e.mock.On("Create", ctx, account)}
}

func (_c *MockInvestorAccountRepository_Create_Call) Run(run func(ctx context.Context, account entity.InvestorAccount)) *MockInvestorAccountRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.InvestorAccount))
	})
	return _c
}

func (_c *MockInvestorAccountRepository_Create_Call) Return(_a0 entity.InvestorAccount, _a1 error) *MockInvestorAccountRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvestorAccountRepository_Create_Call) RunAndReturn(run func(context.Context, entity.InvestorAccount) (entity.InvestorAccount, error)) *MockInvestorAccountRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAccountNo provides a mock function with given fields: ctx, accountNo
func (_m *MockInvestorAccountRepository) GetByAccountNo(ctx context.Context, accountNo string) (entity.InvestorAccount, error) {
	ret := _m.Called(ctx, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for GetByAccountNo")
	}

	var r0 entity.InvestorAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.InvestorAccount, error)); ok {
		return rf(ctx, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.InvestorAccount); ok {
		r0 = rf(ctx, accountNo)
	} else {
		r0 = ret.Get(0).(entity.InvestorAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvestorAccountRepository_GetByAccountNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAccountNo'
type MockInvestorAccountRepository_GetByAccountNo_Call struct {
	*mock.Call
}

// GetByAccountNo is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNo string
func (_e *MockInvestorAccountRepository_Expecter) GetByAccountNo(ctx interface{}, accountNo interface{}) *MockInvestorAccountRepository_GetByAccountNo_Call {
	return &MockInvestorAccountRepository_GetByAccountNo_Call{Call: _e.mock.On("GetByAccountNo", ctx, accountNo)}
}

func (_c *MockInvestorAccountRepository_GetByAccountNo_Call) Run(run func(ctx context.Context, accountNo string)) *MockInvestorAccountRepository_GetByAccountNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInvestorAccountRepository_GetByAccountNo_Call) Return(_a0 entity.InvestorAccount, _a1 error) *MockInvestorAccountRepository_GetByAccountNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvestorAccountRepository_GetByAccountNo_Call) RunAndReturn(run func(context.Context, string) (entity.InvestorAccount, error)) *MockInvestorAccountRepository_GetByAccountNo_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, account
func (_m *MockInvestorAccountRepository) Update(ctx context.Context, account entity.InvestorAccount) (entity.InvestorAccount, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.InvestorAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.InvestorAccount) (entity.InvestorAccount, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.InvestorAccount) entity.InvestorAccount); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(entity.InvestorAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.InvestorAccount) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvestorAccountRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockInvestorAccountRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - account entity.InvestorAccount
func (_e *MockInvestorAccountRepository_Expecter) Update(ctx interface{}, account interface{}) *MockInvestorAccountRepository_Update_Call {
	return &MockInvestorAccountRepository_Update_Call{Call: _e.mock.On("Update", ctx, account)}
}

func (_c *MockInvestorAccountRepository_Update_Call) Run(run func(ctx context.Context, account entity.InvestorAccount)) *MockInvestorAccountRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.InvestorAccount))
	})
	return _c
}

func (_c *MockInvestorAccountRepository_Update_Call) Return(_a0 entity.InvestorAccount, _a1 error) *MockInvestorAccountRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvestorAccountRepository_Update_Call) RunAndReturn(run func(context.Context, entity.InvestorAccount) (entity.InvestorAccount, error)) *MockInvestorAccountRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInvestorAccountRepository creates a new instance of MockInvestorAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvestorAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvestorAccountRepository {
	mock := &MockInvestorAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
