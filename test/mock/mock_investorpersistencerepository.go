// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockInvestorPersistenceRepository is an autogenerated mock type for the InvestorPersistenceRepository type
type MockInvestorPersistenceRepository struct {
	mock.Mock
}

type MockInvestorPersistenceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInvestorPersistenceRepository) EXPECT() *MockInvestorPersistenceRepository_Expecter {
	return &MockInvestorPersistenceRepository_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function with given fields: ctx, investors
func (_m *MockInvestorPersistenceRepository) BulkCreate(ctx context.Context, investors []entity.Investor) error {
	ret := _m.Called(ctx, investors)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Investor) error); ok {
		r0 = rf(ctx, investors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInvestorPersistenceRepository_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type MockInvestorPersistenceRepository_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - investors []entity.Investor
func (_e *MockInvestorPersistenceRepository_Expecter) BulkCreate(ctx interface{}, investors interface{}) *MockInvestorPersistenceRepository_BulkCreate_Call {
	return &MockInvestorPersistenceRepository_BulkCreate_Call{Call: _e.mock.On("BulkCreate", ctx, investors)}
}

func (_c *MockInvestorPersistenceRepository_BulkCreate_Call) Run(run func(ctx context.Context, investors []entity.Investor)) *MockInvestorPersistenceRepository_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.Investor))
	})
	return _c
}

func (_c *MockInvestorPersistenceRepository_BulkCreate_Call) Return(_a0 error) *MockInvestorPersistenceRepository_BulkCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInvestorPersistenceRepository_BulkCreate_Call) RunAndReturn(run func(context.Context, []entity.Investor) error) *MockInvestorPersistenceRepository_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIfNotExist provides a mock function with given fields: ctx, investor
func (_m *MockInvestorPersistenceRepository) CreateIfNotExist(ctx context.Context, investor entity.Investor) error {
	ret := _m.Called(ctx, investor)

	if len(ret) == 0 {
		panic("no return value specified for CreateIfNotExist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Investor) error); ok {
		r0 = rf(ctx, investor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInvestorPersistenceRepository_CreateIfNotExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIfNotExist'
type MockInvestorPersistenceRepository_CreateIfNotExist_Call struct {
	*mock.Call
}

// CreateIfNotExist is a helper method to define mock.On call
//   - ctx context.Context
//   - investor entity.Investor
func (_e *MockInvestorPersistenceRepository_Expecter) CreateIfNotExist(ctx interface{}, investor interface{}) *MockInvestorPersistenceRepository_CreateIfNotExist_Call {
	return &MockInvestorPersistenceRepository_CreateIfNotExist_Call{Call: _e.mock.On("CreateIfNotExist", ctx, investor)}
}

func (_c *MockInvestorPersistenceRepository_CreateIfNotExist_Call) Run(run func(ctx context.Context, investor entity.Investor)) *MockInvestorPersistenceRepository_CreateIfNotExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Investor))
	})
	return _c
}

func (_c *MockInvestorPersistenceRepository_CreateIfNotExist_Call) Return(_a0 error) *MockInvestorPersistenceRepository_CreateIfNotExist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInvestorPersistenceRepository_CreateIfNotExist_Call) RunAndReturn(run func(context.Context, entity.Investor) error) *MockInvestorPersistenceRepository_CreateIfNotExist_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllInvestorIdsForMigration provides a mock function with given fields: ctx
func (_m *MockInvestorPersistenceRepository) GetAllInvestorIdsForMigration(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllInvestorIdsForMigration")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInvestorIdsForMigration'
type MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call struct {
	*mock.Call
}

// GetAllInvestorIdsForMigration is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInvestorPersistenceRepository_Expecter) GetAllInvestorIdsForMigration(ctx interface{}) *MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call {
	return &MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call{Call: _e.mock.On("GetAllInvestorIdsForMigration", ctx)}
}

func (_c *MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call) Run(run func(ctx context.Context)) *MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call) Return(_a0 []string, _a1 error) *MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockInvestorPersistenceRepository_GetAllInvestorIdsForMigration_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUniqueInvestorIdsFromRequests provides a mock function with given fields: ctx
func (_m *MockInvestorPersistenceRepository) GetAllUniqueInvestorIdsFromRequests(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUniqueInvestorIdsFromRequests")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUniqueInvestorIdsFromRequests'
type MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call struct {
	*mock.Call
}

// GetAllUniqueInvestorIdsFromRequests is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInvestorPersistenceRepository_Expecter) GetAllUniqueInvestorIdsFromRequests(ctx interface{}) *MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call {
	return &MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call{Call: _e.mock.On("GetAllUniqueInvestorIdsFromRequests", ctx)}
}

func (_c *MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call) Run(run func(ctx context.Context)) *MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call) Return(_a0 []string, _a1 error) *MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockInvestorPersistenceRepository_GetAllUniqueInvestorIdsFromRequests_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, investor
func (_m *MockInvestorPersistenceRepository) Update(ctx context.Context, investor entity.Investor) (entity.Investor, error) {
	ret := _m.Called(ctx, investor)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Investor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Investor) (entity.Investor, error)); ok {
		return rf(ctx, investor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Investor) entity.Investor); ok {
		r0 = rf(ctx, investor)
	} else {
		r0 = ret.Get(0).(entity.Investor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Investor) error); ok {
		r1 = rf(ctx, investor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInvestorPersistenceRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockInvestorPersistenceRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - investor entity.Investor
func (_e *MockInvestorPersistenceRepository_Expecter) Update(ctx interface{}, investor interface{}) *MockInvestorPersistenceRepository_Update_Call {
	return &MockInvestorPersistenceRepository_Update_Call{Call: _e.mock.On("Update", ctx, investor)}
}

func (_c *MockInvestorPersistenceRepository_Update_Call) Run(run func(ctx context.Context, investor entity.Investor)) *MockInvestorPersistenceRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Investor))
	})
	return _c
}

func (_c *MockInvestorPersistenceRepository_Update_Call) Return(_a0 entity.Investor, _a1 error) *MockInvestorPersistenceRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInvestorPersistenceRepository_Update_Call) RunAndReturn(run func(context.Context, entity.Investor) (entity.Investor, error)) *MockInvestorPersistenceRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInvestorPersistenceRepository creates a new instance of MockInvestorPersistenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvestorPersistenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvestorPersistenceRepository {
	mock := &MockInvestorPersistenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
