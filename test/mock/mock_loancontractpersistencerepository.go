// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	querymod "financing-offer/pkg/querymod"
)

// MockLoanContractPersistenceRepository is an autogenerated mock type for the LoanContractPersistenceRepository type
type MockLoanContractPersistenceRepository struct {
	mock.Mock
}

type MockLoanContractPersistenceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanContractPersistenceRepository) EXPECT() *MockLoanContractPersistenceRepository_Expecter {
	return &MockLoanContractPersistenceRepository_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function with given fields: ctx, loanContracts
func (_m *MockLoanContractPersistenceRepository) BulkCreate(ctx context.Context, loanContracts []entity.LoanContract) error {
	ret := _m.Called(ctx, loanContracts)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.LoanContract) error); ok {
		r0 = rf(ctx, loanContracts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanContractPersistenceRepository_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type MockLoanContractPersistenceRepository_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - loanContracts []entity.LoanContract
func (_e *MockLoanContractPersistenceRepository_Expecter) BulkCreate(ctx interface{}, loanContracts interface{}) *MockLoanContractPersistenceRepository_BulkCreate_Call {
	return &MockLoanContractPersistenceRepository_BulkCreate_Call{Call: _e.mock.On("BulkCreate", ctx, loanContracts)}
}

func (_c *MockLoanContractPersistenceRepository_BulkCreate_Call) Run(run func(ctx context.Context, loanContracts []entity.LoanContract)) *MockLoanContractPersistenceRepository_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.LoanContract))
	})
	return _c
}

func (_c *MockLoanContractPersistenceRepository_BulkCreate_Call) Return(_a0 error) *MockLoanContractPersistenceRepository_BulkCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanContractPersistenceRepository_BulkCreate_Call) RunAndReturn(run func(context.Context, []entity.LoanContract) error) *MockLoanContractPersistenceRepository_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, loanContract
func (_m *MockLoanContractPersistenceRepository) Create(ctx context.Context, loanContract entity.LoanContract) (entity.LoanContract, error) {
	ret := _m.Called(ctx, loanContract)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.LoanContract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanContract) (entity.LoanContract, error)); ok {
		return rf(ctx, loanContract)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanContract) entity.LoanContract); ok {
		r0 = rf(ctx, loanContract)
	} else {
		r0 = ret.Get(0).(entity.LoanContract)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanContract) error); ok {
		r1 = rf(ctx, loanContract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanContractPersistenceRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLoanContractPersistenceRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - loanContract entity.LoanContract
func (_e *MockLoanContractPersistenceRepository_Expecter) Create(ctx interface{}, loanContract interface{}) *MockLoanContractPersistenceRepository_Create_Call {
	return &MockLoanContractPersistenceRepository_Create_Call{Call: _e.mock.On("Create", ctx, loanContract)}
}

func (_c *MockLoanContractPersistenceRepository_Create_Call) Run(run func(ctx context.Context, loanContract entity.LoanContract)) *MockLoanContractPersistenceRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanContract))
	})
	return _c
}

func (_c *MockLoanContractPersistenceRepository_Create_Call) Return(_a0 entity.LoanContract, _a1 error) *MockLoanContractPersistenceRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanContractPersistenceRepository_Create_Call) RunAndReturn(run func(context.Context, entity.LoanContract) (entity.LoanContract, error)) *MockLoanContractPersistenceRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id, opts
func (_m *MockLoanContractPersistenceRepository) GetById(ctx context.Context, id int64, opts ...querymod.GetOption) (entity.LoanContract, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.LoanContract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...querymod.GetOption) (entity.LoanContract, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...querymod.GetOption) entity.LoanContract); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		r0 = ret.Get(0).(entity.LoanContract)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...querymod.GetOption) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanContractPersistenceRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockLoanContractPersistenceRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - opts ...querymod.GetOption
func (_e *MockLoanContractPersistenceRepository_Expecter) GetById(ctx interface{}, id interface{}, opts ...interface{}) *MockLoanContractPersistenceRepository_GetById_Call {
	return &MockLoanContractPersistenceRepository_GetById_Call{Call: _e.mock.On("GetById",
		append([]interface{}{ctx, id}, opts...)...)}
}

func (_c *MockLoanContractPersistenceRepository_GetById_Call) Run(run func(ctx context.Context, id int64, opts ...querymod.GetOption)) *MockLoanContractPersistenceRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]querymod.GetOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(querymod.GetOption)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockLoanContractPersistenceRepository_GetById_Call) Return(_a0 entity.LoanContract, _a1 error) *MockLoanContractPersistenceRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanContractPersistenceRepository_GetById_Call) RunAndReturn(run func(context.Context, int64, ...querymod.GetOption) (entity.LoanContract, error)) *MockLoanContractPersistenceRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvestorActiveContract provides a mock function with given fields: ctx, investorId, symbolId
func (_m *MockLoanContractPersistenceRepository) GetInvestorActiveContract(ctx context.Context, investorId string, symbolId int64) (entity.LoanContract, error) {
	ret := _m.Called(ctx, investorId, symbolId)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestorActiveContract")
	}

	var r0 entity.LoanContract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (entity.LoanContract, error)); ok {
		return rf(ctx, investorId, symbolId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) entity.LoanContract); ok {
		r0 = rf(ctx, investorId, symbolId)
	} else {
		r0 = ret.Get(0).(entity.LoanContract)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, investorId, symbolId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvestorActiveContract'
type MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call struct {
	*mock.Call
}

// GetInvestorActiveContract is a helper method to define mock.On call
//   - ctx context.Context
//   - investorId string
//   - symbolId int64
func (_e *MockLoanContractPersistenceRepository_Expecter) GetInvestorActiveContract(ctx interface{}, investorId interface{}, symbolId interface{}) *MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call {
	return &MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call{Call: _e.mock.On("GetInvestorActiveContract", ctx, investorId, symbolId)}
}

func (_c *MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call) Run(run func(ctx context.Context, investorId string, symbolId int64)) *MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call) Return(_a0 entity.LoanContract, _a1 error) *MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call) RunAndReturn(run func(context.Context, string, int64) (entity.LoanContract, error)) *MockLoanContractPersistenceRepository_GetInvestorActiveContract_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanContractPersistenceRepository creates a new instance of MockLoanContractPersistenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanContractPersistenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanContractPersistenceRepository {
	mock := &MockLoanContractPersistenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
