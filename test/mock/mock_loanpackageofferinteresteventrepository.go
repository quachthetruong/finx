// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLoanPackageOfferInterestEventRepository is an autogenerated mock type for the LoanPackageOfferInterestEventRepository type
type MockLoanPackageOfferInterestEventRepository struct {
	mock.Mock
}

type MockLoanPackageOfferInterestEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanPackageOfferInterestEventRepository) EXPECT() *MockLoanPackageOfferInterestEventRepository_Expecter {
	return &MockLoanPackageOfferInterestEventRepository_Expecter{mock: &_m.Mock}
}

// CreateMarginLoanPackage provides a mock function with given fields: ctx, state
func (_m *MockLoanPackageOfferInterestEventRepository) CreateMarginLoanPackage(ctx context.Context, state entity.AssignmentState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for CreateMarginLoanPackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.AssignmentState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMarginLoanPackage'
type MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call struct {
	*mock.Call
}

// CreateMarginLoanPackage is a helper method to define mock.On call
//   - ctx context.Context
//   - state entity.AssignmentState
func (_e *MockLoanPackageOfferInterestEventRepository_Expecter) CreateMarginLoanPackage(ctx interface{}, state interface{}) *MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call {
	return &MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call{Call: _e.mock.On("CreateMarginLoanPackage", ctx, state)}
}

func (_c *MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call) Run(run func(ctx context.Context, state entity.AssignmentState)) *MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.AssignmentState))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call) Return(_a0 error) *MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call) RunAndReturn(run func(context.Context, entity.AssignmentState) error) *MockLoanPackageOfferInterestEventRepository_CreateMarginLoanPackage_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyDerivativeLoanPackageOfferReady provides a mock function with given fields: ctx, data
func (_m *MockLoanPackageOfferInterestEventRepository) NotifyDerivativeLoanPackageOfferReady(ctx context.Context, data entity.DerivativeLoanPackageOfferReadyNotify) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyDerivativeLoanPackageOfferReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.DerivativeLoanPackageOfferReadyNotify) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyDerivativeLoanPackageOfferReady'
type MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call struct {
	*mock.Call
}

// NotifyDerivativeLoanPackageOfferReady is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.DerivativeLoanPackageOfferReadyNotify
func (_e *MockLoanPackageOfferInterestEventRepository_Expecter) NotifyDerivativeLoanPackageOfferReady(ctx interface{}, data interface{}) *MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call {
	return &MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call{Call: _e.mock.On("NotifyDerivativeLoanPackageOfferReady", ctx, data)}
}

func (_c *MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call) Run(run func(ctx context.Context, data entity.DerivativeLoanPackageOfferReadyNotify)) *MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.DerivativeLoanPackageOfferReadyNotify))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call) Return(_a0 error) *MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call) RunAndReturn(run func(context.Context, entity.DerivativeLoanPackageOfferReadyNotify) error) *MockLoanPackageOfferInterestEventRepository_NotifyDerivativeLoanPackageOfferReady_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyLoanPackageOfferReady provides a mock function with given fields: ctx, data
func (_m *MockLoanPackageOfferInterestEventRepository) NotifyLoanPackageOfferReady(ctx context.Context, data entity.LoanPackageOfferReadyNotify) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyLoanPackageOfferReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOfferReadyNotify) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyLoanPackageOfferReady'
type MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call struct {
	*mock.Call
}

// NotifyLoanPackageOfferReady is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.LoanPackageOfferReadyNotify
func (_e *MockLoanPackageOfferInterestEventRepository_Expecter) NotifyLoanPackageOfferReady(ctx interface{}, data interface{}) *MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call {
	return &MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call{Call: _e.mock.On("NotifyLoanPackageOfferReady", ctx, data)}
}

func (_c *MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call) Run(run func(ctx context.Context, data entity.LoanPackageOfferReadyNotify)) *MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageOfferReadyNotify))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call) Return(_a0 error) *MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call) RunAndReturn(run func(context.Context, entity.LoanPackageOfferReadyNotify) error) *MockLoanPackageOfferInterestEventRepository_NotifyLoanPackageOfferReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanPackageOfferInterestEventRepository creates a new instance of MockLoanPackageOfferInterestEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanPackageOfferInterestEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanPackageOfferInterestEventRepository {
	mock := &MockLoanPackageOfferInterestEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
