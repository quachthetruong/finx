// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	querymod "financing-offer/pkg/querymod"
)

// MockLoanPackageOfferInterestRepository is an autogenerated mock type for the LoanPackageOfferInterestRepository type
type MockLoanPackageOfferInterestRepository struct {
	mock.Mock
}

type MockLoanPackageOfferInterestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanPackageOfferInterestRepository) EXPECT() *MockLoanPackageOfferInterestRepository_Expecter {
	return &MockLoanPackageOfferInterestRepository_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function with given fields: ctx, loanPackageOfferInterests
func (_m *MockLoanPackageOfferInterestRepository) BulkCreate(ctx context.Context, loanPackageOfferInterests []entity.LoanPackageOfferInterest) ([]entity.LoanPackageOfferInterest, error) {
	ret := _m.Called(ctx, loanPackageOfferInterests)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 []entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.LoanPackageOfferInterest) ([]entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx, loanPackageOfferInterests)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.LoanPackageOfferInterest) []entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx, loanPackageOfferInterests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOfferInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.LoanPackageOfferInterest) error); ok {
		r1 = rf(ctx, loanPackageOfferInterests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type MockLoanPackageOfferInterestRepository_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageOfferInterests []entity.LoanPackageOfferInterest
func (_e *MockLoanPackageOfferInterestRepository_Expecter) BulkCreate(ctx interface{}, loanPackageOfferInterests interface{}) *MockLoanPackageOfferInterestRepository_BulkCreate_Call {
	return &MockLoanPackageOfferInterestRepository_BulkCreate_Call{Call: _e.mock.On("BulkCreate", ctx, loanPackageOfferInterests)}
}

func (_c *MockLoanPackageOfferInterestRepository_BulkCreate_Call) Run(run func(ctx context.Context, loanPackageOfferInterests []entity.LoanPackageOfferInterest)) *MockLoanPackageOfferInterestRepository_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.LoanPackageOfferInterest))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_BulkCreate_Call) Return(_a0 []entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_BulkCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_BulkCreate_Call) RunAndReturn(run func(context.Context, []entity.LoanPackageOfferInterest) ([]entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// CancelByOfferId provides a mock function with given fields: ctx, offerId, cancelledBy, cancelledReason
func (_m *MockLoanPackageOfferInterestRepository) CancelByOfferId(ctx context.Context, offerId int64, cancelledBy string, cancelledReason entity.CancelledReason) error {
	ret := _m.Called(ctx, offerId, cancelledBy, cancelledReason)

	if len(ret) == 0 {
		panic("no return value specified for CancelByOfferId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, entity.CancelledReason) error); ok {
		r0 = rf(ctx, offerId, cancelledBy, cancelledReason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageOfferInterestRepository_CancelByOfferId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelByOfferId'
type MockLoanPackageOfferInterestRepository_CancelByOfferId_Call struct {
	*mock.Call
}

// CancelByOfferId is a helper method to define mock.On call
//   - ctx context.Context
//   - offerId int64
//   - cancelledBy string
//   - cancelledReason entity.CancelledReason
func (_e *MockLoanPackageOfferInterestRepository_Expecter) CancelByOfferId(ctx interface{}, offerId interface{}, cancelledBy interface{}, cancelledReason interface{}) *MockLoanPackageOfferInterestRepository_CancelByOfferId_Call {
	return &MockLoanPackageOfferInterestRepository_CancelByOfferId_Call{Call: _e.mock.On("CancelByOfferId", ctx, offerId, cancelledBy, cancelledReason)}
}

func (_c *MockLoanPackageOfferInterestRepository_CancelByOfferId_Call) Run(run func(ctx context.Context, offerId int64, cancelledBy string, cancelledReason entity.CancelledReason)) *MockLoanPackageOfferInterestRepository_CancelByOfferId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(entity.CancelledReason))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_CancelByOfferId_Call) Return(_a0 error) *MockLoanPackageOfferInterestRepository_CancelByOfferId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_CancelByOfferId_Call) RunAndReturn(run func(context.Context, int64, string, entity.CancelledReason) error) *MockLoanPackageOfferInterestRepository_CancelByOfferId_Call {
	_c.Call.Return(run)
	return _c
}

// CancelExpiredOfferInterests provides a mock function with given fields: ctx, offerIds
func (_m *MockLoanPackageOfferInterestRepository) CancelExpiredOfferInterests(ctx context.Context, offerIds []int64) error {
	ret := _m.Called(ctx, offerIds)

	if len(ret) == 0 {
		panic("no return value specified for CancelExpiredOfferInterests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) error); ok {
		r0 = rf(ctx, offerIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelExpiredOfferInterests'
type MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call struct {
	*mock.Call
}

// CancelExpiredOfferInterests is a helper method to define mock.On call
//   - ctx context.Context
//   - offerIds []int64
func (_e *MockLoanPackageOfferInterestRepository_Expecter) CancelExpiredOfferInterests(ctx interface{}, offerIds interface{}) *MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call {
	return &MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call{Call: _e.mock.On("CancelExpiredOfferInterests", ctx, offerIds)}
}

func (_c *MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call) Run(run func(ctx context.Context, offerIds []int64)) *MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call) Return(_a0 error) *MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call) RunAndReturn(run func(context.Context, []int64) error) *MockLoanPackageOfferInterestRepository_CancelExpiredOfferInterests_Call {
	_c.Call.Return(run)
	return _c
}

// CountWithFilter provides a mock function with given fields: ctx, filter
func (_m *MockLoanPackageOfferInterestRepository) CountWithFilter(ctx context.Context, filter entity.OfferInterestFilter) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for CountWithFilter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.OfferInterestFilter) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.OfferInterestFilter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.OfferInterestFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_CountWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountWithFilter'
type MockLoanPackageOfferInterestRepository_CountWithFilter_Call struct {
	*mock.Call
}

// CountWithFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.OfferInterestFilter
func (_e *MockLoanPackageOfferInterestRepository_Expecter) CountWithFilter(ctx interface{}, filter interface{}) *MockLoanPackageOfferInterestRepository_CountWithFilter_Call {
	return &MockLoanPackageOfferInterestRepository_CountWithFilter_Call{Call: _e.mock.On("CountWithFilter", ctx, filter)}
}

func (_c *MockLoanPackageOfferInterestRepository_CountWithFilter_Call) Run(run func(ctx context.Context, filter entity.OfferInterestFilter)) *MockLoanPackageOfferInterestRepository_CountWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.OfferInterestFilter))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_CountWithFilter_Call) Return(_a0 int64, _a1 error) *MockLoanPackageOfferInterestRepository_CountWithFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_CountWithFilter_Call) RunAndReturn(run func(context.Context, entity.OfferInterestFilter) (int64, error)) *MockLoanPackageOfferInterestRepository_CountWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, loanPackageOfferInterest
func (_m *MockLoanPackageOfferInterestRepository) Create(ctx context.Context, loanPackageOfferInterest entity.LoanPackageOfferInterest) (entity.LoanPackageOfferInterest, error) {
	ret := _m.Called(ctx, loanPackageOfferInterest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOfferInterest) (entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx, loanPackageOfferInterest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOfferInterest) entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx, loanPackageOfferInterest)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageOfferInterest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageOfferInterest) error); ok {
		r1 = rf(ctx, loanPackageOfferInterest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLoanPackageOfferInterestRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageOfferInterest entity.LoanPackageOfferInterest
func (_e *MockLoanPackageOfferInterestRepository_Expecter) Create(ctx interface{}, loanPackageOfferInterest interface{}) *MockLoanPackageOfferInterestRepository_Create_Call {
	return &MockLoanPackageOfferInterestRepository_Create_Call{Call: _e.mock.On("Create", ctx, loanPackageOfferInterest)}
}

func (_c *MockLoanPackageOfferInterestRepository_Create_Call) Run(run func(ctx context.Context, loanPackageOfferInterest entity.LoanPackageOfferInterest)) *MockLoanPackageOfferInterestRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageOfferInterest))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_Create_Call) Return(_a0 entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_Create_Call) RunAndReturn(run func(context.Context, entity.LoanPackageOfferInterest) (entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id, opts
func (_m *MockLoanPackageOfferInterestRepository) GetById(ctx context.Context, id int64, opts ...querymod.GetOption) (entity.LoanPackageOfferInterest, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...querymod.GetOption) (entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...querymod.GetOption) entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageOfferInterest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...querymod.GetOption) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockLoanPackageOfferInterestRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - opts ...querymod.GetOption
func (_e *MockLoanPackageOfferInterestRepository_Expecter) GetById(ctx interface{}, id interface{}, opts ...interface{}) *MockLoanPackageOfferInterestRepository_GetById_Call {
	return &MockLoanPackageOfferInterestRepository_GetById_Call{Call: _e.mock.On("GetById",
		append([]interface{}{ctx, id}, opts...)...)}
}

func (_c *MockLoanPackageOfferInterestRepository_GetById_Call) Run(run func(ctx context.Context, id int64, opts ...querymod.GetOption)) *MockLoanPackageOfferInterestRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]querymod.GetOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(querymod.GetOption)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetById_Call) Return(_a0 entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetById_Call) RunAndReturn(run func(context.Context, int64, ...querymod.GetOption) (entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIds provides a mock function with given fields: ctx, ids, opts
func (_m *MockLoanPackageOfferInterestRepository) GetByIds(ctx context.Context, ids []int64, opts ...querymod.GetOption) ([]entity.LoanPackageOfferInterest, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, ids)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetByIds")
	}

	var r0 []entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, ...querymod.GetOption) ([]entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx, ids, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64, ...querymod.GetOption) []entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx, ids, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOfferInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64, ...querymod.GetOption) error); ok {
		r1 = rf(ctx, ids, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_GetByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIds'
type MockLoanPackageOfferInterestRepository_GetByIds_Call struct {
	*mock.Call
}

// GetByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
//   - opts ...querymod.GetOption
func (_e *MockLoanPackageOfferInterestRepository_Expecter) GetByIds(ctx interface{}, ids interface{}, opts ...interface{}) *MockLoanPackageOfferInterestRepository_GetByIds_Call {
	return &MockLoanPackageOfferInterestRepository_GetByIds_Call{Call: _e.mock.On("GetByIds",
		append([]interface{}{ctx, ids}, opts...)...)}
}

func (_c *MockLoanPackageOfferInterestRepository_GetByIds_Call) Run(run func(ctx context.Context, ids []int64, opts ...querymod.GetOption)) *MockLoanPackageOfferInterestRepository_GetByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]querymod.GetOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(querymod.GetOption)
			}
		}
		run(args[0].(context.Context), args[1].([]int64), variadicArgs...)
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetByIds_Call) Return(_a0 []entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_GetByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetByIds_Call) RunAndReturn(run func(context.Context, []int64, ...querymod.GetOption) ([]entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_GetByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetByOfferIdWithLock provides a mock function with given fields: ctx, offerId
func (_m *MockLoanPackageOfferInterestRepository) GetByOfferIdWithLock(ctx context.Context, offerId int64) ([]entity.LoanPackageOfferInterest, error) {
	ret := _m.Called(ctx, offerId)

	if len(ret) == 0 {
		panic("no return value specified for GetByOfferIdWithLock")
	}

	var r0 []entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx, offerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx, offerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOfferInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, offerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOfferIdWithLock'
type MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call struct {
	*mock.Call
}

// GetByOfferIdWithLock is a helper method to define mock.On call
//   - ctx context.Context
//   - offerId int64
func (_e *MockLoanPackageOfferInterestRepository_Expecter) GetByOfferIdWithLock(ctx interface{}, offerId interface{}) *MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call {
	return &MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call{Call: _e.mock.On("GetByOfferIdWithLock", ctx, offerId)}
}

func (_c *MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call) Run(run func(ctx context.Context, offerId int64)) *MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call) Return(_a0 []entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call) RunAndReturn(run func(context.Context, int64) ([]entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_GetByOfferIdWithLock_Call {
	_c.Call.Return(run)
	return _c
}

// GetRequestBasedLoanOfferInterests provides a mock function with given fields: ctx
func (_m *MockLoanPackageOfferInterestRepository) GetRequestBasedLoanOfferInterests(ctx context.Context) ([]entity.LoanPackageOfferInterest, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestBasedLoanOfferInterests")
	}

	var r0 []entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOfferInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRequestBasedLoanOfferInterests'
type MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call struct {
	*mock.Call
}

// GetRequestBasedLoanOfferInterests is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoanPackageOfferInterestRepository_Expecter) GetRequestBasedLoanOfferInterests(ctx interface{}) *MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call {
	return &MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call{Call: _e.mock.On("GetRequestBasedLoanOfferInterests", ctx)}
}

func (_c *MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call) Run(run func(ctx context.Context)) *MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call) Return(_a0 []entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call) RunAndReturn(run func(context.Context) ([]entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_GetRequestBasedLoanOfferInterests_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithFilter provides a mock function with given fields: ctx, filter
func (_m *MockLoanPackageOfferInterestRepository) GetWithFilter(ctx context.Context, filter entity.OfferInterestFilter) ([]entity.LoanPackageOfferInterest, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetWithFilter")
	}

	var r0 []entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.OfferInterestFilter) ([]entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.OfferInterestFilter) []entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOfferInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.OfferInterestFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_GetWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithFilter'
type MockLoanPackageOfferInterestRepository_GetWithFilter_Call struct {
	*mock.Call
}

// GetWithFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.OfferInterestFilter
func (_e *MockLoanPackageOfferInterestRepository_Expecter) GetWithFilter(ctx interface{}, filter interface{}) *MockLoanPackageOfferInterestRepository_GetWithFilter_Call {
	return &MockLoanPackageOfferInterestRepository_GetWithFilter_Call{Call: _e.mock.On("GetWithFilter", ctx, filter)}
}

func (_c *MockLoanPackageOfferInterestRepository_GetWithFilter_Call) Run(run func(ctx context.Context, filter entity.OfferInterestFilter)) *MockLoanPackageOfferInterestRepository_GetWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.OfferInterestFilter))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetWithFilter_Call) Return(_a0 []entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_GetWithFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_GetWithFilter_Call) RunAndReturn(run func(context.Context, entity.OfferInterestFilter) ([]entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_GetWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, offerInterest
func (_m *MockLoanPackageOfferInterestRepository) Update(ctx context.Context, offerInterest entity.LoanPackageOfferInterest) (entity.LoanPackageOfferInterest, error) {
	ret := _m.Called(ctx, offerInterest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.LoanPackageOfferInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOfferInterest) (entity.LoanPackageOfferInterest, error)); ok {
		return rf(ctx, offerInterest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOfferInterest) entity.LoanPackageOfferInterest); ok {
		r0 = rf(ctx, offerInterest)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageOfferInterest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageOfferInterest) error); ok {
		r1 = rf(ctx, offerInterest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferInterestRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLoanPackageOfferInterestRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - offerInterest entity.LoanPackageOfferInterest
func (_e *MockLoanPackageOfferInterestRepository_Expecter) Update(ctx interface{}, offerInterest interface{}) *MockLoanPackageOfferInterestRepository_Update_Call {
	return &MockLoanPackageOfferInterestRepository_Update_Call{Call: _e.mock.On("Update", ctx, offerInterest)}
}

func (_c *MockLoanPackageOfferInterestRepository_Update_Call) Run(run func(ctx context.Context, offerInterest entity.LoanPackageOfferInterest)) *MockLoanPackageOfferInterestRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageOfferInterest))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_Update_Call) Return(_a0 entity.LoanPackageOfferInterest, _a1 error) *MockLoanPackageOfferInterestRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_Update_Call) RunAndReturn(run func(context.Context, entity.LoanPackageOfferInterest) (entity.LoanPackageOfferInterest, error)) *MockLoanPackageOfferInterestRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, ids, status
func (_m *MockLoanPackageOfferInterestRepository) UpdateStatus(ctx context.Context, ids []int64, status entity.LoanPackageOfferInterestStatus) error {
	ret := _m.Called(ctx, ids, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, entity.LoanPackageOfferInterestStatus) error); ok {
		r0 = rf(ctx, ids, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageOfferInterestRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockLoanPackageOfferInterestRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
//   - status entity.LoanPackageOfferInterestStatus
func (_e *MockLoanPackageOfferInterestRepository_Expecter) UpdateStatus(ctx interface{}, ids interface{}, status interface{}) *MockLoanPackageOfferInterestRepository_UpdateStatus_Call {
	return &MockLoanPackageOfferInterestRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, ids, status)}
}

func (_c *MockLoanPackageOfferInterestRepository_UpdateStatus_Call) Run(run func(ctx context.Context, ids []int64, status entity.LoanPackageOfferInterestStatus)) *MockLoanPackageOfferInterestRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].(entity.LoanPackageOfferInterestStatus))
	})
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_UpdateStatus_Call) Return(_a0 error) *MockLoanPackageOfferInterestRepository_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageOfferInterestRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, []int64, entity.LoanPackageOfferInterestStatus) error) *MockLoanPackageOfferInterestRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanPackageOfferInterestRepository creates a new instance of MockLoanPackageOfferInterestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanPackageOfferInterestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanPackageOfferInterestRepository {
	mock := &MockLoanPackageOfferInterestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
