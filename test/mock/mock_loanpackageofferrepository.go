// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLoanPackageOfferRepository is an autogenerated mock type for the LoanPackageOfferRepository type
type MockLoanPackageOfferRepository struct {
	mock.Mock
}

type MockLoanPackageOfferRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanPackageOfferRepository) EXPECT() *MockLoanPackageOfferRepository_Expecter {
	return &MockLoanPackageOfferRepository_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function with given fields: ctx, loanPackageOffers
func (_m *MockLoanPackageOfferRepository) BulkCreate(ctx context.Context, loanPackageOffers []entity.LoanPackageOffer) ([]entity.LoanPackageOffer, error) {
	ret := _m.Called(ctx, loanPackageOffers)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 []entity.LoanPackageOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.LoanPackageOffer) ([]entity.LoanPackageOffer, error)); ok {
		return rf(ctx, loanPackageOffers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.LoanPackageOffer) []entity.LoanPackageOffer); ok {
		r0 = rf(ctx, loanPackageOffers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.LoanPackageOffer) error); ok {
		r1 = rf(ctx, loanPackageOffers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferRepository_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type MockLoanPackageOfferRepository_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageOffers []entity.LoanPackageOffer
func (_e *MockLoanPackageOfferRepository_Expecter) BulkCreate(ctx interface{}, loanPackageOffers interface{}) *MockLoanPackageOfferRepository_BulkCreate_Call {
	return &MockLoanPackageOfferRepository_BulkCreate_Call{Call: _e.mock.On("BulkCreate", ctx, loanPackageOffers)}
}

func (_c *MockLoanPackageOfferRepository_BulkCreate_Call) Run(run func(ctx context.Context, loanPackageOffers []entity.LoanPackageOffer)) *MockLoanPackageOfferRepository_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.LoanPackageOffer))
	})
	return _c
}

func (_c *MockLoanPackageOfferRepository_BulkCreate_Call) Return(_a0 []entity.LoanPackageOffer, _a1 error) *MockLoanPackageOfferRepository_BulkCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferRepository_BulkCreate_Call) RunAndReturn(run func(context.Context, []entity.LoanPackageOffer) ([]entity.LoanPackageOffer, error)) *MockLoanPackageOfferRepository_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, loanPackageOffer
func (_m *MockLoanPackageOfferRepository) Create(ctx context.Context, loanPackageOffer entity.LoanPackageOffer) (entity.LoanPackageOffer, error) {
	ret := _m.Called(ctx, loanPackageOffer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.LoanPackageOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOffer) (entity.LoanPackageOffer, error)); ok {
		return rf(ctx, loanPackageOffer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOffer) entity.LoanPackageOffer); ok {
		r0 = rf(ctx, loanPackageOffer)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageOffer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageOffer) error); ok {
		r1 = rf(ctx, loanPackageOffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLoanPackageOfferRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageOffer entity.LoanPackageOffer
func (_e *MockLoanPackageOfferRepository_Expecter) Create(ctx interface{}, loanPackageOffer interface{}) *MockLoanPackageOfferRepository_Create_Call {
	return &MockLoanPackageOfferRepository_Create_Call{Call: _e.mock.On("Create", ctx, loanPackageOffer)}
}

func (_c *MockLoanPackageOfferRepository_Create_Call) Run(run func(ctx context.Context, loanPackageOffer entity.LoanPackageOffer)) *MockLoanPackageOfferRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageOffer))
	})
	return _c
}

func (_c *MockLoanPackageOfferRepository_Create_Call) Return(_a0 entity.LoanPackageOffer, _a1 error) *MockLoanPackageOfferRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferRepository_Create_Call) RunAndReturn(run func(context.Context, entity.LoanPackageOffer) (entity.LoanPackageOffer, error)) *MockLoanPackageOfferRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllForInvestorWithRequestAndLine provides a mock function with given fields: ctx, filter
func (_m *MockLoanPackageOfferRepository) FindAllForInvestorWithRequestAndLine(ctx context.Context, filter entity.LoanPackageOfferFilter) ([]entity.LoanPackageOffer, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindAllForInvestorWithRequestAndLine")
	}

	var r0 []entity.LoanPackageOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOfferFilter) ([]entity.LoanPackageOffer, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageOfferFilter) []entity.LoanPackageOffer); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageOfferFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllForInvestorWithRequestAndLine'
type MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call struct {
	*mock.Call
}

// FindAllForInvestorWithRequestAndLine is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.LoanPackageOfferFilter
func (_e *MockLoanPackageOfferRepository_Expecter) FindAllForInvestorWithRequestAndLine(ctx interface{}, filter interface{}) *MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call {
	return &MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call{Call: _e.mock.On("FindAllForInvestorWithRequestAndLine", ctx, filter)}
}

func (_c *MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call) Run(run func(ctx context.Context, filter entity.LoanPackageOfferFilter)) *MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageOfferFilter))
	})
	return _c
}

func (_c *MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call) Return(_a0 []entity.LoanPackageOffer, _a1 error) *MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call) RunAndReturn(run func(context.Context, entity.LoanPackageOfferFilter) ([]entity.LoanPackageOffer, error)) *MockLoanPackageOfferRepository_FindAllForInvestorWithRequestAndLine_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIdWithRequest provides a mock function with given fields: ctx, id
func (_m *MockLoanPackageOfferRepository) FindByIdWithRequest(ctx context.Context, id int64) (entity.LoanPackageOffer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIdWithRequest")
	}

	var r0 entity.LoanPackageOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.LoanPackageOffer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.LoanPackageOffer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageOffer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferRepository_FindByIdWithRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIdWithRequest'
type MockLoanPackageOfferRepository_FindByIdWithRequest_Call struct {
	*mock.Call
}

// FindByIdWithRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLoanPackageOfferRepository_Expecter) FindByIdWithRequest(ctx interface{}, id interface{}) *MockLoanPackageOfferRepository_FindByIdWithRequest_Call {
	return &MockLoanPackageOfferRepository_FindByIdWithRequest_Call{Call: _e.mock.On("FindByIdWithRequest", ctx, id)}
}

func (_c *MockLoanPackageOfferRepository_FindByIdWithRequest_Call) Run(run func(ctx context.Context, id int64)) *MockLoanPackageOfferRepository_FindByIdWithRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoanPackageOfferRepository_FindByIdWithRequest_Call) Return(_a0 entity.LoanPackageOffer, _a1 error) *MockLoanPackageOfferRepository_FindByIdWithRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferRepository_FindByIdWithRequest_Call) RunAndReturn(run func(context.Context, int64) (entity.LoanPackageOffer, error)) *MockLoanPackageOfferRepository_FindByIdWithRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpiredOffers provides a mock function with given fields: ctx
func (_m *MockLoanPackageOfferRepository) GetExpiredOffers(ctx context.Context) ([]entity.LoanPackageOffer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetExpiredOffers")
	}

	var r0 []entity.LoanPackageOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.LoanPackageOffer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.LoanPackageOffer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageOffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferRepository_GetExpiredOffers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpiredOffers'
type MockLoanPackageOfferRepository_GetExpiredOffers_Call struct {
	*mock.Call
}

// GetExpiredOffers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoanPackageOfferRepository_Expecter) GetExpiredOffers(ctx interface{}) *MockLoanPackageOfferRepository_GetExpiredOffers_Call {
	return &MockLoanPackageOfferRepository_GetExpiredOffers_Call{Call: _e.mock.On("GetExpiredOffers", ctx)}
}

func (_c *MockLoanPackageOfferRepository_GetExpiredOffers_Call) Run(run func(ctx context.Context)) *MockLoanPackageOfferRepository_GetExpiredOffers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoanPackageOfferRepository_GetExpiredOffers_Call) Return(_a0 []entity.LoanPackageOffer, _a1 error) *MockLoanPackageOfferRepository_GetExpiredOffers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferRepository_GetExpiredOffers_Call) RunAndReturn(run func(context.Context) ([]entity.LoanPackageOffer, error)) *MockLoanPackageOfferRepository_GetExpiredOffers_Call {
	_c.Call.Return(run)
	return _c
}

// InvestorGetById provides a mock function with given fields: ctx, id
func (_m *MockLoanPackageOfferRepository) InvestorGetById(ctx context.Context, id int64) (entity.LoanPackageOffer, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for InvestorGetById")
	}

	var r0 entity.LoanPackageOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.LoanPackageOffer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.LoanPackageOffer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageOffer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageOfferRepository_InvestorGetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvestorGetById'
type MockLoanPackageOfferRepository_InvestorGetById_Call struct {
	*mock.Call
}

// InvestorGetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLoanPackageOfferRepository_Expecter) InvestorGetById(ctx interface{}, id interface{}) *MockLoanPackageOfferRepository_InvestorGetById_Call {
	return &MockLoanPackageOfferRepository_InvestorGetById_Call{Call: _e.mock.On("InvestorGetById", ctx, id)}
}

func (_c *MockLoanPackageOfferRepository_InvestorGetById_Call) Run(run func(ctx context.Context, id int64)) *MockLoanPackageOfferRepository_InvestorGetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoanPackageOfferRepository_InvestorGetById_Call) Return(_a0 entity.LoanPackageOffer, _a1 error) *MockLoanPackageOfferRepository_InvestorGetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageOfferRepository_InvestorGetById_Call) RunAndReturn(run func(context.Context, int64) (entity.LoanPackageOffer, error)) *MockLoanPackageOfferRepository_InvestorGetById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanPackageOfferRepository creates a new instance of MockLoanPackageOfferRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanPackageOfferRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanPackageOfferRepository {
	mock := &MockLoanPackageOfferRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
