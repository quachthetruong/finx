// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLoanPackageRequestEventRepository is an autogenerated mock type for the LoanPackageRequestEventRepository type
type MockLoanPackageRequestEventRepository struct {
	mock.Mock
}

type MockLoanPackageRequestEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanPackageRequestEventRepository) EXPECT() *MockLoanPackageRequestEventRepository_Expecter {
	return &MockLoanPackageRequestEventRepository_Expecter{mock: &_m.Mock}
}

// NotifyDerivativeOfflineConfirmation provides a mock function with given fields: ctx, data
func (_m *MockLoanPackageRequestEventRepository) NotifyDerivativeOfflineConfirmation(ctx context.Context, data entity.DerivativeRequestOfflineConfirmation) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyDerivativeOfflineConfirmation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.DerivativeRequestOfflineConfirmation) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyDerivativeOfflineConfirmation'
type MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call struct {
	*mock.Call
}

// NotifyDerivativeOfflineConfirmation is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.DerivativeRequestOfflineConfirmation
func (_e *MockLoanPackageRequestEventRepository_Expecter) NotifyDerivativeOfflineConfirmation(ctx interface{}, data interface{}) *MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call {
	return &MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call{Call: _e.mock.On("NotifyDerivativeOfflineConfirmation", ctx, data)}
}

func (_c *MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call) Run(run func(ctx context.Context, data entity.DerivativeRequestOfflineConfirmation)) *MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.DerivativeRequestOfflineConfirmation))
	})
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call) Return(_a0 error) *MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call) RunAndReturn(run func(context.Context, entity.DerivativeRequestOfflineConfirmation) error) *MockLoanPackageRequestEventRepository_NotifyDerivativeOfflineConfirmation_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyDerivativeRequestDeclined provides a mock function with given fields: ctx, data
func (_m *MockLoanPackageRequestEventRepository) NotifyDerivativeRequestDeclined(ctx context.Context, data entity.LoanPackageDerivativeRequestDeclinedNotify) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyDerivativeRequestDeclined")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageDerivativeRequestDeclinedNotify) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyDerivativeRequestDeclined'
type MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call struct {
	*mock.Call
}

// NotifyDerivativeRequestDeclined is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.LoanPackageDerivativeRequestDeclinedNotify
func (_e *MockLoanPackageRequestEventRepository_Expecter) NotifyDerivativeRequestDeclined(ctx interface{}, data interface{}) *MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call {
	return &MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call{Call: _e.mock.On("NotifyDerivativeRequestDeclined", ctx, data)}
}

func (_c *MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call) Run(run func(ctx context.Context, data entity.LoanPackageDerivativeRequestDeclinedNotify)) *MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageDerivativeRequestDeclinedNotify))
	})
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call) Return(_a0 error) *MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call) RunAndReturn(run func(context.Context, entity.LoanPackageDerivativeRequestDeclinedNotify) error) *MockLoanPackageRequestEventRepository_NotifyDerivativeRequestDeclined_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyOfflineConfirmation provides a mock function with given fields: ctx, data
func (_m *MockLoanPackageRequestEventRepository) NotifyOfflineConfirmation(ctx context.Context, data entity.RequestOfflineConfirmation) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyOfflineConfirmation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.RequestOfflineConfirmation) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyOfflineConfirmation'
type MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call struct {
	*mock.Call
}

// NotifyOfflineConfirmation is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.RequestOfflineConfirmation
func (_e *MockLoanPackageRequestEventRepository_Expecter) NotifyOfflineConfirmation(ctx interface{}, data interface{}) *MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call {
	return &MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call{Call: _e.mock.On("NotifyOfflineConfirmation", ctx, data)}
}

func (_c *MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call) Run(run func(ctx context.Context, data entity.RequestOfflineConfirmation)) *MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.RequestOfflineConfirmation))
	})
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call) Return(_a0 error) *MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call) RunAndReturn(run func(context.Context, entity.RequestOfflineConfirmation) error) *MockLoanPackageRequestEventRepository_NotifyOfflineConfirmation_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyOnlineConfirmation provides a mock function with given fields: ctx, data
func (_m *MockLoanPackageRequestEventRepository) NotifyOnlineConfirmation(ctx context.Context, data entity.RequestOnlineConfirmationNotify) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyOnlineConfirmation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.RequestOnlineConfirmationNotify) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyOnlineConfirmation'
type MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call struct {
	*mock.Call
}

// NotifyOnlineConfirmation is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.RequestOnlineConfirmationNotify
func (_e *MockLoanPackageRequestEventRepository_Expecter) NotifyOnlineConfirmation(ctx interface{}, data interface{}) *MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call {
	return &MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call{Call: _e.mock.On("NotifyOnlineConfirmation", ctx, data)}
}

func (_c *MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call) Run(run func(ctx context.Context, data entity.RequestOnlineConfirmationNotify)) *MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.RequestOnlineConfirmationNotify))
	})
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call) Return(_a0 error) *MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call) RunAndReturn(run func(context.Context, entity.RequestOnlineConfirmationNotify) error) *MockLoanPackageRequestEventRepository_NotifyOnlineConfirmation_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyRequestDeclined provides a mock function with given fields: ctx, data
func (_m *MockLoanPackageRequestEventRepository) NotifyRequestDeclined(ctx context.Context, data entity.LoanPackageRequestDeclinedNotify) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyRequestDeclined")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageRequestDeclinedNotify) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyRequestDeclined'
type MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call struct {
	*mock.Call
}

// NotifyRequestDeclined is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.LoanPackageRequestDeclinedNotify
func (_e *MockLoanPackageRequestEventRepository_Expecter) NotifyRequestDeclined(ctx interface{}, data interface{}) *MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call {
	return &MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call{Call: _e.mock.On("NotifyRequestDeclined", ctx, data)}
}

func (_c *MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call) Run(run func(ctx context.Context, data entity.LoanPackageRequestDeclinedNotify)) *MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageRequestDeclinedNotify))
	})
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call) Return(_a0 error) *MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call) RunAndReturn(run func(context.Context, entity.LoanPackageRequestDeclinedNotify) error) *MockLoanPackageRequestEventRepository_NotifyRequestDeclined_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanPackageRequestEventRepository creates a new instance of MockLoanPackageRequestEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanPackageRequestEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanPackageRequestEventRepository {
	mock := &MockLoanPackageRequestEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
