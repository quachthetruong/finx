// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	querymod "financing-offer/pkg/querymod"
)

// MockLoanPackageRequestRepository is an autogenerated mock type for the LoanPackageRequestRepository type
type MockLoanPackageRequestRepository struct {
	mock.Mock
}

type MockLoanPackageRequestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanPackageRequestRepository) EXPECT() *MockLoanPackageRequestRepository_Expecter {
	return &MockLoanPackageRequestRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, filter
func (_m *MockLoanPackageRequestRepository) Count(ctx context.Context, filter entity.LoanPackageFilter) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageFilter) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageFilter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockLoanPackageRequestRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.LoanPackageFilter
func (_e *MockLoanPackageRequestRepository_Expecter) Count(ctx interface{}, filter interface{}) *MockLoanPackageRequestRepository_Count_Call {
	return &MockLoanPackageRequestRepository_Count_Call{Call: _e.mock.On("Count", ctx, filter)}
}

func (_c *MockLoanPackageRequestRepository_Count_Call) Run(run func(ctx context.Context, filter entity.LoanPackageFilter)) *MockLoanPackageRequestRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageFilter))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_Count_Call) Return(_a0 int64, _a1 error) *MockLoanPackageRequestRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_Count_Call) RunAndReturn(run func(context.Context, entity.LoanPackageFilter) (int64, error)) *MockLoanPackageRequestRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, loanPackageRequest
func (_m *MockLoanPackageRequestRepository) Create(ctx context.Context, loanPackageRequest entity.LoanPackageRequest) (entity.LoanPackageRequest, error) {
	ret := _m.Called(ctx, loanPackageRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageRequest) (entity.LoanPackageRequest, error)); ok {
		return rf(ctx, loanPackageRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageRequest) entity.LoanPackageRequest); ok {
		r0 = rf(ctx, loanPackageRequest)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageRequest) error); ok {
		r1 = rf(ctx, loanPackageRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLoanPackageRequestRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageRequest entity.LoanPackageRequest
func (_e *MockLoanPackageRequestRepository_Expecter) Create(ctx interface{}, loanPackageRequest interface{}) *MockLoanPackageRequestRepository_Create_Call {
	return &MockLoanPackageRequestRepository_Create_Call{Call: _e.mock.On("Create", ctx, loanPackageRequest)}
}

func (_c *MockLoanPackageRequestRepository_Create_Call) Run(run func(ctx context.Context, loanPackageRequest entity.LoanPackageRequest)) *MockLoanPackageRequestRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageRequest))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_Create_Call) Return(_a0 entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_Create_Call) RunAndReturn(run func(context.Context, entity.LoanPackageRequest) (entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockLoanPackageRequestRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPackageRequestRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLoanPackageRequestRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLoanPackageRequestRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockLoanPackageRequestRepository_Delete_Call {
	return &MockLoanPackageRequestRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockLoanPackageRequestRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockLoanPackageRequestRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_Delete_Call) Return(_a0 error) *MockLoanPackageRequestRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPackageRequestRepository_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockLoanPackageRequestRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, filter
func (_m *MockLoanPackageRequestRepository) GetAll(ctx context.Context, filter entity.LoanPackageFilter) ([]entity.LoanPackageRequest, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageFilter) ([]entity.LoanPackageRequest, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageFilter) []entity.LoanPackageRequest); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockLoanPackageRequestRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.LoanPackageFilter
func (_e *MockLoanPackageRequestRepository_Expecter) GetAll(ctx interface{}, filter interface{}) *MockLoanPackageRequestRepository_GetAll_Call {
	return &MockLoanPackageRequestRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, filter)}
}

func (_c *MockLoanPackageRequestRepository_GetAll_Call) Run(run func(ctx context.Context, filter entity.LoanPackageFilter)) *MockLoanPackageRequestRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageFilter))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_GetAll_Call) Return(_a0 []entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_GetAll_Call) RunAndReturn(run func(context.Context, entity.LoanPackageFilter) ([]entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUnderlyingRequests provides a mock function with given fields: ctx, filter
func (_m *MockLoanPackageRequestRepository) GetAllUnderlyingRequests(ctx context.Context, filter entity.UnderlyingLoanPackageFilter) ([]entity.UnderlyingLoanPackageRequest, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUnderlyingRequests")
	}

	var r0 []entity.UnderlyingLoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UnderlyingLoanPackageFilter) ([]entity.UnderlyingLoanPackageRequest, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.UnderlyingLoanPackageFilter) []entity.UnderlyingLoanPackageRequest); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.UnderlyingLoanPackageRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.UnderlyingLoanPackageFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUnderlyingRequests'
type MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call struct {
	*mock.Call
}

// GetAllUnderlyingRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.UnderlyingLoanPackageFilter
func (_e *MockLoanPackageRequestRepository_Expecter) GetAllUnderlyingRequests(ctx interface{}, filter interface{}) *MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call {
	return &MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call{Call: _e.mock.On("GetAllUnderlyingRequests", ctx, filter)}
}

func (_c *MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call) Run(run func(ctx context.Context, filter entity.UnderlyingLoanPackageFilter)) *MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UnderlyingLoanPackageFilter))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call) Return(_a0 []entity.UnderlyingLoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call) RunAndReturn(run func(context.Context, entity.UnderlyingLoanPackageFilter) ([]entity.UnderlyingLoanPackageRequest, error)) *MockLoanPackageRequestRepository_GetAllUnderlyingRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id, filter, opts
func (_m *MockLoanPackageRequestRepository) GetById(ctx context.Context, id int64, filter entity.LoanPackageFilter, opts ...querymod.GetOption) (entity.LoanPackageRequest, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.LoanPackageFilter, ...querymod.GetOption) (entity.LoanPackageRequest, error)); ok {
		return rf(ctx, id, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.LoanPackageFilter, ...querymod.GetOption) entity.LoanPackageRequest); ok {
		r0 = rf(ctx, id, filter, opts...)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, entity.LoanPackageFilter, ...querymod.GetOption) error); ok {
		r1 = rf(ctx, id, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockLoanPackageRequestRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - filter entity.LoanPackageFilter
//   - opts ...querymod.GetOption
func (_e *MockLoanPackageRequestRepository_Expecter) GetById(ctx interface{}, id interface{}, filter interface{}, opts ...interface{}) *MockLoanPackageRequestRepository_GetById_Call {
	return &MockLoanPackageRequestRepository_GetById_Call{Call: _e.mock.On("GetById",
		append([]interface{}{ctx, id, filter}, opts...)...)}
}

func (_c *MockLoanPackageRequestRepository_GetById_Call) Run(run func(ctx context.Context, id int64, filter entity.LoanPackageFilter, opts ...querymod.GetOption)) *MockLoanPackageRequestRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]querymod.GetOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(querymod.GetOption)
			}
		}
		run(args[0].(context.Context), args[1].(int64), args[2].(entity.LoanPackageFilter), variadicArgs...)
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_GetById_Call) Return(_a0 entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_GetById_Call) RunAndReturn(run func(context.Context, int64, entity.LoanPackageFilter, ...querymod.GetOption) (entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// LockAllPendingRequestByMaxPercent provides a mock function with given fields: ctx, maximumLoanRate
func (_m *MockLoanPackageRequestRepository) LockAllPendingRequestByMaxPercent(ctx context.Context, maximumLoanRate decimal.Decimal) ([]entity.LoanPackageRequest, error) {
	ret := _m.Called(ctx, maximumLoanRate)

	if len(ret) == 0 {
		panic("no return value specified for LockAllPendingRequestByMaxPercent")
	}

	var r0 []entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, decimal.Decimal) ([]entity.LoanPackageRequest, error)); ok {
		return rf(ctx, maximumLoanRate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, decimal.Decimal) []entity.LoanPackageRequest); ok {
		r0 = rf(ctx, maximumLoanRate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, decimal.Decimal) error); ok {
		r1 = rf(ctx, maximumLoanRate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockAllPendingRequestByMaxPercent'
type MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call struct {
	*mock.Call
}

// LockAllPendingRequestByMaxPercent is a helper method to define mock.On call
//   - ctx context.Context
//   - maximumLoanRate decimal.Decimal
func (_e *MockLoanPackageRequestRepository_Expecter) LockAllPendingRequestByMaxPercent(ctx interface{}, maximumLoanRate interface{}) *MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call {
	return &MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call{Call: _e.mock.On("LockAllPendingRequestByMaxPercent", ctx, maximumLoanRate)}
}

func (_c *MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call) Run(run func(ctx context.Context, maximumLoanRate decimal.Decimal)) *MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(decimal.Decimal))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call) Return(_a0 []entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call) RunAndReturn(run func(context.Context, decimal.Decimal) ([]entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_LockAllPendingRequestByMaxPercent_Call {
	_c.Call.Return(run)
	return _c
}

// LockAndReturnAllPendingRequestBySymbolId provides a mock function with given fields: ctx, symbolId
func (_m *MockLoanPackageRequestRepository) LockAndReturnAllPendingRequestBySymbolId(ctx context.Context, symbolId int64) ([]entity.LoanPackageRequest, error) {
	ret := _m.Called(ctx, symbolId)

	if len(ret) == 0 {
		panic("no return value specified for LockAndReturnAllPendingRequestBySymbolId")
	}

	var r0 []entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.LoanPackageRequest, error)); ok {
		return rf(ctx, symbolId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.LoanPackageRequest); ok {
		r0 = rf(ctx, symbolId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, symbolId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockAndReturnAllPendingRequestBySymbolId'
type MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call struct {
	*mock.Call
}

// LockAndReturnAllPendingRequestBySymbolId is a helper method to define mock.On call
//   - ctx context.Context
//   - symbolId int64
func (_e *MockLoanPackageRequestRepository_Expecter) LockAndReturnAllPendingRequestBySymbolId(ctx interface{}, symbolId interface{}) *MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call {
	return &MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call{Call: _e.mock.On("LockAndReturnAllPendingRequestBySymbolId", ctx, symbolId)}
}

func (_c *MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call) Run(run func(ctx context.Context, symbolId int64)) *MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call) Return(_a0 []entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call) RunAndReturn(run func(context.Context, int64) ([]entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_LockAndReturnAllPendingRequestBySymbolId_Call {
	_c.Call.Return(run)
	return _c
}

// SaveLoggedRequest provides a mock function with given fields: ctx, request
func (_m *MockLoanPackageRequestRepository) SaveLoggedRequest(ctx context.Context, request entity.LoggedRequest) (entity.LoggedRequest, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SaveLoggedRequest")
	}

	var r0 entity.LoggedRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoggedRequest) (entity.LoggedRequest, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoggedRequest) entity.LoggedRequest); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(entity.LoggedRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoggedRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_SaveLoggedRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveLoggedRequest'
type MockLoanPackageRequestRepository_SaveLoggedRequest_Call struct {
	*mock.Call
}

// SaveLoggedRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request entity.LoggedRequest
func (_e *MockLoanPackageRequestRepository_Expecter) SaveLoggedRequest(ctx interface{}, request interface{}) *MockLoanPackageRequestRepository_SaveLoggedRequest_Call {
	return &MockLoanPackageRequestRepository_SaveLoggedRequest_Call{Call: _e.mock.On("SaveLoggedRequest", ctx, request)}
}

func (_c *MockLoanPackageRequestRepository_SaveLoggedRequest_Call) Run(run func(ctx context.Context, request entity.LoggedRequest)) *MockLoanPackageRequestRepository_SaveLoggedRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoggedRequest))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_SaveLoggedRequest_Call) Return(_a0 entity.LoggedRequest, _a1 error) *MockLoanPackageRequestRepository_SaveLoggedRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_SaveLoggedRequest_Call) RunAndReturn(run func(context.Context, entity.LoggedRequest) (entity.LoggedRequest, error)) *MockLoanPackageRequestRepository_SaveLoggedRequest_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, loanPackageRequest
func (_m *MockLoanPackageRequestRepository) Update(ctx context.Context, loanPackageRequest entity.LoanPackageRequest) (entity.LoanPackageRequest, error) {
	ret := _m.Called(ctx, loanPackageRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageRequest) (entity.LoanPackageRequest, error)); ok {
		return rf(ctx, loanPackageRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPackageRequest) entity.LoanPackageRequest); ok {
		r0 = rf(ctx, loanPackageRequest)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPackageRequest) error); ok {
		r1 = rf(ctx, loanPackageRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLoanPackageRequestRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - loanPackageRequest entity.LoanPackageRequest
func (_e *MockLoanPackageRequestRepository_Expecter) Update(ctx interface{}, loanPackageRequest interface{}) *MockLoanPackageRequestRepository_Update_Call {
	return &MockLoanPackageRequestRepository_Update_Call{Call: _e.mock.On("Update", ctx, loanPackageRequest)}
}

func (_c *MockLoanPackageRequestRepository_Update_Call) Run(run func(ctx context.Context, loanPackageRequest entity.LoanPackageRequest)) *MockLoanPackageRequestRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPackageRequest))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_Update_Call) Return(_a0 entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_Update_Call) RunAndReturn(run func(context.Context, entity.LoanPackageRequest) (entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusById provides a mock function with given fields: ctx, id, status
func (_m *MockLoanPackageRequestRepository) UpdateStatusById(ctx context.Context, id int64, status entity.LoanPackageRequestStatus) (entity.LoanPackageRequest, error) {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusById")
	}

	var r0 entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.LoanPackageRequestStatus) (entity.LoanPackageRequest, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.LoanPackageRequestStatus) entity.LoanPackageRequest); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Get(0).(entity.LoanPackageRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, entity.LoanPackageRequestStatus) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_UpdateStatusById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusById'
type MockLoanPackageRequestRepository_UpdateStatusById_Call struct {
	*mock.Call
}

// UpdateStatusById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - status entity.LoanPackageRequestStatus
func (_e *MockLoanPackageRequestRepository_Expecter) UpdateStatusById(ctx interface{}, id interface{}, status interface{}) *MockLoanPackageRequestRepository_UpdateStatusById_Call {
	return &MockLoanPackageRequestRepository_UpdateStatusById_Call{Call: _e.mock.On("UpdateStatusById", ctx, id, status)}
}

func (_c *MockLoanPackageRequestRepository_UpdateStatusById_Call) Run(run func(ctx context.Context, id int64, status entity.LoanPackageRequestStatus)) *MockLoanPackageRequestRepository_UpdateStatusById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(entity.LoanPackageRequestStatus))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_UpdateStatusById_Call) Return(_a0 entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_UpdateStatusById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_UpdateStatusById_Call) RunAndReturn(run func(context.Context, int64, entity.LoanPackageRequestStatus) (entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_UpdateStatusById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusByLoanRequestIds provides a mock function with given fields: ctx, loanRequestIds, status
func (_m *MockLoanPackageRequestRepository) UpdateStatusByLoanRequestIds(ctx context.Context, loanRequestIds []int64, status entity.LoanPackageRequestStatus) ([]entity.LoanPackageRequest, error) {
	ret := _m.Called(ctx, loanRequestIds, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusByLoanRequestIds")
	}

	var r0 []entity.LoanPackageRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64, entity.LoanPackageRequestStatus) ([]entity.LoanPackageRequest, error)); ok {
		return rf(ctx, loanRequestIds, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64, entity.LoanPackageRequestStatus) []entity.LoanPackageRequest); ok {
		r0 = rf(ctx, loanRequestIds, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPackageRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64, entity.LoanPackageRequestStatus) error); ok {
		r1 = rf(ctx, loanRequestIds, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusByLoanRequestIds'
type MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call struct {
	*mock.Call
}

// UpdateStatusByLoanRequestIds is a helper method to define mock.On call
//   - ctx context.Context
//   - loanRequestIds []int64
//   - status entity.LoanPackageRequestStatus
func (_e *MockLoanPackageRequestRepository_Expecter) UpdateStatusByLoanRequestIds(ctx interface{}, loanRequestIds interface{}, status interface{}) *MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call {
	return &MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call{Call: _e.mock.On("UpdateStatusByLoanRequestIds", ctx, loanRequestIds, status)}
}

func (_c *MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call) Run(run func(ctx context.Context, loanRequestIds []int64, status entity.LoanPackageRequestStatus)) *MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64), args[2].(entity.LoanPackageRequestStatus))
	})
	return _c
}

func (_c *MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call) Return(_a0 []entity.LoanPackageRequest, _a1 error) *MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call) RunAndReturn(run func(context.Context, []int64, entity.LoanPackageRequestStatus) ([]entity.LoanPackageRequest, error)) *MockLoanPackageRequestRepository_UpdateStatusByLoanRequestIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanPackageRequestRepository creates a new instance of MockLoanPackageRequestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanPackageRequestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanPackageRequestRepository {
	mock := &MockLoanPackageRequestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
