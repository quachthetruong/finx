// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLoanPolicyTemplateRepository is an autogenerated mock type for the LoanPolicyTemplateRepository type
type MockLoanPolicyTemplateRepository struct {
	mock.Mock
}

type MockLoanPolicyTemplateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanPolicyTemplateRepository) EXPECT() *MockLoanPolicyTemplateRepository_Expecter {
	return &MockLoanPolicyTemplateRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, template
func (_m *MockLoanPolicyTemplateRepository) Create(ctx context.Context, template entity.LoanPolicyTemplate) (entity.LoanPolicyTemplate, error) {
	ret := _m.Called(ctx, template)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.LoanPolicyTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPolicyTemplate) (entity.LoanPolicyTemplate, error)); ok {
		return rf(ctx, template)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPolicyTemplate) entity.LoanPolicyTemplate); ok {
		r0 = rf(ctx, template)
	} else {
		r0 = ret.Get(0).(entity.LoanPolicyTemplate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPolicyTemplate) error); ok {
		r1 = rf(ctx, template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPolicyTemplateRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLoanPolicyTemplateRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - template entity.LoanPolicyTemplate
func (_e *MockLoanPolicyTemplateRepository_Expecter) Create(ctx interface{}, template interface{}) *MockLoanPolicyTemplateRepository_Create_Call {
	return &MockLoanPolicyTemplateRepository_Create_Call{Call: _e.mock.On("Create", ctx, template)}
}

func (_c *MockLoanPolicyTemplateRepository_Create_Call) Run(run func(ctx context.Context, template entity.LoanPolicyTemplate)) *MockLoanPolicyTemplateRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPolicyTemplate))
	})
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_Create_Call) Return(_a0 entity.LoanPolicyTemplate, _a1 error) *MockLoanPolicyTemplateRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_Create_Call) RunAndReturn(run func(context.Context, entity.LoanPolicyTemplate) (entity.LoanPolicyTemplate, error)) *MockLoanPolicyTemplateRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockLoanPolicyTemplateRepository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLoanPolicyTemplateRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLoanPolicyTemplateRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLoanPolicyTemplateRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockLoanPolicyTemplateRepository_Delete_Call {
	return &MockLoanPolicyTemplateRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockLoanPolicyTemplateRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockLoanPolicyTemplateRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_Delete_Call) Return(_a0 error) *MockLoanPolicyTemplateRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockLoanPolicyTemplateRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockLoanPolicyTemplateRepository) GetAll(ctx context.Context) ([]entity.LoanPolicyTemplate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.LoanPolicyTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.LoanPolicyTemplate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.LoanPolicyTemplate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPolicyTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPolicyTemplateRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockLoanPolicyTemplateRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoanPolicyTemplateRepository_Expecter) GetAll(ctx interface{}) *MockLoanPolicyTemplateRepository_GetAll_Call {
	return &MockLoanPolicyTemplateRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockLoanPolicyTemplateRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockLoanPolicyTemplateRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_GetAll_Call) Return(_a0 []entity.LoanPolicyTemplate, _a1 error) *MockLoanPolicyTemplateRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]entity.LoanPolicyTemplate, error)) *MockLoanPolicyTemplateRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockLoanPolicyTemplateRepository) GetById(ctx context.Context, id int64) (entity.LoanPolicyTemplate, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.LoanPolicyTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.LoanPolicyTemplate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.LoanPolicyTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.LoanPolicyTemplate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPolicyTemplateRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockLoanPolicyTemplateRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLoanPolicyTemplateRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockLoanPolicyTemplateRepository_GetById_Call {
	return &MockLoanPolicyTemplateRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockLoanPolicyTemplateRepository_GetById_Call) Run(run func(ctx context.Context, id int64)) *MockLoanPolicyTemplateRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_GetById_Call) Return(_a0 entity.LoanPolicyTemplate, _a1 error) *MockLoanPolicyTemplateRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_GetById_Call) RunAndReturn(run func(context.Context, int64) (entity.LoanPolicyTemplate, error)) *MockLoanPolicyTemplateRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIds provides a mock function with given fields: ctx, ids
func (_m *MockLoanPolicyTemplateRepository) GetByIds(ctx context.Context, ids []int64) ([]entity.LoanPolicyTemplate, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetByIds")
	}

	var r0 []entity.LoanPolicyTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]entity.LoanPolicyTemplate, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.LoanPolicyTemplate); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanPolicyTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPolicyTemplateRepository_GetByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIds'
type MockLoanPolicyTemplateRepository_GetByIds_Call struct {
	*mock.Call
}

// GetByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
func (_e *MockLoanPolicyTemplateRepository_Expecter) GetByIds(ctx interface{}, ids interface{}) *MockLoanPolicyTemplateRepository_GetByIds_Call {
	return &MockLoanPolicyTemplateRepository_GetByIds_Call{Call: _e.mock.On("GetByIds", ctx, ids)}
}

func (_c *MockLoanPolicyTemplateRepository_GetByIds_Call) Run(run func(ctx context.Context, ids []int64)) *MockLoanPolicyTemplateRepository_GetByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_GetByIds_Call) Return(_a0 []entity.LoanPolicyTemplate, _a1 error) *MockLoanPolicyTemplateRepository_GetByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_GetByIds_Call) RunAndReturn(run func(context.Context, []int64) ([]entity.LoanPolicyTemplate, error)) *MockLoanPolicyTemplateRepository_GetByIds_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, template
func (_m *MockLoanPolicyTemplateRepository) Update(ctx context.Context, template entity.LoanPolicyTemplate) (entity.LoanPolicyTemplate, error) {
	ret := _m.Called(ctx, template)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.LoanPolicyTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPolicyTemplate) (entity.LoanPolicyTemplate, error)); ok {
		return rf(ctx, template)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanPolicyTemplate) entity.LoanPolicyTemplate); ok {
		r0 = rf(ctx, template)
	} else {
		r0 = ret.Get(0).(entity.LoanPolicyTemplate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanPolicyTemplate) error); ok {
		r1 = rf(ctx, template)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanPolicyTemplateRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLoanPolicyTemplateRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - template entity.LoanPolicyTemplate
func (_e *MockLoanPolicyTemplateRepository_Expecter) Update(ctx interface{}, template interface{}) *MockLoanPolicyTemplateRepository_Update_Call {
	return &MockLoanPolicyTemplateRepository_Update_Call{Call: _e.mock.On("Update", ctx, template)}
}

func (_c *MockLoanPolicyTemplateRepository_Update_Call) Run(run func(ctx context.Context, template entity.LoanPolicyTemplate)) *MockLoanPolicyTemplateRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanPolicyTemplate))
	})
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_Update_Call) Return(_a0 entity.LoanPolicyTemplate, _a1 error) *MockLoanPolicyTemplateRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanPolicyTemplateRepository_Update_Call) RunAndReturn(run func(context.Context, entity.LoanPolicyTemplate) (entity.LoanPolicyTemplate, error)) *MockLoanPolicyTemplateRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanPolicyTemplateRepository creates a new instance of MockLoanPolicyTemplateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanPolicyTemplateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanPolicyTemplateRepository {
	mock := &MockLoanPolicyTemplateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
