// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockLoanRequestSchedulerConfigRepository is an autogenerated mock type for the LoanRequestSchedulerConfigRepository type
type MockLoanRequestSchedulerConfigRepository struct {
	mock.Mock
}

type MockLoanRequestSchedulerConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoanRequestSchedulerConfigRepository) EXPECT() *MockLoanRequestSchedulerConfigRepository_Expecter {
	return &MockLoanRequestSchedulerConfigRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, config
func (_m *MockLoanRequestSchedulerConfigRepository) Create(ctx context.Context, config entity.LoanRequestSchedulerConfig) (entity.LoanRequestSchedulerConfig, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.LoanRequestSchedulerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanRequestSchedulerConfig) (entity.LoanRequestSchedulerConfig, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoanRequestSchedulerConfig) entity.LoanRequestSchedulerConfig); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Get(0).(entity.LoanRequestSchedulerConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LoanRequestSchedulerConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanRequestSchedulerConfigRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLoanRequestSchedulerConfigRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - config entity.LoanRequestSchedulerConfig
func (_e *MockLoanRequestSchedulerConfigRepository_Expecter) Create(ctx interface{}, config interface{}) *MockLoanRequestSchedulerConfigRepository_Create_Call {
	return &MockLoanRequestSchedulerConfigRepository_Create_Call{Call: _e.mock.On("Create", ctx, config)}
}

func (_c *MockLoanRequestSchedulerConfigRepository_Create_Call) Run(run func(ctx context.Context, config entity.LoanRequestSchedulerConfig)) *MockLoanRequestSchedulerConfigRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LoanRequestSchedulerConfig))
	})
	return _c
}

func (_c *MockLoanRequestSchedulerConfigRepository_Create_Call) Return(_a0 entity.LoanRequestSchedulerConfig, _a1 error) *MockLoanRequestSchedulerConfigRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanRequestSchedulerConfigRepository_Create_Call) RunAndReturn(run func(context.Context, entity.LoanRequestSchedulerConfig) (entity.LoanRequestSchedulerConfig, error)) *MockLoanRequestSchedulerConfigRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockLoanRequestSchedulerConfigRepository) GetAll(ctx context.Context) ([]entity.LoanRequestSchedulerConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.LoanRequestSchedulerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.LoanRequestSchedulerConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.LoanRequestSchedulerConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.LoanRequestSchedulerConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanRequestSchedulerConfigRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockLoanRequestSchedulerConfigRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoanRequestSchedulerConfigRepository_Expecter) GetAll(ctx interface{}) *MockLoanRequestSchedulerConfigRepository_GetAll_Call {
	return &MockLoanRequestSchedulerConfigRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockLoanRequestSchedulerConfigRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockLoanRequestSchedulerConfigRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoanRequestSchedulerConfigRepository_GetAll_Call) Return(_a0 []entity.LoanRequestSchedulerConfig, _a1 error) *MockLoanRequestSchedulerConfigRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanRequestSchedulerConfigRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]entity.LoanRequestSchedulerConfig, error)) *MockLoanRequestSchedulerConfigRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentConfig provides a mock function with given fields: ctx
func (_m *MockLoanRequestSchedulerConfigRepository) GetCurrentConfig(ctx context.Context) (entity.LoanRequestSchedulerConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentConfig")
	}

	var r0 entity.LoanRequestSchedulerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.LoanRequestSchedulerConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.LoanRequestSchedulerConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entity.LoanRequestSchedulerConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentConfig'
type MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call struct {
	*mock.Call
}

// GetCurrentConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLoanRequestSchedulerConfigRepository_Expecter) GetCurrentConfig(ctx interface{}) *MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call {
	return &MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call{Call: _e.mock.On("GetCurrentConfig", ctx)}
}

func (_c *MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call) Run(run func(ctx context.Context)) *MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call) Return(_a0 entity.LoanRequestSchedulerConfig, _a1 error) *MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call) RunAndReturn(run func(context.Context) (entity.LoanRequestSchedulerConfig, error)) *MockLoanRequestSchedulerConfigRepository_GetCurrentConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoanRequestSchedulerConfigRepository creates a new instance of MockLoanRequestSchedulerConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoanRequestSchedulerConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoanRequestSchedulerConfigRepository {
	mock := &MockLoanRequestSchedulerConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
