// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockMarginOperationRepository is an autogenerated mock type for the MarginOperationRepository type
type MockMarginOperationRepository struct {
	mock.Mock
}

type MockMarginOperationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMarginOperationRepository) EXPECT() *MockMarginOperationRepository_Expecter {
	return &MockMarginOperationRepository_Expecter{mock: &_m.Mock}
}

// GetMarginPoolById provides a mock function with given fields: ctx, marginPoolId
func (_m *MockMarginOperationRepository) GetMarginPoolById(ctx context.Context, marginPoolId int64) (entity.MarginPool, error) {
	ret := _m.Called(ctx, marginPoolId)

	if len(ret) == 0 {
		panic("no return value specified for GetMarginPoolById")
	}

	var r0 entity.MarginPool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.MarginPool, error)); ok {
		return rf(ctx, marginPoolId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.MarginPool); ok {
		r0 = rf(ctx, marginPoolId)
	} else {
		r0 = ret.Get(0).(entity.MarginPool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, marginPoolId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarginOperationRepository_GetMarginPoolById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarginPoolById'
type MockMarginOperationRepository_GetMarginPoolById_Call struct {
	*mock.Call
}

// GetMarginPoolById is a helper method to define mock.On call
//   - ctx context.Context
//   - marginPoolId int64
func (_e *MockMarginOperationRepository_Expecter) GetMarginPoolById(ctx interface{}, marginPoolId interface{}) *MockMarginOperationRepository_GetMarginPoolById_Call {
	return &MockMarginOperationRepository_GetMarginPoolById_Call{Call: _e.mock.On("GetMarginPoolById", ctx, marginPoolId)}
}

func (_c *MockMarginOperationRepository_GetMarginPoolById_Call) Run(run func(ctx context.Context, marginPoolId int64)) *MockMarginOperationRepository_GetMarginPoolById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMarginOperationRepository_GetMarginPoolById_Call) Return(_a0 entity.MarginPool, _a1 error) *MockMarginOperationRepository_GetMarginPoolById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarginOperationRepository_GetMarginPoolById_Call) RunAndReturn(run func(context.Context, int64) (entity.MarginPool, error)) *MockMarginOperationRepository_GetMarginPoolById_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarginPoolGroupsByIds provides a mock function with given fields: ctx, marginPoolGroupIds
func (_m *MockMarginOperationRepository) GetMarginPoolGroupsByIds(ctx context.Context, marginPoolGroupIds []int64) ([]entity.MarginPoolGroup, error) {
	ret := _m.Called(ctx, marginPoolGroupIds)

	if len(ret) == 0 {
		panic("no return value specified for GetMarginPoolGroupsByIds")
	}

	var r0 []entity.MarginPoolGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]entity.MarginPoolGroup, error)); ok {
		return rf(ctx, marginPoolGroupIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.MarginPoolGroup); ok {
		r0 = rf(ctx, marginPoolGroupIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MarginPoolGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, marginPoolGroupIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarginPoolGroupsByIds'
type MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call struct {
	*mock.Call
}

// GetMarginPoolGroupsByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - marginPoolGroupIds []int64
func (_e *MockMarginOperationRepository_Expecter) GetMarginPoolGroupsByIds(ctx interface{}, marginPoolGroupIds interface{}) *MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call {
	return &MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call{Call: _e.mock.On("GetMarginPoolGroupsByIds", ctx, marginPoolGroupIds)}
}

func (_c *MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call) Run(run func(ctx context.Context, marginPoolGroupIds []int64)) *MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call) Return(_a0 []entity.MarginPoolGroup, _a1 error) *MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call) RunAndReturn(run func(context.Context, []int64) ([]entity.MarginPoolGroup, error)) *MockMarginOperationRepository_GetMarginPoolGroupsByIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarginPoolsByIds provides a mock function with given fields: ctx, marginPoolIds
func (_m *MockMarginOperationRepository) GetMarginPoolsByIds(ctx context.Context, marginPoolIds []int64) ([]entity.MarginPool, error) {
	ret := _m.Called(ctx, marginPoolIds)

	if len(ret) == 0 {
		panic("no return value specified for GetMarginPoolsByIds")
	}

	var r0 []entity.MarginPool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]entity.MarginPool, error)); ok {
		return rf(ctx, marginPoolIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []entity.MarginPool); ok {
		r0 = rf(ctx, marginPoolIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MarginPool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, marginPoolIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMarginOperationRepository_GetMarginPoolsByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarginPoolsByIds'
type MockMarginOperationRepository_GetMarginPoolsByIds_Call struct {
	*mock.Call
}

// GetMarginPoolsByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - marginPoolIds []int64
func (_e *MockMarginOperationRepository_Expecter) GetMarginPoolsByIds(ctx interface{}, marginPoolIds interface{}) *MockMarginOperationRepository_GetMarginPoolsByIds_Call {
	return &MockMarginOperationRepository_GetMarginPoolsByIds_Call{Call: _e.mock.On("GetMarginPoolsByIds", ctx, marginPoolIds)}
}

func (_c *MockMarginOperationRepository_GetMarginPoolsByIds_Call) Run(run func(ctx context.Context, marginPoolIds []int64)) *MockMarginOperationRepository_GetMarginPoolsByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockMarginOperationRepository_GetMarginPoolsByIds_Call) Return(_a0 []entity.MarginPool, _a1 error) *MockMarginOperationRepository_GetMarginPoolsByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMarginOperationRepository_GetMarginPoolsByIds_Call) RunAndReturn(run func(context.Context, []int64) ([]entity.MarginPool, error)) *MockMarginOperationRepository_GetMarginPoolsByIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMarginOperationRepository creates a new instance of MockMarginOperationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMarginOperationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMarginOperationRepository {
	mock := &MockMarginOperationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
