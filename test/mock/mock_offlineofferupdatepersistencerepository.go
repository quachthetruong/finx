// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockOfflineOfferUpdatePersistenceRepository is an autogenerated mock type for the OfflineOfferUpdatePersistenceRepository type
type MockOfflineOfferUpdatePersistenceRepository struct {
	mock.Mock
}

type MockOfflineOfferUpdatePersistenceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOfflineOfferUpdatePersistenceRepository) EXPECT() *MockOfflineOfferUpdatePersistenceRepository_Expecter {
	return &MockOfflineOfferUpdatePersistenceRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, offlineOfferUpdate
func (_m *MockOfflineOfferUpdatePersistenceRepository) Create(ctx context.Context, offlineOfferUpdate entity.OfflineOfferUpdate) (entity.OfflineOfferUpdate, error) {
	ret := _m.Called(ctx, offlineOfferUpdate)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.OfflineOfferUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.OfflineOfferUpdate) (entity.OfflineOfferUpdate, error)); ok {
		return rf(ctx, offlineOfferUpdate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.OfflineOfferUpdate) entity.OfflineOfferUpdate); ok {
		r0 = rf(ctx, offlineOfferUpdate)
	} else {
		r0 = ret.Get(0).(entity.OfflineOfferUpdate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.OfflineOfferUpdate) error); ok {
		r1 = rf(ctx, offlineOfferUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOfflineOfferUpdatePersistenceRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOfflineOfferUpdatePersistenceRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - offlineOfferUpdate entity.OfflineOfferUpdate
func (_e *MockOfflineOfferUpdatePersistenceRepository_Expecter) Create(ctx interface{}, offlineOfferUpdate interface{}) *MockOfflineOfferUpdatePersistenceRepository_Create_Call {
	return &MockOfflineOfferUpdatePersistenceRepository_Create_Call{Call: _e.mock.On("Create", ctx, offlineOfferUpdate)}
}

func (_c *MockOfflineOfferUpdatePersistenceRepository_Create_Call) Run(run func(ctx context.Context, offlineOfferUpdate entity.OfflineOfferUpdate)) *MockOfflineOfferUpdatePersistenceRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.OfflineOfferUpdate))
	})
	return _c
}

func (_c *MockOfflineOfferUpdatePersistenceRepository_Create_Call) Return(_a0 entity.OfflineOfferUpdate, _a1 error) *MockOfflineOfferUpdatePersistenceRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOfflineOfferUpdatePersistenceRepository_Create_Call) RunAndReturn(run func(context.Context, entity.OfflineOfferUpdate) (entity.OfflineOfferUpdate, error)) *MockOfflineOfferUpdatePersistenceRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByOfferId provides a mock function with given fields: ctx, offerId, assetType
func (_m *MockOfflineOfferUpdatePersistenceRepository) GetByOfferId(ctx context.Context, offerId int64, assetType entity.AssetType) ([]entity.OfflineOfferUpdate, error) {
	ret := _m.Called(ctx, offerId, assetType)

	if len(ret) == 0 {
		panic("no return value specified for GetByOfferId")
	}

	var r0 []entity.OfflineOfferUpdate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.AssetType) ([]entity.OfflineOfferUpdate, error)); ok {
		return rf(ctx, offerId, assetType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.AssetType) []entity.OfflineOfferUpdate); ok {
		r0 = rf(ctx, offerId, assetType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.OfflineOfferUpdate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, entity.AssetType) error); ok {
		r1 = rf(ctx, offerId, assetType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByOfferId'
type MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call struct {
	*mock.Call
}

// GetByOfferId is a helper method to define mock.On call
//   - ctx context.Context
//   - offerId int64
//   - assetType entity.AssetType
func (_e *MockOfflineOfferUpdatePersistenceRepository_Expecter) GetByOfferId(ctx interface{}, offerId interface{}, assetType interface{}) *MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call {
	return &MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call{Call: _e.mock.On("GetByOfferId", ctx, offerId, assetType)}
}

func (_c *MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call) Run(run func(ctx context.Context, offerId int64, assetType entity.AssetType)) *MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(entity.AssetType))
	})
	return _c
}

func (_c *MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call) Return(_a0 []entity.OfflineOfferUpdate, _a1 error) *MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call) RunAndReturn(run func(context.Context, int64, entity.AssetType) ([]entity.OfflineOfferUpdate, error)) *MockOfflineOfferUpdatePersistenceRepository_GetByOfferId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOfflineOfferUpdatePersistenceRepository creates a new instance of MockOfflineOfferUpdatePersistenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOfflineOfferUpdatePersistenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOfflineOfferUpdatePersistenceRepository {
	mock := &MockOfflineOfferUpdatePersistenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
