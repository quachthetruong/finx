// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderServiceRepository is an autogenerated mock type for the OrderServiceRepository type
type MockOrderServiceRepository struct {
	mock.Mock
}

type MockOrderServiceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderServiceRepository) EXPECT() *MockOrderServiceRepository_Expecter {
	return &MockOrderServiceRepository_Expecter{mock: &_m.Mock}
}

// GetAccountByAccountNoAndCustodyCode provides a mock function with given fields: ctx, custodyCode, accountNo
func (_m *MockOrderServiceRepository) GetAccountByAccountNoAndCustodyCode(ctx context.Context, custodyCode string, accountNo string) (entity.OrderServiceAccount, error) {
	ret := _m.Called(ctx, custodyCode, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByAccountNoAndCustodyCode")
	}

	var r0 entity.OrderServiceAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (entity.OrderServiceAccount, error)); ok {
		return rf(ctx, custodyCode, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.OrderServiceAccount); ok {
		r0 = rf(ctx, custodyCode, accountNo)
	} else {
		r0 = ret.Get(0).(entity.OrderServiceAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, custodyCode, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByAccountNoAndCustodyCode'
type MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call struct {
	*mock.Call
}

// GetAccountByAccountNoAndCustodyCode is a helper method to define mock.On call
//   - ctx context.Context
//   - custodyCode string
//   - accountNo string
func (_e *MockOrderServiceRepository_Expecter) GetAccountByAccountNoAndCustodyCode(ctx interface{}, custodyCode interface{}, accountNo interface{}) *MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call {
	return &MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call{Call: _e.mock.On("GetAccountByAccountNoAndCustodyCode", ctx, custodyCode, accountNo)}
}

func (_c *MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call) Run(run func(ctx context.Context, custodyCode string, accountNo string)) *MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call) Return(_a0 entity.OrderServiceAccount, _a1 error) *MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call) RunAndReturn(run func(context.Context, string, string) (entity.OrderServiceAccount, error)) *MockOrderServiceRepository_GetAccountByAccountNoAndCustodyCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAccountLoanPackages provides a mock function with given fields: ctx, accountNo
func (_m *MockOrderServiceRepository) GetAllAccountLoanPackages(ctx context.Context, accountNo string) ([]entity.AccountLoanPackage, error) {
	ret := _m.Called(ctx, accountNo)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAccountLoanPackages")
	}

	var r0 []entity.AccountLoanPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.AccountLoanPackage, error)); ok {
		return rf(ctx, accountNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.AccountLoanPackage); ok {
		r0 = rf(ctx, accountNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AccountLoanPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderServiceRepository_GetAllAccountLoanPackages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAccountLoanPackages'
type MockOrderServiceRepository_GetAllAccountLoanPackages_Call struct {
	*mock.Call
}

// GetAllAccountLoanPackages is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNo string
func (_e *MockOrderServiceRepository_Expecter) GetAllAccountLoanPackages(ctx interface{}, accountNo interface{}) *MockOrderServiceRepository_GetAllAccountLoanPackages_Call {
	return &MockOrderServiceRepository_GetAllAccountLoanPackages_Call{Call: _e.mock.On("GetAllAccountLoanPackages", ctx, accountNo)}
}

func (_c *MockOrderServiceRepository_GetAllAccountLoanPackages_Call) Run(run func(ctx context.Context, accountNo string)) *MockOrderServiceRepository_GetAllAccountLoanPackages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrderServiceRepository_GetAllAccountLoanPackages_Call) Return(_a0 []entity.AccountLoanPackage, _a1 error) *MockOrderServiceRepository_GetAllAccountLoanPackages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderServiceRepository_GetAllAccountLoanPackages_Call) RunAndReturn(run func(context.Context, string) ([]entity.AccountLoanPackage, error)) *MockOrderServiceRepository_GetAllAccountLoanPackages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderServiceRepository creates a new instance of MockOrderServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderServiceRepository {
	mock := &MockOrderServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
