// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockPromotionCampaignRepository is an autogenerated mock type for the PromotionCampaignRepository type
type MockPromotionCampaignRepository struct {
	mock.Mock
}

type MockPromotionCampaignRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPromotionCampaignRepository) EXPECT() *MockPromotionCampaignRepository_Expecter {
	return &MockPromotionCampaignRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, campaign
func (_m *MockPromotionCampaignRepository) Create(ctx context.Context, campaign entity.PromotionCampaign) (entity.PromotionCampaign, error) {
	ret := _m.Called(ctx, campaign)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.PromotionCampaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PromotionCampaign) (entity.PromotionCampaign, error)); ok {
		return rf(ctx, campaign)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.PromotionCampaign) entity.PromotionCampaign); ok {
		r0 = rf(ctx, campaign)
	} else {
		r0 = ret.Get(0).(entity.PromotionCampaign)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.PromotionCampaign) error); ok {
		r1 = rf(ctx, campaign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromotionCampaignRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPromotionCampaignRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - campaign entity.PromotionCampaign
func (_e *MockPromotionCampaignRepository_Expecter) Create(ctx interface{}, campaign interface{}) *MockPromotionCampaignRepository_Create_Call {
	return &MockPromotionCampaignRepository_Create_Call{Call: _e.mock.On("Create", ctx, campaign)}
}

func (_c *MockPromotionCampaignRepository_Create_Call) Run(run func(ctx context.Context, campaign entity.PromotionCampaign)) *MockPromotionCampaignRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.PromotionCampaign))
	})
	return _c
}

func (_c *MockPromotionCampaignRepository_Create_Call) Return(_a0 entity.PromotionCampaign, _a1 error) *MockPromotionCampaignRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromotionCampaignRepository_Create_Call) RunAndReturn(run func(context.Context, entity.PromotionCampaign) (entity.PromotionCampaign, error)) *MockPromotionCampaignRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, filter
func (_m *MockPromotionCampaignRepository) GetAll(ctx context.Context, filter entity.GetPromotionCampaignsRequest) ([]entity.PromotionCampaign, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.PromotionCampaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetPromotionCampaignsRequest) ([]entity.PromotionCampaign, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetPromotionCampaignsRequest) []entity.PromotionCampaign); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PromotionCampaign)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.GetPromotionCampaignsRequest) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromotionCampaignRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockPromotionCampaignRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.GetPromotionCampaignsRequest
func (_e *MockPromotionCampaignRepository_Expecter) GetAll(ctx interface{}, filter interface{}) *MockPromotionCampaignRepository_GetAll_Call {
	return &MockPromotionCampaignRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, filter)}
}

func (_c *MockPromotionCampaignRepository_GetAll_Call) Run(run func(ctx context.Context, filter entity.GetPromotionCampaignsRequest)) *MockPromotionCampaignRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.GetPromotionCampaignsRequest))
	})
	return _c
}

func (_c *MockPromotionCampaignRepository_GetAll_Call) Return(_a0 []entity.PromotionCampaign, _a1 error) *MockPromotionCampaignRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromotionCampaignRepository_GetAll_Call) RunAndReturn(run func(context.Context, entity.GetPromotionCampaignsRequest) ([]entity.PromotionCampaign, error)) *MockPromotionCampaignRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockPromotionCampaignRepository) GetById(ctx context.Context, id int64) (entity.PromotionCampaign, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.PromotionCampaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.PromotionCampaign, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.PromotionCampaign); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.PromotionCampaign)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromotionCampaignRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockPromotionCampaignRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockPromotionCampaignRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockPromotionCampaignRepository_GetById_Call {
	return &MockPromotionCampaignRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockPromotionCampaignRepository_GetById_Call) Run(run func(ctx context.Context, id int64)) *MockPromotionCampaignRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPromotionCampaignRepository_GetById_Call) Return(_a0 entity.PromotionCampaign, _a1 error) *MockPromotionCampaignRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromotionCampaignRepository_GetById_Call) RunAndReturn(run func(context.Context, int64) (entity.PromotionCampaign, error)) *MockPromotionCampaignRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, campaign
func (_m *MockPromotionCampaignRepository) Update(ctx context.Context, campaign entity.PromotionCampaign) (entity.PromotionCampaign, error) {
	ret := _m.Called(ctx, campaign)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.PromotionCampaign
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.PromotionCampaign) (entity.PromotionCampaign, error)); ok {
		return rf(ctx, campaign)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.PromotionCampaign) entity.PromotionCampaign); ok {
		r0 = rf(ctx, campaign)
	} else {
		r0 = ret.Get(0).(entity.PromotionCampaign)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.PromotionCampaign) error); ok {
		r1 = rf(ctx, campaign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromotionCampaignRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPromotionCampaignRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - campaign entity.PromotionCampaign
func (_e *MockPromotionCampaignRepository_Expecter) Update(ctx interface{}, campaign interface{}) *MockPromotionCampaignRepository_Update_Call {
	return &MockPromotionCampaignRepository_Update_Call{Call: _e.mock.On("Update", ctx, campaign)}
}

func (_c *MockPromotionCampaignRepository_Update_Call) Run(run func(ctx context.Context, campaign entity.PromotionCampaign)) *MockPromotionCampaignRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.PromotionCampaign))
	})
	return _c
}

func (_c *MockPromotionCampaignRepository_Update_Call) Return(_a0 entity.PromotionCampaign, _a1 error) *MockPromotionCampaignRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromotionCampaignRepository_Update_Call) RunAndReturn(run func(context.Context, entity.PromotionCampaign) (entity.PromotionCampaign, error)) *MockPromotionCampaignRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPromotionCampaignRepository creates a new instance of MockPromotionCampaignRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromotionCampaignRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromotionCampaignRepository {
	mock := &MockPromotionCampaignRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
