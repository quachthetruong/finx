// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockScoreGroupInterestRepository is an autogenerated mock type for the ScoreGroupInterestRepository type
type MockScoreGroupInterestRepository struct {
	mock.Mock
}

type MockScoreGroupInterestRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScoreGroupInterestRepository) EXPECT() *MockScoreGroupInterestRepository_Expecter {
	return &MockScoreGroupInterestRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, symbol
func (_m *MockScoreGroupInterestRepository) Create(ctx context.Context, symbol entity.ScoreGroupInterest) (entity.ScoreGroupInterest, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.ScoreGroupInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScoreGroupInterest) (entity.ScoreGroupInterest, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScoreGroupInterest) entity.ScoreGroupInterest); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(entity.ScoreGroupInterest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ScoreGroupInterest) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScoreGroupInterestRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockScoreGroupInterestRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol entity.ScoreGroupInterest
func (_e *MockScoreGroupInterestRepository_Expecter) Create(ctx interface{}, symbol interface{}) *MockScoreGroupInterestRepository_Create_Call {
	return &MockScoreGroupInterestRepository_Create_Call{Call: _e.mock.On("Create", ctx, symbol)}
}

func (_c *MockScoreGroupInterestRepository_Create_Call) Run(run func(ctx context.Context, symbol entity.ScoreGroupInterest)) *MockScoreGroupInterestRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ScoreGroupInterest))
	})
	return _c
}

func (_c *MockScoreGroupInterestRepository_Create_Call) Return(_a0 entity.ScoreGroupInterest, _a1 error) *MockScoreGroupInterestRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreGroupInterestRepository_Create_Call) RunAndReturn(run func(context.Context, entity.ScoreGroupInterest) (entity.ScoreGroupInterest, error)) *MockScoreGroupInterestRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockScoreGroupInterestRepository) Delete(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScoreGroupInterestRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockScoreGroupInterestRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockScoreGroupInterestRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockScoreGroupInterestRepository_Delete_Call {
	return &MockScoreGroupInterestRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockScoreGroupInterestRepository_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockScoreGroupInterestRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockScoreGroupInterestRepository_Delete_Call) Return(_a0 bool, _a1 error) *MockScoreGroupInterestRepository_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreGroupInterestRepository_Delete_Call) RunAndReturn(run func(context.Context, int64) (bool, error)) *MockScoreGroupInterestRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, filter
func (_m *MockScoreGroupInterestRepository) GetAll(ctx context.Context, filter entity.ScoreGroupInterestFilter) ([]entity.ScoreGroupInterest, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.ScoreGroupInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScoreGroupInterestFilter) ([]entity.ScoreGroupInterest, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScoreGroupInterestFilter) []entity.ScoreGroupInterest); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ScoreGroupInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ScoreGroupInterestFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScoreGroupInterestRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockScoreGroupInterestRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.ScoreGroupInterestFilter
func (_e *MockScoreGroupInterestRepository_Expecter) GetAll(ctx interface{}, filter interface{}) *MockScoreGroupInterestRepository_GetAll_Call {
	return &MockScoreGroupInterestRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, filter)}
}

func (_c *MockScoreGroupInterestRepository_GetAll_Call) Run(run func(ctx context.Context, filter entity.ScoreGroupInterestFilter)) *MockScoreGroupInterestRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ScoreGroupInterestFilter))
	})
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetAll_Call) Return(_a0 []entity.ScoreGroupInterest, _a1 error) *MockScoreGroupInterestRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetAll_Call) RunAndReturn(run func(context.Context, entity.ScoreGroupInterestFilter) ([]entity.ScoreGroupInterest, error)) *MockScoreGroupInterestRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailablePackageBySymbolId provides a mock function with given fields: ctx, symbolId
func (_m *MockScoreGroupInterestRepository) GetAvailablePackageBySymbolId(ctx context.Context, symbolId int64) ([]entity.ScoreGroupInterest, error) {
	ret := _m.Called(ctx, symbolId)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailablePackageBySymbolId")
	}

	var r0 []entity.ScoreGroupInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.ScoreGroupInterest, error)); ok {
		return rf(ctx, symbolId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.ScoreGroupInterest); ok {
		r0 = rf(ctx, symbolId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ScoreGroupInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, symbolId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailablePackageBySymbolId'
type MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call struct {
	*mock.Call
}

// GetAvailablePackageBySymbolId is a helper method to define mock.On call
//   - ctx context.Context
//   - symbolId int64
func (_e *MockScoreGroupInterestRepository_Expecter) GetAvailablePackageBySymbolId(ctx interface{}, symbolId interface{}) *MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call {
	return &MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call{Call: _e.mock.On("GetAvailablePackageBySymbolId", ctx, symbolId)}
}

func (_c *MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call) Run(run func(ctx context.Context, symbolId int64)) *MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call) Return(_a0 []entity.ScoreGroupInterest, _a1 error) *MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call) RunAndReturn(run func(context.Context, int64) ([]entity.ScoreGroupInterest, error)) *MockScoreGroupInterestRepository_GetAvailablePackageBySymbolId_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableScoreInterestsByScoreGroupId provides a mock function with given fields: ctx, scoreGroupId
func (_m *MockScoreGroupInterestRepository) GetAvailableScoreInterestsByScoreGroupId(ctx context.Context, scoreGroupId int64) ([]entity.ScoreGroupInterest, error) {
	ret := _m.Called(ctx, scoreGroupId)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableScoreInterestsByScoreGroupId")
	}

	var r0 []entity.ScoreGroupInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.ScoreGroupInterest, error)); ok {
		return rf(ctx, scoreGroupId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.ScoreGroupInterest); ok {
		r0 = rf(ctx, scoreGroupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ScoreGroupInterest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, scoreGroupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableScoreInterestsByScoreGroupId'
type MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call struct {
	*mock.Call
}

// GetAvailableScoreInterestsByScoreGroupId is a helper method to define mock.On call
//   - ctx context.Context
//   - scoreGroupId int64
func (_e *MockScoreGroupInterestRepository_Expecter) GetAvailableScoreInterestsByScoreGroupId(ctx interface{}, scoreGroupId interface{}) *MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call {
	return &MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call{Call: _e.mock.On("GetAvailableScoreInterestsByScoreGroupId", ctx, scoreGroupId)}
}

func (_c *MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call) Run(run func(ctx context.Context, scoreGroupId int64)) *MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call) Return(_a0 []entity.ScoreGroupInterest, _a1 error) *MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call) RunAndReturn(run func(context.Context, int64) ([]entity.ScoreGroupInterest, error)) *MockScoreGroupInterestRepository_GetAvailableScoreInterestsByScoreGroupId_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockScoreGroupInterestRepository) GetById(ctx context.Context, id int64) (entity.ScoreGroupInterest, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.ScoreGroupInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.ScoreGroupInterest, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.ScoreGroupInterest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.ScoreGroupInterest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScoreGroupInterestRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockScoreGroupInterestRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockScoreGroupInterestRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockScoreGroupInterestRepository_GetById_Call {
	return &MockScoreGroupInterestRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockScoreGroupInterestRepository_GetById_Call) Run(run func(ctx context.Context, id int64)) *MockScoreGroupInterestRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetById_Call) Return(_a0 entity.ScoreGroupInterest, _a1 error) *MockScoreGroupInterestRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreGroupInterestRepository_GetById_Call) RunAndReturn(run func(context.Context, int64) (entity.ScoreGroupInterest, error)) *MockScoreGroupInterestRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, symbol
func (_m *MockScoreGroupInterestRepository) Update(ctx context.Context, symbol entity.ScoreGroupInterest) (entity.ScoreGroupInterest, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.ScoreGroupInterest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScoreGroupInterest) (entity.ScoreGroupInterest, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ScoreGroupInterest) entity.ScoreGroupInterest); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(entity.ScoreGroupInterest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ScoreGroupInterest) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScoreGroupInterestRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockScoreGroupInterestRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol entity.ScoreGroupInterest
func (_e *MockScoreGroupInterestRepository_Expecter) Update(ctx interface{}, symbol interface{}) *MockScoreGroupInterestRepository_Update_Call {
	return &MockScoreGroupInterestRepository_Update_Call{Call: _e.mock.On("Update", ctx, symbol)}
}

func (_c *MockScoreGroupInterestRepository_Update_Call) Run(run func(ctx context.Context, symbol entity.ScoreGroupInterest)) *MockScoreGroupInterestRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ScoreGroupInterest))
	})
	return _c
}

func (_c *MockScoreGroupInterestRepository_Update_Call) Return(_a0 entity.ScoreGroupInterest, _a1 error) *MockScoreGroupInterestRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScoreGroupInterestRepository_Update_Call) RunAndReturn(run func(context.Context, entity.ScoreGroupInterest) (entity.ScoreGroupInterest, error)) *MockScoreGroupInterestRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScoreGroupInterestRepository creates a new instance of MockScoreGroupInterestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScoreGroupInterestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScoreGroupInterestRepository {
	mock := &MockScoreGroupInterestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
