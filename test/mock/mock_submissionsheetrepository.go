// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockSubmissionSheetRepository is an autogenerated mock type for the SubmissionSheetRepository type
type MockSubmissionSheetRepository struct {
	mock.Mock
}

type MockSubmissionSheetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubmissionSheetRepository) EXPECT() *MockSubmissionSheetRepository_Expecter {
	return &MockSubmissionSheetRepository_Expecter{mock: &_m.Mock}
}

// CreateDetail provides a mock function with given fields: ctx, submissionSheetDetail
func (_m *MockSubmissionSheetRepository) CreateDetail(ctx context.Context, submissionSheetDetail entity.SubmissionSheetDetail) (entity.SubmissionSheetDetail, error) {
	ret := _m.Called(ctx, submissionSheetDetail)

	if len(ret) == 0 {
		panic("no return value specified for CreateDetail")
	}

	var r0 entity.SubmissionSheetDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetDetail) (entity.SubmissionSheetDetail, error)); ok {
		return rf(ctx, submissionSheetDetail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetDetail) entity.SubmissionSheetDetail); ok {
		r0 = rf(ctx, submissionSheetDetail)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheetDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SubmissionSheetDetail) error); ok {
		r1 = rf(ctx, submissionSheetDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_CreateDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDetail'
type MockSubmissionSheetRepository_CreateDetail_Call struct {
	*mock.Call
}

// CreateDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionSheetDetail entity.SubmissionSheetDetail
func (_e *MockSubmissionSheetRepository_Expecter) CreateDetail(ctx interface{}, submissionSheetDetail interface{}) *MockSubmissionSheetRepository_CreateDetail_Call {
	return &MockSubmissionSheetRepository_CreateDetail_Call{Call: _e.mock.On("CreateDetail", ctx, submissionSheetDetail)}
}

func (_c *MockSubmissionSheetRepository_CreateDetail_Call) Run(run func(ctx context.Context, submissionSheetDetail entity.SubmissionSheetDetail)) *MockSubmissionSheetRepository_CreateDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SubmissionSheetDetail))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_CreateDetail_Call) Return(_a0 entity.SubmissionSheetDetail, _a1 error) *MockSubmissionSheetRepository_CreateDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_CreateDetail_Call) RunAndReturn(run func(context.Context, entity.SubmissionSheetDetail) (entity.SubmissionSheetDetail, error)) *MockSubmissionSheetRepository_CreateDetail_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMetadata provides a mock function with given fields: ctx, submissionSheetMetadata
func (_m *MockSubmissionSheetRepository) CreateMetadata(ctx context.Context, submissionSheetMetadata entity.SubmissionSheetMetadata) (entity.SubmissionSheetMetadata, error) {
	ret := _m.Called(ctx, submissionSheetMetadata)

	if len(ret) == 0 {
		panic("no return value specified for CreateMetadata")
	}

	var r0 entity.SubmissionSheetMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetMetadata) (entity.SubmissionSheetMetadata, error)); ok {
		return rf(ctx, submissionSheetMetadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetMetadata) entity.SubmissionSheetMetadata); ok {
		r0 = rf(ctx, submissionSheetMetadata)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheetMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SubmissionSheetMetadata) error); ok {
		r1 = rf(ctx, submissionSheetMetadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_CreateMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMetadata'
type MockSubmissionSheetRepository_CreateMetadata_Call struct {
	*mock.Call
}

// CreateMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionSheetMetadata entity.SubmissionSheetMetadata
func (_e *MockSubmissionSheetRepository_Expecter) CreateMetadata(ctx interface{}, submissionSheetMetadata interface{}) *MockSubmissionSheetRepository_CreateMetadata_Call {
	return &MockSubmissionSheetRepository_CreateMetadata_Call{Call: _e.mock.On("CreateMetadata", ctx, submissionSheetMetadata)}
}

func (_c *MockSubmissionSheetRepository_CreateMetadata_Call) Run(run func(ctx context.Context, submissionSheetMetadata entity.SubmissionSheetMetadata)) *MockSubmissionSheetRepository_CreateMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SubmissionSheetMetadata))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_CreateMetadata_Call) Return(_a0 entity.SubmissionSheetMetadata, _a1 error) *MockSubmissionSheetRepository_CreateMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_CreateMetadata_Call) RunAndReturn(run func(context.Context, entity.SubmissionSheetMetadata) (entity.SubmissionSheetMetadata, error)) *MockSubmissionSheetRepository_CreateMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockSubmissionSheetRepository) GetById(ctx context.Context, id int64) (entity.SubmissionSheet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.SubmissionSheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.SubmissionSheet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.SubmissionSheet); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockSubmissionSheetRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSubmissionSheetRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockSubmissionSheetRepository_GetById_Call {
	return &MockSubmissionSheetRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockSubmissionSheetRepository_GetById_Call) Run(run func(ctx context.Context, id int64)) *MockSubmissionSheetRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_GetById_Call) Return(_a0 entity.SubmissionSheet, _a1 error) *MockSubmissionSheetRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_GetById_Call) RunAndReturn(run func(context.Context, int64) (entity.SubmissionSheet, error)) *MockSubmissionSheetRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetailById provides a mock function with given fields: ctx, id
func (_m *MockSubmissionSheetRepository) GetDetailById(ctx context.Context, id int64) (entity.SubmissionSheetDetail, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailById")
	}

	var r0 entity.SubmissionSheetDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.SubmissionSheetDetail, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.SubmissionSheetDetail); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheetDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_GetDetailById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetailById'
type MockSubmissionSheetRepository_GetDetailById_Call struct {
	*mock.Call
}

// GetDetailById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSubmissionSheetRepository_Expecter) GetDetailById(ctx interface{}, id interface{}) *MockSubmissionSheetRepository_GetDetailById_Call {
	return &MockSubmissionSheetRepository_GetDetailById_Call{Call: _e.mock.On("GetDetailById", ctx, id)}
}

func (_c *MockSubmissionSheetRepository_GetDetailById_Call) Run(run func(ctx context.Context, id int64)) *MockSubmissionSheetRepository_GetDetailById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_GetDetailById_Call) Return(_a0 entity.SubmissionSheetDetail, _a1 error) *MockSubmissionSheetRepository_GetDetailById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_GetDetailById_Call) RunAndReturn(run func(context.Context, int64) (entity.SubmissionSheetDetail, error)) *MockSubmissionSheetRepository_GetDetailById_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestByRequestId provides a mock function with given fields: ctx, requestId
func (_m *MockSubmissionSheetRepository) GetLatestByRequestId(ctx context.Context, requestId int64) (entity.SubmissionSheet, error) {
	ret := _m.Called(ctx, requestId)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestByRequestId")
	}

	var r0 entity.SubmissionSheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.SubmissionSheet, error)); ok {
		return rf(ctx, requestId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.SubmissionSheet); ok {
		r0 = rf(ctx, requestId)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_GetLatestByRequestId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestByRequestId'
type MockSubmissionSheetRepository_GetLatestByRequestId_Call struct {
	*mock.Call
}

// GetLatestByRequestId is a helper method to define mock.On call
//   - ctx context.Context
//   - requestId int64
func (_e *MockSubmissionSheetRepository_Expecter) GetLatestByRequestId(ctx interface{}, requestId interface{}) *MockSubmissionSheetRepository_GetLatestByRequestId_Call {
	return &MockSubmissionSheetRepository_GetLatestByRequestId_Call{Call: _e.mock.On("GetLatestByRequestId", ctx, requestId)}
}

func (_c *MockSubmissionSheetRepository_GetLatestByRequestId_Call) Run(run func(ctx context.Context, requestId int64)) *MockSubmissionSheetRepository_GetLatestByRequestId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_GetLatestByRequestId_Call) Return(_a0 entity.SubmissionSheet, _a1 error) *MockSubmissionSheetRepository_GetLatestByRequestId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_GetLatestByRequestId_Call) RunAndReturn(run func(context.Context, int64) (entity.SubmissionSheet, error)) *MockSubmissionSheetRepository_GetLatestByRequestId_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadataByRequestId provides a mock function with given fields: ctx, requestId
func (_m *MockSubmissionSheetRepository) GetMetadataByRequestId(ctx context.Context, requestId int64) ([]entity.SubmissionSheetMetadata, error) {
	ret := _m.Called(ctx, requestId)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataByRequestId")
	}

	var r0 []entity.SubmissionSheetMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.SubmissionSheetMetadata, error)); ok {
		return rf(ctx, requestId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.SubmissionSheetMetadata); ok {
		r0 = rf(ctx, requestId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SubmissionSheetMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_GetMetadataByRequestId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadataByRequestId'
type MockSubmissionSheetRepository_GetMetadataByRequestId_Call struct {
	*mock.Call
}

// GetMetadataByRequestId is a helper method to define mock.On call
//   - ctx context.Context
//   - requestId int64
func (_e *MockSubmissionSheetRepository_Expecter) GetMetadataByRequestId(ctx interface{}, requestId interface{}) *MockSubmissionSheetRepository_GetMetadataByRequestId_Call {
	return &MockSubmissionSheetRepository_GetMetadataByRequestId_Call{Call: _e.mock.On("GetMetadataByRequestId", ctx, requestId)}
}

func (_c *MockSubmissionSheetRepository_GetMetadataByRequestId_Call) Run(run func(ctx context.Context, requestId int64)) *MockSubmissionSheetRepository_GetMetadataByRequestId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_GetMetadataByRequestId_Call) Return(_a0 []entity.SubmissionSheetMetadata, _a1 error) *MockSubmissionSheetRepository_GetMetadataByRequestId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_GetMetadataByRequestId_Call) RunAndReturn(run func(context.Context, int64) ([]entity.SubmissionSheetMetadata, error)) *MockSubmissionSheetRepository_GetMetadataByRequestId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDetail provides a mock function with given fields: ctx, submissionSheetDetail
func (_m *MockSubmissionSheetRepository) UpdateDetail(ctx context.Context, submissionSheetDetail entity.SubmissionSheetDetail) (entity.SubmissionSheetDetail, error) {
	ret := _m.Called(ctx, submissionSheetDetail)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDetail")
	}

	var r0 entity.SubmissionSheetDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetDetail) (entity.SubmissionSheetDetail, error)); ok {
		return rf(ctx, submissionSheetDetail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetDetail) entity.SubmissionSheetDetail); ok {
		r0 = rf(ctx, submissionSheetDetail)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheetDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SubmissionSheetDetail) error); ok {
		r1 = rf(ctx, submissionSheetDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_UpdateDetail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDetail'
type MockSubmissionSheetRepository_UpdateDetail_Call struct {
	*mock.Call
}

// UpdateDetail is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionSheetDetail entity.SubmissionSheetDetail
func (_e *MockSubmissionSheetRepository_Expecter) UpdateDetail(ctx interface{}, submissionSheetDetail interface{}) *MockSubmissionSheetRepository_UpdateDetail_Call {
	return &MockSubmissionSheetRepository_UpdateDetail_Call{Call: _e.mock.On("UpdateDetail", ctx, submissionSheetDetail)}
}

func (_c *MockSubmissionSheetRepository_UpdateDetail_Call) Run(run func(ctx context.Context, submissionSheetDetail entity.SubmissionSheetDetail)) *MockSubmissionSheetRepository_UpdateDetail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SubmissionSheetDetail))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_UpdateDetail_Call) Return(_a0 entity.SubmissionSheetDetail, _a1 error) *MockSubmissionSheetRepository_UpdateDetail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_UpdateDetail_Call) RunAndReturn(run func(context.Context, entity.SubmissionSheetDetail) (entity.SubmissionSheetDetail, error)) *MockSubmissionSheetRepository_UpdateDetail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetadata provides a mock function with given fields: ctx, submissionSheetMetadata
func (_m *MockSubmissionSheetRepository) UpdateMetadata(ctx context.Context, submissionSheetMetadata entity.SubmissionSheetMetadata) (entity.SubmissionSheetMetadata, error) {
	ret := _m.Called(ctx, submissionSheetMetadata)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetadata")
	}

	var r0 entity.SubmissionSheetMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetMetadata) (entity.SubmissionSheetMetadata, error)); ok {
		return rf(ctx, submissionSheetMetadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetMetadata) entity.SubmissionSheetMetadata); ok {
		r0 = rf(ctx, submissionSheetMetadata)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheetMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SubmissionSheetMetadata) error); ok {
		r1 = rf(ctx, submissionSheetMetadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmissionSheetRepository_UpdateMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetadata'
type MockSubmissionSheetRepository_UpdateMetadata_Call struct {
	*mock.Call
}

// UpdateMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionSheetMetadata entity.SubmissionSheetMetadata
func (_e *MockSubmissionSheetRepository_Expecter) UpdateMetadata(ctx interface{}, submissionSheetMetadata interface{}) *MockSubmissionSheetRepository_UpdateMetadata_Call {
	return &MockSubmissionSheetRepository_UpdateMetadata_Call{Call: _e.mock.On("UpdateMetadata", ctx, submissionSheetMetadata)}
}

func (_c *MockSubmissionSheetRepository_UpdateMetadata_Call) Run(run func(ctx context.Context, submissionSheetMetadata entity.SubmissionSheetMetadata)) *MockSubmissionSheetRepository_UpdateMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SubmissionSheetMetadata))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_UpdateMetadata_Call) Return(_a0 entity.SubmissionSheetMetadata, _a1 error) *MockSubmissionSheetRepository_UpdateMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmissionSheetRepository_UpdateMetadata_Call) RunAndReturn(run func(context.Context, entity.SubmissionSheetMetadata) (entity.SubmissionSheetMetadata, error)) *MockSubmissionSheetRepository_UpdateMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetadataStatusById provides a mock function with given fields: ctx, id, status
func (_m *MockSubmissionSheetRepository) UpdateMetadataStatusById(ctx context.Context, id int64, status entity.SubmissionSheetStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetadataStatusById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.SubmissionSheetStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubmissionSheetRepository_UpdateMetadataStatusById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetadataStatusById'
type MockSubmissionSheetRepository_UpdateMetadataStatusById_Call struct {
	*mock.Call
}

// UpdateMetadataStatusById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - status entity.SubmissionSheetStatus
func (_e *MockSubmissionSheetRepository_Expecter) UpdateMetadataStatusById(ctx interface{}, id interface{}, status interface{}) *MockSubmissionSheetRepository_UpdateMetadataStatusById_Call {
	return &MockSubmissionSheetRepository_UpdateMetadataStatusById_Call{Call: _e.mock.On("UpdateMetadataStatusById", ctx, id, status)}
}

func (_c *MockSubmissionSheetRepository_UpdateMetadataStatusById_Call) Run(run func(ctx context.Context, id int64, status entity.SubmissionSheetStatus)) *MockSubmissionSheetRepository_UpdateMetadataStatusById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(entity.SubmissionSheetStatus))
	})
	return _c
}

func (_c *MockSubmissionSheetRepository_UpdateMetadataStatusById_Call) Return(_a0 error) *MockSubmissionSheetRepository_UpdateMetadataStatusById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubmissionSheetRepository_UpdateMetadataStatusById_Call) RunAndReturn(run func(context.Context, int64, entity.SubmissionSheetStatus) error) *MockSubmissionSheetRepository_UpdateMetadataStatusById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubmissionSheetRepository creates a new instance of MockSubmissionSheetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubmissionSheetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubmissionSheetRepository {
	mock := &MockSubmissionSheetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
