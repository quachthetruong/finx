// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	optional "financing-offer/pkg/optional"
)

// MockSuggestedOfferConfigRepository is an autogenerated mock type for the SuggestedOfferConfigRepository type
type MockSuggestedOfferConfigRepository struct {
	mock.Mock
}

type MockSuggestedOfferConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSuggestedOfferConfigRepository) EXPECT() *MockSuggestedOfferConfigRepository_Expecter {
	return &MockSuggestedOfferConfigRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, suggestedOfferConfig
func (_m *MockSuggestedOfferConfigRepository) Create(ctx context.Context, suggestedOfferConfig entity.SuggestedOfferConfig) (entity.SuggestedOfferConfig, error) {
	ret := _m.Called(ctx, suggestedOfferConfig)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.SuggestedOfferConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SuggestedOfferConfig) (entity.SuggestedOfferConfig, error)); ok {
		return rf(ctx, suggestedOfferConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SuggestedOfferConfig) entity.SuggestedOfferConfig); ok {
		r0 = rf(ctx, suggestedOfferConfig)
	} else {
		r0 = ret.Get(0).(entity.SuggestedOfferConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SuggestedOfferConfig) error); ok {
		r1 = rf(ctx, suggestedOfferConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSuggestedOfferConfigRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSuggestedOfferConfigRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - suggestedOfferConfig entity.SuggestedOfferConfig
func (_e *MockSuggestedOfferConfigRepository_Expecter) Create(ctx interface{}, suggestedOfferConfig interface{}) *MockSuggestedOfferConfigRepository_Create_Call {
	return &MockSuggestedOfferConfigRepository_Create_Call{Call: _e.mock.On("Create", ctx, suggestedOfferConfig)}
}

func (_c *MockSuggestedOfferConfigRepository_Create_Call) Run(run func(ctx context.Context, suggestedOfferConfig entity.SuggestedOfferConfig)) *MockSuggestedOfferConfigRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SuggestedOfferConfig))
	})
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_Create_Call) Return(_a0 entity.SuggestedOfferConfig, _a1 error) *MockSuggestedOfferConfigRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_Create_Call) RunAndReturn(run func(context.Context, entity.SuggestedOfferConfig) (entity.SuggestedOfferConfig, error)) *MockSuggestedOfferConfigRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveSuggestedOfferConfig provides a mock function with given fields: ctx
func (_m *MockSuggestedOfferConfigRepository) GetActiveSuggestedOfferConfig(ctx context.Context) (optional.Optional[entity.SuggestedOfferConfig], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveSuggestedOfferConfig")
	}

	var r0 optional.Optional[entity.SuggestedOfferConfig]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (optional.Optional[entity.SuggestedOfferConfig], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) optional.Optional[entity.SuggestedOfferConfig]); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(optional.Optional[entity.SuggestedOfferConfig])
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveSuggestedOfferConfig'
type MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call struct {
	*mock.Call
}

// GetActiveSuggestedOfferConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSuggestedOfferConfigRepository_Expecter) GetActiveSuggestedOfferConfig(ctx interface{}) *MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call {
	return &MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call{Call: _e.mock.On("GetActiveSuggestedOfferConfig", ctx)}
}

func (_c *MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call) Run(run func(ctx context.Context)) *MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call) Return(_a0 optional.Optional[entity.SuggestedOfferConfig], _a1 error) *MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call) RunAndReturn(run func(context.Context) (optional.Optional[entity.SuggestedOfferConfig], error)) *MockSuggestedOfferConfigRepository_GetActiveSuggestedOfferConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockSuggestedOfferConfigRepository) GetAll(ctx context.Context) ([]entity.SuggestedOfferConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.SuggestedOfferConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.SuggestedOfferConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.SuggestedOfferConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SuggestedOfferConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSuggestedOfferConfigRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockSuggestedOfferConfigRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSuggestedOfferConfigRepository_Expecter) GetAll(ctx interface{}) *MockSuggestedOfferConfigRepository_GetAll_Call {
	return &MockSuggestedOfferConfigRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockSuggestedOfferConfigRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockSuggestedOfferConfigRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_GetAll_Call) Return(_a0 []entity.SuggestedOfferConfig, _a1 error) *MockSuggestedOfferConfigRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]entity.SuggestedOfferConfig, error)) *MockSuggestedOfferConfigRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockSuggestedOfferConfigRepository) GetById(ctx context.Context, id int64) (entity.SuggestedOfferConfig, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.SuggestedOfferConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.SuggestedOfferConfig, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.SuggestedOfferConfig); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.SuggestedOfferConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSuggestedOfferConfigRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockSuggestedOfferConfigRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSuggestedOfferConfigRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockSuggestedOfferConfigRepository_GetById_Call {
	return &MockSuggestedOfferConfigRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockSuggestedOfferConfigRepository_GetById_Call) Run(run func(ctx context.Context, id int64)) *MockSuggestedOfferConfigRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_GetById_Call) Return(_a0 entity.SuggestedOfferConfig, _a1 error) *MockSuggestedOfferConfigRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_GetById_Call) RunAndReturn(run func(context.Context, int64) (entity.SuggestedOfferConfig, error)) *MockSuggestedOfferConfigRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, suggestedOfferConfig
func (_m *MockSuggestedOfferConfigRepository) Update(ctx context.Context, suggestedOfferConfig entity.SuggestedOfferConfig) (entity.SuggestedOfferConfig, error) {
	ret := _m.Called(ctx, suggestedOfferConfig)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.SuggestedOfferConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SuggestedOfferConfig) (entity.SuggestedOfferConfig, error)); ok {
		return rf(ctx, suggestedOfferConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SuggestedOfferConfig) entity.SuggestedOfferConfig); ok {
		r0 = rf(ctx, suggestedOfferConfig)
	} else {
		r0 = ret.Get(0).(entity.SuggestedOfferConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SuggestedOfferConfig) error); ok {
		r1 = rf(ctx, suggestedOfferConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSuggestedOfferConfigRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSuggestedOfferConfigRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - suggestedOfferConfig entity.SuggestedOfferConfig
func (_e *MockSuggestedOfferConfigRepository_Expecter) Update(ctx interface{}, suggestedOfferConfig interface{}) *MockSuggestedOfferConfigRepository_Update_Call {
	return &MockSuggestedOfferConfigRepository_Update_Call{Call: _e.mock.On("Update", ctx, suggestedOfferConfig)}
}

func (_c *MockSuggestedOfferConfigRepository_Update_Call) Run(run func(ctx context.Context, suggestedOfferConfig entity.SuggestedOfferConfig)) *MockSuggestedOfferConfigRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SuggestedOfferConfig))
	})
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_Update_Call) Return(_a0 entity.SuggestedOfferConfig, _a1 error) *MockSuggestedOfferConfigRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_Update_Call) RunAndReturn(run func(context.Context, entity.SuggestedOfferConfig) (entity.SuggestedOfferConfig, error)) *MockSuggestedOfferConfigRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, id, status, updater
func (_m *MockSuggestedOfferConfigRepository) UpdateStatus(ctx context.Context, id int64, status entity.SuggestedOfferConfigStatus, updater string) (entity.SuggestedOfferConfig, error) {
	ret := _m.Called(ctx, id, status, updater)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 entity.SuggestedOfferConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.SuggestedOfferConfigStatus, string) (entity.SuggestedOfferConfig, error)); ok {
		return rf(ctx, id, status, updater)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.SuggestedOfferConfigStatus, string) entity.SuggestedOfferConfig); ok {
		r0 = rf(ctx, id, status, updater)
	} else {
		r0 = ret.Get(0).(entity.SuggestedOfferConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, entity.SuggestedOfferConfigStatus, string) error); ok {
		r1 = rf(ctx, id, status, updater)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSuggestedOfferConfigRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockSuggestedOfferConfigRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - status entity.SuggestedOfferConfigStatus
//   - updater string
func (_e *MockSuggestedOfferConfigRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}, updater interface{}) *MockSuggestedOfferConfigRepository_UpdateStatus_Call {
	return &MockSuggestedOfferConfigRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status, updater)}
}

func (_c *MockSuggestedOfferConfigRepository_UpdateStatus_Call) Run(run func(ctx context.Context, id int64, status entity.SuggestedOfferConfigStatus, updater string)) *MockSuggestedOfferConfigRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(entity.SuggestedOfferConfigStatus), args[3].(string))
	})
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_UpdateStatus_Call) Return(_a0 entity.SuggestedOfferConfig, _a1 error) *MockSuggestedOfferConfigRepository_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSuggestedOfferConfigRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, int64, entity.SuggestedOfferConfigStatus, string) (entity.SuggestedOfferConfig, error)) *MockSuggestedOfferConfigRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSuggestedOfferConfigRepository creates a new instance of MockSuggestedOfferConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSuggestedOfferConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSuggestedOfferConfigRepository {
	mock := &MockSuggestedOfferConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
