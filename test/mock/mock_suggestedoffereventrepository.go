// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockSuggestedOfferEventRepository is an autogenerated mock type for the SuggestedOfferEventRepository type
type MockSuggestedOfferEventRepository struct {
	mock.Mock
}

type MockSuggestedOfferEventRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSuggestedOfferEventRepository) EXPECT() *MockSuggestedOfferEventRepository_Expecter {
	return &MockSuggestedOfferEventRepository_Expecter{mock: &_m.Mock}
}

// NotifySuggestedOfferCreated provides a mock function with given fields: ctx, investorId, config, createdOffer
func (_m *MockSuggestedOfferEventRepository) NotifySuggestedOfferCreated(ctx context.Context, investorId string, config entity.SuggestedOfferConfig, createdOffer entity.SuggestedOffer) error {
	ret := _m.Called(ctx, investorId, config, createdOffer)

	if len(ret) == 0 {
		panic("no return value specified for NotifySuggestedOfferCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.SuggestedOfferConfig, entity.SuggestedOffer) error); ok {
		r0 = rf(ctx, investorId, config, createdOffer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifySuggestedOfferCreated'
type MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call struct {
	*mock.Call
}

// NotifySuggestedOfferCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - investorId string
//   - config entity.SuggestedOfferConfig
//   - createdOffer entity.SuggestedOffer
func (_e *MockSuggestedOfferEventRepository_Expecter) NotifySuggestedOfferCreated(ctx interface{}, investorId interface{}, config interface{}, createdOffer interface{}) *MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call {
	return &MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call{Call: _e.mock.On("NotifySuggestedOfferCreated", ctx, investorId, config, createdOffer)}
}

func (_c *MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call) Run(run func(ctx context.Context, investorId string, config entity.SuggestedOfferConfig, createdOffer entity.SuggestedOffer)) *MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.SuggestedOfferConfig), args[3].(entity.SuggestedOffer))
	})
	return _c
}

func (_c *MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call) Return(_a0 error) *MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call) RunAndReturn(run func(context.Context, string, entity.SuggestedOfferConfig, entity.SuggestedOffer) error) *MockSuggestedOfferEventRepository_NotifySuggestedOfferCreated_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSuggestedOfferEventRepository creates a new instance of MockSuggestedOfferEventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSuggestedOfferEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSuggestedOfferEventRepository {
	mock := &MockSuggestedOfferEventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
