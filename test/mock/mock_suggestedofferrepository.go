// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockSuggestedOfferRepository is an autogenerated mock type for the SuggestedOfferRepository type
type MockSuggestedOfferRepository struct {
	mock.Mock
}

type MockSuggestedOfferRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSuggestedOfferRepository) EXPECT() *MockSuggestedOfferRepository_Expecter {
	return &MockSuggestedOfferRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, suggestedOffer
func (_m *MockSuggestedOfferRepository) Create(ctx context.Context, suggestedOffer entity.SuggestedOffer) (entity.SuggestedOffer, error) {
	ret := _m.Called(ctx, suggestedOffer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.SuggestedOffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SuggestedOffer) (entity.SuggestedOffer, error)); ok {
		return rf(ctx, suggestedOffer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SuggestedOffer) entity.SuggestedOffer); ok {
		r0 = rf(ctx, suggestedOffer)
	} else {
		r0 = ret.Get(0).(entity.SuggestedOffer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SuggestedOffer) error); ok {
		r1 = rf(ctx, suggestedOffer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSuggestedOfferRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSuggestedOfferRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - suggestedOffer entity.SuggestedOffer
func (_e *MockSuggestedOfferRepository_Expecter) Create(ctx interface{}, suggestedOffer interface{}) *MockSuggestedOfferRepository_Create_Call {
	return &MockSuggestedOfferRepository_Create_Call{Call: _e.mock.On("Create", ctx, suggestedOffer)}
}

func (_c *MockSuggestedOfferRepository_Create_Call) Run(run func(ctx context.Context, suggestedOffer entity.SuggestedOffer)) *MockSuggestedOfferRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SuggestedOffer))
	})
	return _c
}

func (_c *MockSuggestedOfferRepository_Create_Call) Return(_a0 entity.SuggestedOffer, _a1 error) *MockSuggestedOfferRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSuggestedOfferRepository_Create_Call) RunAndReturn(run func(context.Context, entity.SuggestedOffer) (entity.SuggestedOffer, error)) *MockSuggestedOfferRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSuggestedOfferRepository creates a new instance of MockSuggestedOfferRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSuggestedOfferRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSuggestedOfferRepository {
	mock := &MockSuggestedOfferRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
