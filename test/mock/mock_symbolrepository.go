// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockSymbolRepository is an autogenerated mock type for the SymbolRepository type
type MockSymbolRepository struct {
	mock.Mock
}

type MockSymbolRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSymbolRepository) EXPECT() *MockSymbolRepository_Expecter {
	return &MockSymbolRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, filter
func (_m *MockSymbolRepository) Count(ctx context.Context, filter entity.SymbolFilter) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SymbolFilter) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SymbolFilter) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SymbolFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockSymbolRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.SymbolFilter
func (_e *MockSymbolRepository_Expecter) Count(ctx interface{}, filter interface{}) *MockSymbolRepository_Count_Call {
	return &MockSymbolRepository_Count_Call{Call: _e.mock.On("Count", ctx, filter)}
}

func (_c *MockSymbolRepository_Count_Call) Run(run func(ctx context.Context, filter entity.SymbolFilter)) *MockSymbolRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SymbolFilter))
	})
	return _c
}

func (_c *MockSymbolRepository_Count_Call) Return(_a0 int64, _a1 error) *MockSymbolRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolRepository_Count_Call) RunAndReturn(run func(context.Context, entity.SymbolFilter) (int64, error)) *MockSymbolRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, symbol
func (_m *MockSymbolRepository) Create(ctx context.Context, symbol entity.Symbol) (entity.Symbol, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Symbol) (entity.Symbol, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Symbol) entity.Symbol); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(entity.Symbol)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Symbol) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSymbolRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol entity.Symbol
func (_e *MockSymbolRepository_Expecter) Create(ctx interface{}, symbol interface{}) *MockSymbolRepository_Create_Call {
	return &MockSymbolRepository_Create_Call{Call: _e.mock.On("Create", ctx, symbol)}
}

func (_c *MockSymbolRepository_Create_Call) Run(run func(ctx context.Context, symbol entity.Symbol)) *MockSymbolRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Symbol))
	})
	return _c
}

func (_c *MockSymbolRepository_Create_Call) Return(_a0 entity.Symbol, _a1 error) *MockSymbolRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolRepository_Create_Call) RunAndReturn(run func(context.Context, entity.Symbol) (entity.Symbol, error)) *MockSymbolRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, filter
func (_m *MockSymbolRepository) GetAll(ctx context.Context, filter entity.SymbolFilter) ([]entity.Symbol, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entity.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SymbolFilter) ([]entity.Symbol, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SymbolFilter) []entity.Symbol); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Symbol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SymbolFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockSymbolRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filter entity.SymbolFilter
func (_e *MockSymbolRepository_Expecter) GetAll(ctx interface{}, filter interface{}) *MockSymbolRepository_GetAll_Call {
	return &MockSymbolRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, filter)}
}

func (_c *MockSymbolRepository_GetAll_Call) Run(run func(ctx context.Context, filter entity.SymbolFilter)) *MockSymbolRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SymbolFilter))
	})
	return _c
}

func (_c *MockSymbolRepository_GetAll_Call) Return(_a0 []entity.Symbol, _a1 error) *MockSymbolRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolRepository_GetAll_Call) RunAndReturn(run func(context.Context, entity.SymbolFilter) ([]entity.Symbol, error)) *MockSymbolRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: ctx, id
func (_m *MockSymbolRepository) GetById(ctx context.Context, id int64) (entity.Symbol, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 entity.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.Symbol, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Symbol); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Symbol)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockSymbolRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSymbolRepository_Expecter) GetById(ctx interface{}, id interface{}) *MockSymbolRepository_GetById_Call {
	return &MockSymbolRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, id)}
}

func (_c *MockSymbolRepository_GetById_Call) Run(run func(ctx context.Context, id int64)) *MockSymbolRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSymbolRepository_GetById_Call) Return(_a0 entity.Symbol, _a1 error) *MockSymbolRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolRepository_GetById_Call) RunAndReturn(run func(context.Context, int64) (entity.Symbol, error)) *MockSymbolRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySymbol provides a mock function with given fields: ctx, symbol
func (_m *MockSymbolRepository) GetBySymbol(ctx context.Context, symbol string) (entity.Symbol, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetBySymbol")
	}

	var r0 entity.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Symbol, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Symbol); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(entity.Symbol)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolRepository_GetBySymbol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySymbol'
type MockSymbolRepository_GetBySymbol_Call struct {
	*mock.Call
}

// GetBySymbol is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
func (_e *MockSymbolRepository_Expecter) GetBySymbol(ctx interface{}, symbol interface{}) *MockSymbolRepository_GetBySymbol_Call {
	return &MockSymbolRepository_GetBySymbol_Call{Call: _e.mock.On("GetBySymbol", ctx, symbol)}
}

func (_c *MockSymbolRepository_GetBySymbol_Call) Run(run func(ctx context.Context, symbol string)) *MockSymbolRepository_GetBySymbol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSymbolRepository_GetBySymbol_Call) Return(_a0 entity.Symbol, _a1 error) *MockSymbolRepository_GetBySymbol_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolRepository_GetBySymbol_Call) RunAndReturn(run func(context.Context, string) (entity.Symbol, error)) *MockSymbolRepository_GetBySymbol_Call {
	_c.Call.Return(run)
	return _c
}

// GetSymbolWithActiveBlacklist provides a mock function with given fields: ctx, symbol
func (_m *MockSymbolRepository) GetSymbolWithActiveBlacklist(ctx context.Context, symbol string) (entity.Symbol, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetSymbolWithActiveBlacklist")
	}

	var r0 entity.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Symbol, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Symbol); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(entity.Symbol)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolRepository_GetSymbolWithActiveBlacklist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSymbolWithActiveBlacklist'
type MockSymbolRepository_GetSymbolWithActiveBlacklist_Call struct {
	*mock.Call
}

// GetSymbolWithActiveBlacklist is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
func (_e *MockSymbolRepository_Expecter) GetSymbolWithActiveBlacklist(ctx interface{}, symbol interface{}) *MockSymbolRepository_GetSymbolWithActiveBlacklist_Call {
	return &MockSymbolRepository_GetSymbolWithActiveBlacklist_Call{Call: _e.mock.On("GetSymbolWithActiveBlacklist", ctx, symbol)}
}

func (_c *MockSymbolRepository_GetSymbolWithActiveBlacklist_Call) Run(run func(ctx context.Context, symbol string)) *MockSymbolRepository_GetSymbolWithActiveBlacklist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSymbolRepository_GetSymbolWithActiveBlacklist_Call) Return(_a0 entity.Symbol, _a1 error) *MockSymbolRepository_GetSymbolWithActiveBlacklist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolRepository_GetSymbolWithActiveBlacklist_Call) RunAndReturn(run func(context.Context, string) (entity.Symbol, error)) *MockSymbolRepository_GetSymbolWithActiveBlacklist_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, symbol
func (_m *MockSymbolRepository) Update(ctx context.Context, symbol entity.Symbol) (entity.Symbol, error) {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.Symbol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Symbol) (entity.Symbol, error)); ok {
		return rf(ctx, symbol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Symbol) entity.Symbol); ok {
		r0 = rf(ctx, symbol)
	} else {
		r0 = ret.Get(0).(entity.Symbol)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Symbol) error); ok {
		r1 = rf(ctx, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSymbolRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSymbolRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol entity.Symbol
func (_e *MockSymbolRepository_Expecter) Update(ctx interface{}, symbol interface{}) *MockSymbolRepository_Update_Call {
	return &MockSymbolRepository_Update_Call{Call: _e.mock.On("Update", ctx, symbol)}
}

func (_c *MockSymbolRepository_Update_Call) Run(run func(ctx context.Context, symbol entity.Symbol)) *MockSymbolRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Symbol))
	})
	return _c
}

func (_c *MockSymbolRepository_Update_Call) Return(_a0 entity.Symbol, _a1 error) *MockSymbolRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSymbolRepository_Update_Call) RunAndReturn(run func(context.Context, entity.Symbol) (entity.Symbol, error)) *MockSymbolRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSymbolRepository creates a new instance of MockSymbolRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSymbolRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSymbolRepository {
	mock := &MockSymbolRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
