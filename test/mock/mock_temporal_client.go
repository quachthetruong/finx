package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	enums "go.temporal.io/api/enums/v1"
	operatorservice "go.temporal.io/api/operatorservice/v1"
	workflowservice "go.temporal.io/api/workflowservice/v1"
	temporalClient "go.temporal.io/sdk/client"
	converter "go.temporal.io/sdk/converter"
)

// MockTemporalClient is an autogenerated mock type for the TemporalClient type
type MockTemporalClient struct {
	mock.Mock
}

type MockTemporalClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemporalClient) EXPECT() *MockTemporalClient_Expecter {
	return &MockTemporalClient_Expecter{mock: &_m.Mock}
}

// CancelWorkflow provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockTemporalClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	ret := _m.Called(ctx, workflowID, runID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_CancelWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkflow'
type MockTemporalClient_CancelWorkflow_Call struct {
	*mock.Call
}

// CancelWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockTemporalClient_Expecter) CancelWorkflow(ctx interface{}, workflowID interface{}, runID interface{}) *MockTemporalClient_CancelWorkflow_Call {
	return &MockTemporalClient_CancelWorkflow_Call{Call: _e.mock.On("CancelWorkflow", ctx, workflowID, runID)}
}

func (_c *MockTemporalClient_CancelWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockTemporalClient_CancelWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(string), args[2].(string))
		},
	)
	return _c
}

func (_c *MockTemporalClient_CancelWorkflow_Call) Return(_a0 error) *MockTemporalClient_CancelWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_CancelWorkflow_Call) RunAndReturn(run func(context.Context, string, string) error) *MockTemporalClient_CancelWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// CheckHealth provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) CheckHealth(ctx context.Context, request *temporalClient.CheckHealthRequest) (*temporalClient.CheckHealthResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *temporalClient.CheckHealthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.CheckHealthRequest) (*temporalClient.CheckHealthResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.CheckHealthRequest) *temporalClient.CheckHealthResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*temporalClient.CheckHealthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *temporalClient.CheckHealthRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_CheckHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckHealth'
type MockTemporalClient_CheckHealth_Call struct {
	*mock.Call
}

// CheckHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - request *temporalClient.CheckHealthRequest
func (_e *MockTemporalClient_Expecter) CheckHealth(ctx interface{}, request interface{}) *MockTemporalClient_CheckHealth_Call {
	return &MockTemporalClient_CheckHealth_Call{Call: _e.mock.On("CheckHealth", ctx, request)}
}

func (_c *MockTemporalClient_CheckHealth_Call) Run(run func(ctx context.Context, request *temporalClient.CheckHealthRequest)) *MockTemporalClient_CheckHealth_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*temporalClient.CheckHealthRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_CheckHealth_Call) Return(_a0 *temporalClient.CheckHealthResponse, _a1 error) *MockTemporalClient_CheckHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_CheckHealth_Call) RunAndReturn(run func(context.Context, *temporalClient.CheckHealthRequest) (*temporalClient.CheckHealthResponse, error)) *MockTemporalClient_CheckHealth_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockTemporalClient) Close() {
	_m.Called()
}

// MockTemporalClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTemporalClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTemporalClient_Expecter) Close() *MockTemporalClient_Close_Call {
	return &MockTemporalClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTemporalClient_Close_Call) Run(run func()) *MockTemporalClient_Close_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run()
		},
	)
	return _c
}

func (_c *MockTemporalClient_Close_Call) Return() *MockTemporalClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTemporalClient_Close_Call) RunAndReturn(run func()) *MockTemporalClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteActivity provides a mock function with given fields: ctx, taskToken, result, err
func (_m *MockTemporalClient) CompleteActivity(ctx context.Context, taskToken []byte, result interface{}, err error) error {
	ret := _m.Called(ctx, taskToken, result, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, interface{}, error) error); ok {
		r0 = rf(ctx, taskToken, result, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_CompleteActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteActivity'
type MockTemporalClient_CompleteActivity_Call struct {
	*mock.Call
}

// CompleteActivity is a helper method to define mock.On call
//   - ctx context.Context
//   - taskToken []byte
//   - result interface{}
//   - err error
func (_e *MockTemporalClient_Expecter) CompleteActivity(ctx interface{}, taskToken interface{}, result interface{}, err interface{}) *MockTemporalClient_CompleteActivity_Call {
	return &MockTemporalClient_CompleteActivity_Call{Call: _e.mock.On("CompleteActivity", ctx, taskToken, result, err)}
}

func (_c *MockTemporalClient_CompleteActivity_Call) Run(run func(ctx context.Context, taskToken []byte, result interface{}, err error)) *MockTemporalClient_CompleteActivity_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].([]byte), args[2].(interface{}), args[3].(error))
		},
	)
	return _c
}

func (_c *MockTemporalClient_CompleteActivity_Call) Return(_a0 error) *MockTemporalClient_CompleteActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_CompleteActivity_Call) RunAndReturn(run func(context.Context, []byte, interface{}, error) error) *MockTemporalClient_CompleteActivity_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteActivityByID provides a mock function with given fields: ctx, namespace, workflowID, runID, activityID, result, err
func (_m *MockTemporalClient) CompleteActivityByID(ctx context.Context, namespace string, workflowID string, runID string, activityID string, result interface{}, err error) error {
	ret := _m.Called(ctx, namespace, workflowID, runID, activityID, result, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, namespace, workflowID, runID, activityID, result, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_CompleteActivityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteActivityByID'
type MockTemporalClient_CompleteActivityByID_Call struct {
	*mock.Call
}

// CompleteActivityByID is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - workflowID string
//   - runID string
//   - activityID string
//   - result interface{}
//   - err error
func (_e *MockTemporalClient_Expecter) CompleteActivityByID(ctx interface{}, namespace interface{}, workflowID interface{}, runID interface{}, activityID interface{}, result interface{}, err interface{}) *MockTemporalClient_CompleteActivityByID_Call {
	return &MockTemporalClient_CompleteActivityByID_Call{Call: _e.mock.On(
		"CompleteActivityByID", ctx, namespace, workflowID, runID, activityID, result, err,
	)}
}

func (_c *MockTemporalClient_CompleteActivityByID_Call) Run(run func(ctx context.Context, namespace string, workflowID string, runID string, activityID string, result interface{}, err error)) *MockTemporalClient_CompleteActivityByID_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(
				args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string),
				args[5].(interface{}), args[6].(error),
			)
		},
	)
	return _c
}

func (_c *MockTemporalClient_CompleteActivityByID_Call) Return(_a0 error) *MockTemporalClient_CompleteActivityByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_CompleteActivityByID_Call) RunAndReturn(run func(context.Context, string, string, string, string, interface{}, error) error) *MockTemporalClient_CompleteActivityByID_Call {
	_c.Call.Return(run)
	return _c
}

// CountWorkflow provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) CountWorkflow(ctx context.Context, request *workflowservice.CountWorkflowExecutionsRequest) (*workflowservice.CountWorkflowExecutionsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *workflowservice.CountWorkflowExecutionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.CountWorkflowExecutionsRequest) (*workflowservice.CountWorkflowExecutionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.CountWorkflowExecutionsRequest) *workflowservice.CountWorkflowExecutionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.CountWorkflowExecutionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflowservice.CountWorkflowExecutionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_CountWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountWorkflow'
type MockTemporalClient_CountWorkflow_Call struct {
	*mock.Call
}

// CountWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.CountWorkflowExecutionsRequest
func (_e *MockTemporalClient_Expecter) CountWorkflow(ctx interface{}, request interface{}) *MockTemporalClient_CountWorkflow_Call {
	return &MockTemporalClient_CountWorkflow_Call{Call: _e.mock.On("CountWorkflow", ctx, request)}
}

func (_c *MockTemporalClient_CountWorkflow_Call) Run(run func(ctx context.Context, request *workflowservice.CountWorkflowExecutionsRequest)) *MockTemporalClient_CountWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*workflowservice.CountWorkflowExecutionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_CountWorkflow_Call) Return(_a0 *workflowservice.CountWorkflowExecutionsResponse, _a1 error) *MockTemporalClient_CountWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_CountWorkflow_Call) RunAndReturn(run func(context.Context, *workflowservice.CountWorkflowExecutionsRequest) (*workflowservice.CountWorkflowExecutionsResponse, error)) *MockTemporalClient_CountWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTaskQueue provides a mock function with given fields: ctx, taskqueue, taskqueueType
func (_m *MockTemporalClient) DescribeTaskQueue(ctx context.Context, taskqueue string, taskqueueType enums.TaskQueueType) (*workflowservice.DescribeTaskQueueResponse, error) {
	ret := _m.Called(ctx, taskqueue, taskqueueType)

	var r0 *workflowservice.DescribeTaskQueueResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, enums.TaskQueueType) (*workflowservice.DescribeTaskQueueResponse, error)); ok {
		return rf(ctx, taskqueue, taskqueueType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, enums.TaskQueueType) *workflowservice.DescribeTaskQueueResponse); ok {
		r0 = rf(ctx, taskqueue, taskqueueType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.DescribeTaskQueueResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, enums.TaskQueueType) error); ok {
		r1 = rf(ctx, taskqueue, taskqueueType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_DescribeTaskQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTaskQueue'
type MockTemporalClient_DescribeTaskQueue_Call struct {
	*mock.Call
}

// DescribeTaskQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - taskqueue string
//   - taskqueueType enums.TaskQueueType
func (_e *MockTemporalClient_Expecter) DescribeTaskQueue(ctx interface{}, taskqueue interface{}, taskqueueType interface{}) *MockTemporalClient_DescribeTaskQueue_Call {
	return &MockTemporalClient_DescribeTaskQueue_Call{Call: _e.mock.On(
		"DescribeTaskQueue", ctx, taskqueue, taskqueueType,
	)}
}

func (_c *MockTemporalClient_DescribeTaskQueue_Call) Run(run func(ctx context.Context, taskqueue string, taskqueueType enums.TaskQueueType)) *MockTemporalClient_DescribeTaskQueue_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(string), args[2].(enums.TaskQueueType))
		},
	)
	return _c
}

func (_c *MockTemporalClient_DescribeTaskQueue_Call) Return(_a0 *workflowservice.DescribeTaskQueueResponse, _a1 error) *MockTemporalClient_DescribeTaskQueue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_DescribeTaskQueue_Call) RunAndReturn(run func(context.Context, string, enums.TaskQueueType) (*workflowservice.DescribeTaskQueueResponse, error)) *MockTemporalClient_DescribeTaskQueue_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeWorkflowExecution provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockTemporalClient) DescribeWorkflowExecution(ctx context.Context, workflowID string, runID string) (*workflowservice.DescribeWorkflowExecutionResponse, error) {
	ret := _m.Called(ctx, workflowID, runID)

	var r0 *workflowservice.DescribeWorkflowExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*workflowservice.DescribeWorkflowExecutionResponse, error)); ok {
		return rf(ctx, workflowID, runID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *workflowservice.DescribeWorkflowExecutionResponse); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.DescribeWorkflowExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, workflowID, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_DescribeWorkflowExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeWorkflowExecution'
type MockTemporalClient_DescribeWorkflowExecution_Call struct {
	*mock.Call
}

// DescribeWorkflowExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockTemporalClient_Expecter) DescribeWorkflowExecution(ctx interface{}, workflowID interface{}, runID interface{}) *MockTemporalClient_DescribeWorkflowExecution_Call {
	return &MockTemporalClient_DescribeWorkflowExecution_Call{Call: _e.mock.On(
		"DescribeWorkflowExecution", ctx, workflowID, runID,
	)}
}

func (_c *MockTemporalClient_DescribeWorkflowExecution_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockTemporalClient_DescribeWorkflowExecution_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(string), args[2].(string))
		},
	)
	return _c
}

func (_c *MockTemporalClient_DescribeWorkflowExecution_Call) Return(_a0 *workflowservice.DescribeWorkflowExecutionResponse, _a1 error) *MockTemporalClient_DescribeWorkflowExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_DescribeWorkflowExecution_Call) RunAndReturn(run func(context.Context, string, string) (*workflowservice.DescribeWorkflowExecutionResponse, error)) *MockTemporalClient_DescribeWorkflowExecution_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteWorkflow provides a mock function with given fields: ctx, options, workflow, args
func (_m *MockTemporalClient) ExecuteWorkflow(ctx context.Context, options temporalClient.StartWorkflowOptions, workflow interface{}, args ...interface{}) (temporalClient.WorkflowRun, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, options, workflow)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 temporalClient.WorkflowRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) (temporalClient.WorkflowRun, error)); ok {
		return rf(ctx, options, workflow, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) temporalClient.WorkflowRun); ok {
		r0 = rf(ctx, options, workflow, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.WorkflowRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) error); ok {
		r1 = rf(ctx, options, workflow, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_ExecuteWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteWorkflow'
type MockTemporalClient_ExecuteWorkflow_Call struct {
	*mock.Call
}

// ExecuteWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - options temporalClient.StartWorkflowOptions
//   - workflow interface{}
//   - args ...interface{}
func (_e *MockTemporalClient_Expecter) ExecuteWorkflow(ctx interface{}, options interface{}, workflow interface{}, args ...interface{}) *MockTemporalClient_ExecuteWorkflow_Call {
	return &MockTemporalClient_ExecuteWorkflow_Call{Call: _e.mock.On(
		"ExecuteWorkflow",
		append([]interface{}{ctx, options, workflow}, args...)...,
	)}
}

func (_c *MockTemporalClient_ExecuteWorkflow_Call) Run(run func(ctx context.Context, options temporalClient.StartWorkflowOptions, workflow interface{}, args ...interface{})) *MockTemporalClient_ExecuteWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			variadicArgs := make([]interface{}, len(args)-3)
			for i, a := range args[3:] {
				if a != nil {
					variadicArgs[i] = a.(interface{})
				}
			}
			run(
				args[0].(context.Context), args[1].(temporalClient.StartWorkflowOptions), args[2].(interface{}),
				variadicArgs...,
			)
		},
	)
	return _c
}

func (_c *MockTemporalClient_ExecuteWorkflow_Call) Return(_a0 temporalClient.WorkflowRun, _a1 error) *MockTemporalClient_ExecuteWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_ExecuteWorkflow_Call) RunAndReturn(run func(context.Context, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) (temporalClient.WorkflowRun, error)) *MockTemporalClient_ExecuteWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetSearchAttributes provides a mock function with given fields: ctx
func (_m *MockTemporalClient) GetSearchAttributes(ctx context.Context) (*workflowservice.GetSearchAttributesResponse, error) {
	ret := _m.Called(ctx)

	var r0 *workflowservice.GetSearchAttributesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*workflowservice.GetSearchAttributesResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *workflowservice.GetSearchAttributesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.GetSearchAttributesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_GetSearchAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSearchAttributes'
type MockTemporalClient_GetSearchAttributes_Call struct {
	*mock.Call
}

// GetSearchAttributes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTemporalClient_Expecter) GetSearchAttributes(ctx interface{}) *MockTemporalClient_GetSearchAttributes_Call {
	return &MockTemporalClient_GetSearchAttributes_Call{Call: _e.mock.On("GetSearchAttributes", ctx)}
}

func (_c *MockTemporalClient_GetSearchAttributes_Call) Run(run func(ctx context.Context)) *MockTemporalClient_GetSearchAttributes_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context))
		},
	)
	return _c
}

func (_c *MockTemporalClient_GetSearchAttributes_Call) Return(_a0 *workflowservice.GetSearchAttributesResponse, _a1 error) *MockTemporalClient_GetSearchAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_GetSearchAttributes_Call) RunAndReturn(run func(context.Context) (*workflowservice.GetSearchAttributesResponse, error)) *MockTemporalClient_GetSearchAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkerBuildIdCompatibility provides a mock function with given fields: ctx, options
func (_m *MockTemporalClient) GetWorkerBuildIdCompatibility(ctx context.Context, options *temporalClient.GetWorkerBuildIdCompatibilityOptions) (*temporalClient.WorkerBuildIDVersionSets, error) {
	ret := _m.Called(ctx, options)

	var r0 *temporalClient.WorkerBuildIDVersionSets
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.GetWorkerBuildIdCompatibilityOptions) (*temporalClient.WorkerBuildIDVersionSets, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.GetWorkerBuildIdCompatibilityOptions) *temporalClient.WorkerBuildIDVersionSets); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*temporalClient.WorkerBuildIDVersionSets)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *temporalClient.GetWorkerBuildIdCompatibilityOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_GetWorkerBuildIdCompatibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkerBuildIdCompatibility'
type MockTemporalClient_GetWorkerBuildIdCompatibility_Call struct {
	*mock.Call
}

// GetWorkerBuildIdCompatibility is a helper method to define mock.On call
//   - ctx context.Context
//   - options *temporalClient.GetWorkerBuildIdCompatibilityOptions
func (_e *MockTemporalClient_Expecter) GetWorkerBuildIdCompatibility(ctx interface{}, options interface{}) *MockTemporalClient_GetWorkerBuildIdCompatibility_Call {
	return &MockTemporalClient_GetWorkerBuildIdCompatibility_Call{Call: _e.mock.On(
		"GetWorkerBuildIdCompatibility", ctx, options,
	)}
}

func (_c *MockTemporalClient_GetWorkerBuildIdCompatibility_Call) Run(run func(ctx context.Context, options *temporalClient.GetWorkerBuildIdCompatibilityOptions)) *MockTemporalClient_GetWorkerBuildIdCompatibility_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*temporalClient.GetWorkerBuildIdCompatibilityOptions))
		},
	)
	return _c
}

func (_c *MockTemporalClient_GetWorkerBuildIdCompatibility_Call) Return(_a0 *temporalClient.WorkerBuildIDVersionSets, _a1 error) *MockTemporalClient_GetWorkerBuildIdCompatibility_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_GetWorkerBuildIdCompatibility_Call) RunAndReturn(run func(context.Context, *temporalClient.GetWorkerBuildIdCompatibilityOptions) (*temporalClient.WorkerBuildIDVersionSets, error)) *MockTemporalClient_GetWorkerBuildIdCompatibility_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkerTaskReachability provides a mock function with given fields: ctx, options
func (_m *MockTemporalClient) GetWorkerTaskReachability(ctx context.Context, options *temporalClient.GetWorkerTaskReachabilityOptions) (*temporalClient.WorkerTaskReachability, error) {
	ret := _m.Called(ctx, options)

	var r0 *temporalClient.WorkerTaskReachability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.GetWorkerTaskReachabilityOptions) (*temporalClient.WorkerTaskReachability, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.GetWorkerTaskReachabilityOptions) *temporalClient.WorkerTaskReachability); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*temporalClient.WorkerTaskReachability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *temporalClient.GetWorkerTaskReachabilityOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_GetWorkerTaskReachability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkerTaskReachability'
type MockTemporalClient_GetWorkerTaskReachability_Call struct {
	*mock.Call
}

// GetWorkerTaskReachability is a helper method to define mock.On call
//   - ctx context.Context
//   - options *temporalClient.GetWorkerTaskReachabilityOptions
func (_e *MockTemporalClient_Expecter) GetWorkerTaskReachability(ctx interface{}, options interface{}) *MockTemporalClient_GetWorkerTaskReachability_Call {
	return &MockTemporalClient_GetWorkerTaskReachability_Call{Call: _e.mock.On(
		"GetWorkerTaskReachability", ctx, options,
	)}
}

func (_c *MockTemporalClient_GetWorkerTaskReachability_Call) Run(run func(ctx context.Context, options *temporalClient.GetWorkerTaskReachabilityOptions)) *MockTemporalClient_GetWorkerTaskReachability_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*temporalClient.GetWorkerTaskReachabilityOptions))
		},
	)
	return _c
}

func (_c *MockTemporalClient_GetWorkerTaskReachability_Call) Return(_a0 *temporalClient.WorkerTaskReachability, _a1 error) *MockTemporalClient_GetWorkerTaskReachability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_GetWorkerTaskReachability_Call) RunAndReturn(run func(context.Context, *temporalClient.GetWorkerTaskReachabilityOptions) (*temporalClient.WorkerTaskReachability, error)) *MockTemporalClient_GetWorkerTaskReachability_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflow provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockTemporalClient) GetWorkflow(ctx context.Context, workflowID string, runID string) temporalClient.WorkflowRun {
	ret := _m.Called(ctx, workflowID, runID)

	var r0 temporalClient.WorkflowRun
	if rf, ok := ret.Get(0).(func(context.Context, string, string) temporalClient.WorkflowRun); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.WorkflowRun)
		}
	}

	return r0
}

// MockTemporalClient_GetWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflow'
type MockTemporalClient_GetWorkflow_Call struct {
	*mock.Call
}

// GetWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockTemporalClient_Expecter) GetWorkflow(ctx interface{}, workflowID interface{}, runID interface{}) *MockTemporalClient_GetWorkflow_Call {
	return &MockTemporalClient_GetWorkflow_Call{Call: _e.mock.On("GetWorkflow", ctx, workflowID, runID)}
}

func (_c *MockTemporalClient_GetWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockTemporalClient_GetWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(string), args[2].(string))
		},
	)
	return _c
}

func (_c *MockTemporalClient_GetWorkflow_Call) Return(_a0 temporalClient.WorkflowRun) *MockTemporalClient_GetWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_GetWorkflow_Call) RunAndReturn(run func(context.Context, string, string) temporalClient.WorkflowRun) *MockTemporalClient_GetWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowHistory provides a mock function with given fields: ctx, workflowID, runID, isLongPoll, filterType
func (_m *MockTemporalClient) GetWorkflowHistory(ctx context.Context, workflowID string, runID string, isLongPoll bool, filterType enums.HistoryEventFilterType) temporalClient.HistoryEventIterator {
	ret := _m.Called(ctx, workflowID, runID, isLongPoll, filterType)

	var r0 temporalClient.HistoryEventIterator
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, enums.HistoryEventFilterType) temporalClient.HistoryEventIterator); ok {
		r0 = rf(ctx, workflowID, runID, isLongPoll, filterType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.HistoryEventIterator)
		}
	}

	return r0
}

// MockTemporalClient_GetWorkflowHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowHistory'
type MockTemporalClient_GetWorkflowHistory_Call struct {
	*mock.Call
}

// GetWorkflowHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - isLongPoll bool
//   - filterType enums.HistoryEventFilterType
func (_e *MockTemporalClient_Expecter) GetWorkflowHistory(ctx interface{}, workflowID interface{}, runID interface{}, isLongPoll interface{}, filterType interface{}) *MockTemporalClient_GetWorkflowHistory_Call {
	return &MockTemporalClient_GetWorkflowHistory_Call{Call: _e.mock.On(
		"GetWorkflowHistory", ctx, workflowID, runID, isLongPoll, filterType,
	)}
}

func (_c *MockTemporalClient_GetWorkflowHistory_Call) Run(run func(ctx context.Context, workflowID string, runID string, isLongPoll bool, filterType enums.HistoryEventFilterType)) *MockTemporalClient_GetWorkflowHistory_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(
				args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool),
				args[4].(enums.HistoryEventFilterType),
			)
		},
	)
	return _c
}

func (_c *MockTemporalClient_GetWorkflowHistory_Call) Return(_a0 temporalClient.HistoryEventIterator) *MockTemporalClient_GetWorkflowHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_GetWorkflowHistory_Call) RunAndReturn(run func(context.Context, string, string, bool, enums.HistoryEventFilterType) temporalClient.HistoryEventIterator) *MockTemporalClient_GetWorkflowHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowUpdateHandle provides a mock function with given fields: ref
func (_m *MockTemporalClient) GetWorkflowUpdateHandle(ref temporalClient.GetWorkflowUpdateHandleOptions) temporalClient.WorkflowUpdateHandle {
	ret := _m.Called(ref)

	var r0 temporalClient.WorkflowUpdateHandle
	if rf, ok := ret.Get(0).(func(temporalClient.GetWorkflowUpdateHandleOptions) temporalClient.WorkflowUpdateHandle); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.WorkflowUpdateHandle)
		}
	}

	return r0
}

// MockTemporalClient_GetWorkflowUpdateHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowUpdateHandle'
type MockTemporalClient_GetWorkflowUpdateHandle_Call struct {
	*mock.Call
}

// GetWorkflowUpdateHandle is a helper method to define mock.On call
//   - ref temporalClient.GetWorkflowUpdateHandleOptions
func (_e *MockTemporalClient_Expecter) GetWorkflowUpdateHandle(ref interface{}) *MockTemporalClient_GetWorkflowUpdateHandle_Call {
	return &MockTemporalClient_GetWorkflowUpdateHandle_Call{Call: _e.mock.On("GetWorkflowUpdateHandle", ref)}
}

func (_c *MockTemporalClient_GetWorkflowUpdateHandle_Call) Run(run func(ref temporalClient.GetWorkflowUpdateHandleOptions)) *MockTemporalClient_GetWorkflowUpdateHandle_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(temporalClient.GetWorkflowUpdateHandleOptions))
		},
	)
	return _c
}

func (_c *MockTemporalClient_GetWorkflowUpdateHandle_Call) Return(_a0 temporalClient.WorkflowUpdateHandle) *MockTemporalClient_GetWorkflowUpdateHandle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_GetWorkflowUpdateHandle_Call) RunAndReturn(run func(temporalClient.GetWorkflowUpdateHandleOptions) temporalClient.WorkflowUpdateHandle) *MockTemporalClient_GetWorkflowUpdateHandle_Call {
	_c.Call.Return(run)
	return _c
}

// ListArchivedWorkflow provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) ListArchivedWorkflow(ctx context.Context, request *workflowservice.ListArchivedWorkflowExecutionsRequest) (*workflowservice.ListArchivedWorkflowExecutionsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *workflowservice.ListArchivedWorkflowExecutionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListArchivedWorkflowExecutionsRequest) (*workflowservice.ListArchivedWorkflowExecutionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListArchivedWorkflowExecutionsRequest) *workflowservice.ListArchivedWorkflowExecutionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.ListArchivedWorkflowExecutionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflowservice.ListArchivedWorkflowExecutionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_ListArchivedWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListArchivedWorkflow'
type MockTemporalClient_ListArchivedWorkflow_Call struct {
	*mock.Call
}

// ListArchivedWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.ListArchivedWorkflowExecutionsRequest
func (_e *MockTemporalClient_Expecter) ListArchivedWorkflow(ctx interface{}, request interface{}) *MockTemporalClient_ListArchivedWorkflow_Call {
	return &MockTemporalClient_ListArchivedWorkflow_Call{Call: _e.mock.On("ListArchivedWorkflow", ctx, request)}
}

func (_c *MockTemporalClient_ListArchivedWorkflow_Call) Run(run func(ctx context.Context, request *workflowservice.ListArchivedWorkflowExecutionsRequest)) *MockTemporalClient_ListArchivedWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*workflowservice.ListArchivedWorkflowExecutionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_ListArchivedWorkflow_Call) Return(_a0 *workflowservice.ListArchivedWorkflowExecutionsResponse, _a1 error) *MockTemporalClient_ListArchivedWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_ListArchivedWorkflow_Call) RunAndReturn(run func(context.Context, *workflowservice.ListArchivedWorkflowExecutionsRequest) (*workflowservice.ListArchivedWorkflowExecutionsResponse, error)) *MockTemporalClient_ListArchivedWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// ListClosedWorkflow provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) ListClosedWorkflow(ctx context.Context, request *workflowservice.ListClosedWorkflowExecutionsRequest) (*workflowservice.ListClosedWorkflowExecutionsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *workflowservice.ListClosedWorkflowExecutionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListClosedWorkflowExecutionsRequest) (*workflowservice.ListClosedWorkflowExecutionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListClosedWorkflowExecutionsRequest) *workflowservice.ListClosedWorkflowExecutionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.ListClosedWorkflowExecutionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflowservice.ListClosedWorkflowExecutionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_ListClosedWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClosedWorkflow'
type MockTemporalClient_ListClosedWorkflow_Call struct {
	*mock.Call
}

// ListClosedWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.ListClosedWorkflowExecutionsRequest
func (_e *MockTemporalClient_Expecter) ListClosedWorkflow(ctx interface{}, request interface{}) *MockTemporalClient_ListClosedWorkflow_Call {
	return &MockTemporalClient_ListClosedWorkflow_Call{Call: _e.mock.On("ListClosedWorkflow", ctx, request)}
}

func (_c *MockTemporalClient_ListClosedWorkflow_Call) Run(run func(ctx context.Context, request *workflowservice.ListClosedWorkflowExecutionsRequest)) *MockTemporalClient_ListClosedWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*workflowservice.ListClosedWorkflowExecutionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_ListClosedWorkflow_Call) Return(_a0 *workflowservice.ListClosedWorkflowExecutionsResponse, _a1 error) *MockTemporalClient_ListClosedWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_ListClosedWorkflow_Call) RunAndReturn(run func(context.Context, *workflowservice.ListClosedWorkflowExecutionsRequest) (*workflowservice.ListClosedWorkflowExecutionsResponse, error)) *MockTemporalClient_ListClosedWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenWorkflow provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) ListOpenWorkflow(ctx context.Context, request *workflowservice.ListOpenWorkflowExecutionsRequest) (*workflowservice.ListOpenWorkflowExecutionsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *workflowservice.ListOpenWorkflowExecutionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListOpenWorkflowExecutionsRequest) (*workflowservice.ListOpenWorkflowExecutionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListOpenWorkflowExecutionsRequest) *workflowservice.ListOpenWorkflowExecutionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.ListOpenWorkflowExecutionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflowservice.ListOpenWorkflowExecutionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_ListOpenWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenWorkflow'
type MockTemporalClient_ListOpenWorkflow_Call struct {
	*mock.Call
}

// ListOpenWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.ListOpenWorkflowExecutionsRequest
func (_e *MockTemporalClient_Expecter) ListOpenWorkflow(ctx interface{}, request interface{}) *MockTemporalClient_ListOpenWorkflow_Call {
	return &MockTemporalClient_ListOpenWorkflow_Call{Call: _e.mock.On("ListOpenWorkflow", ctx, request)}
}

func (_c *MockTemporalClient_ListOpenWorkflow_Call) Run(run func(ctx context.Context, request *workflowservice.ListOpenWorkflowExecutionsRequest)) *MockTemporalClient_ListOpenWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*workflowservice.ListOpenWorkflowExecutionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_ListOpenWorkflow_Call) Return(_a0 *workflowservice.ListOpenWorkflowExecutionsResponse, _a1 error) *MockTemporalClient_ListOpenWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_ListOpenWorkflow_Call) RunAndReturn(run func(context.Context, *workflowservice.ListOpenWorkflowExecutionsRequest) (*workflowservice.ListOpenWorkflowExecutionsResponse, error)) *MockTemporalClient_ListOpenWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflow provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) ListWorkflow(ctx context.Context, request *workflowservice.ListWorkflowExecutionsRequest) (*workflowservice.ListWorkflowExecutionsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *workflowservice.ListWorkflowExecutionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListWorkflowExecutionsRequest) (*workflowservice.ListWorkflowExecutionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ListWorkflowExecutionsRequest) *workflowservice.ListWorkflowExecutionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.ListWorkflowExecutionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflowservice.ListWorkflowExecutionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_ListWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflow'
type MockTemporalClient_ListWorkflow_Call struct {
	*mock.Call
}

// ListWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.ListWorkflowExecutionsRequest
func (_e *MockTemporalClient_Expecter) ListWorkflow(ctx interface{}, request interface{}) *MockTemporalClient_ListWorkflow_Call {
	return &MockTemporalClient_ListWorkflow_Call{Call: _e.mock.On("ListWorkflow", ctx, request)}
}

func (_c *MockTemporalClient_ListWorkflow_Call) Run(run func(ctx context.Context, request *workflowservice.ListWorkflowExecutionsRequest)) *MockTemporalClient_ListWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*workflowservice.ListWorkflowExecutionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_ListWorkflow_Call) Return(_a0 *workflowservice.ListWorkflowExecutionsResponse, _a1 error) *MockTemporalClient_ListWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_ListWorkflow_Call) RunAndReturn(run func(context.Context, *workflowservice.ListWorkflowExecutionsRequest) (*workflowservice.ListWorkflowExecutionsResponse, error)) *MockTemporalClient_ListWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// OperatorService provides a mock function with given fields:
func (_m *MockTemporalClient) OperatorService() operatorservice.OperatorServiceClient {
	ret := _m.Called()

	var r0 operatorservice.OperatorServiceClient
	if rf, ok := ret.Get(0).(func() operatorservice.OperatorServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(operatorservice.OperatorServiceClient)
		}
	}

	return r0
}

// MockTemporalClient_OperatorService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OperatorService'
type MockTemporalClient_OperatorService_Call struct {
	*mock.Call
}

// OperatorService is a helper method to define mock.On call
func (_e *MockTemporalClient_Expecter) OperatorService() *MockTemporalClient_OperatorService_Call {
	return &MockTemporalClient_OperatorService_Call{Call: _e.mock.On("OperatorService")}
}

func (_c *MockTemporalClient_OperatorService_Call) Run(run func()) *MockTemporalClient_OperatorService_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run()
		},
	)
	return _c
}

func (_c *MockTemporalClient_OperatorService_Call) Return(_a0 operatorservice.OperatorServiceClient) *MockTemporalClient_OperatorService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_OperatorService_Call) RunAndReturn(run func() operatorservice.OperatorServiceClient) *MockTemporalClient_OperatorService_Call {
	_c.Call.Return(run)
	return _c
}

// QueryWorkflow provides a mock function with given fields: ctx, workflowID, runID, queryType, args
func (_m *MockTemporalClient) QueryWorkflow(ctx context.Context, workflowID string, runID string, queryType string, args ...interface{}) (converter.EncodedValue, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, runID, queryType)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 converter.EncodedValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) (converter.EncodedValue, error)); ok {
		return rf(ctx, workflowID, runID, queryType, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) converter.EncodedValue); ok {
		r0 = rf(ctx, workflowID, runID, queryType, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(converter.EncodedValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...interface{}) error); ok {
		r1 = rf(ctx, workflowID, runID, queryType, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_QueryWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkflow'
type MockTemporalClient_QueryWorkflow_Call struct {
	*mock.Call
}

// QueryWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - queryType string
//   - args ...interface{}
func (_e *MockTemporalClient_Expecter) QueryWorkflow(ctx interface{}, workflowID interface{}, runID interface{}, queryType interface{}, args ...interface{}) *MockTemporalClient_QueryWorkflow_Call {
	return &MockTemporalClient_QueryWorkflow_Call{Call: _e.mock.On(
		"QueryWorkflow",
		append([]interface{}{ctx, workflowID, runID, queryType}, args...)...,
	)}
}

func (_c *MockTemporalClient_QueryWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string, queryType string, args ...interface{})) *MockTemporalClient_QueryWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			variadicArgs := make([]interface{}, len(args)-4)
			for i, a := range args[4:] {
				if a != nil {
					variadicArgs[i] = a.(interface{})
				}
			}
			run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
		},
	)
	return _c
}

func (_c *MockTemporalClient_QueryWorkflow_Call) Return(_a0 converter.EncodedValue, _a1 error) *MockTemporalClient_QueryWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_QueryWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, ...interface{}) (converter.EncodedValue, error)) *MockTemporalClient_QueryWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// QueryWorkflowWithOptions provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) QueryWorkflowWithOptions(ctx context.Context, request *temporalClient.QueryWorkflowWithOptionsRequest) (*temporalClient.QueryWorkflowWithOptionsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *temporalClient.QueryWorkflowWithOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.QueryWorkflowWithOptionsRequest) (*temporalClient.QueryWorkflowWithOptionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.QueryWorkflowWithOptionsRequest) *temporalClient.QueryWorkflowWithOptionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*temporalClient.QueryWorkflowWithOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *temporalClient.QueryWorkflowWithOptionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_QueryWorkflowWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWorkflowWithOptions'
type MockTemporalClient_QueryWorkflowWithOptions_Call struct {
	*mock.Call
}

// QueryWorkflowWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *temporalClient.QueryWorkflowWithOptionsRequest
func (_e *MockTemporalClient_Expecter) QueryWorkflowWithOptions(ctx interface{}, request interface{}) *MockTemporalClient_QueryWorkflowWithOptions_Call {
	return &MockTemporalClient_QueryWorkflowWithOptions_Call{Call: _e.mock.On("QueryWorkflowWithOptions", ctx, request)}
}

func (_c *MockTemporalClient_QueryWorkflowWithOptions_Call) Run(run func(ctx context.Context, request *temporalClient.QueryWorkflowWithOptionsRequest)) *MockTemporalClient_QueryWorkflowWithOptions_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*temporalClient.QueryWorkflowWithOptionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_QueryWorkflowWithOptions_Call) Return(_a0 *temporalClient.QueryWorkflowWithOptionsResponse, _a1 error) *MockTemporalClient_QueryWorkflowWithOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_QueryWorkflowWithOptions_Call) RunAndReturn(run func(context.Context, *temporalClient.QueryWorkflowWithOptionsRequest) (*temporalClient.QueryWorkflowWithOptionsResponse, error)) *MockTemporalClient_QueryWorkflowWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// RecordActivityHeartbeat provides a mock function with given fields: ctx, taskToken, details
func (_m *MockTemporalClient) RecordActivityHeartbeat(ctx context.Context, taskToken []byte, details ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, taskToken)
	_ca = append(_ca, details...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, ...interface{}) error); ok {
		r0 = rf(ctx, taskToken, details...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_RecordActivityHeartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordActivityHeartbeat'
type MockTemporalClient_RecordActivityHeartbeat_Call struct {
	*mock.Call
}

// RecordActivityHeartbeat is a helper method to define mock.On call
//   - ctx context.Context
//   - taskToken []byte
//   - details ...interface{}
func (_e *MockTemporalClient_Expecter) RecordActivityHeartbeat(ctx interface{}, taskToken interface{}, details ...interface{}) *MockTemporalClient_RecordActivityHeartbeat_Call {
	return &MockTemporalClient_RecordActivityHeartbeat_Call{Call: _e.mock.On(
		"RecordActivityHeartbeat",
		append([]interface{}{ctx, taskToken}, details...)...,
	)}
}

func (_c *MockTemporalClient_RecordActivityHeartbeat_Call) Run(run func(ctx context.Context, taskToken []byte, details ...interface{})) *MockTemporalClient_RecordActivityHeartbeat_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			variadicArgs := make([]interface{}, len(args)-2)
			for i, a := range args[2:] {
				if a != nil {
					variadicArgs[i] = a.(interface{})
				}
			}
			run(args[0].(context.Context), args[1].([]byte), variadicArgs...)
		},
	)
	return _c
}

func (_c *MockTemporalClient_RecordActivityHeartbeat_Call) Return(_a0 error) *MockTemporalClient_RecordActivityHeartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_RecordActivityHeartbeat_Call) RunAndReturn(run func(context.Context, []byte, ...interface{}) error) *MockTemporalClient_RecordActivityHeartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// RecordActivityHeartbeatByID provides a mock function with given fields: ctx, namespace, workflowID, runID, activityID, details
func (_m *MockTemporalClient) RecordActivityHeartbeatByID(ctx context.Context, namespace string, workflowID string, runID string, activityID string, details ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, namespace, workflowID, runID, activityID)
	_ca = append(_ca, details...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, ...interface{}) error); ok {
		r0 = rf(ctx, namespace, workflowID, runID, activityID, details...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_RecordActivityHeartbeatByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordActivityHeartbeatByID'
type MockTemporalClient_RecordActivityHeartbeatByID_Call struct {
	*mock.Call
}

// RecordActivityHeartbeatByID is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - workflowID string
//   - runID string
//   - activityID string
//   - details ...interface{}
func (_e *MockTemporalClient_Expecter) RecordActivityHeartbeatByID(ctx interface{}, namespace interface{}, workflowID interface{}, runID interface{}, activityID interface{}, details ...interface{}) *MockTemporalClient_RecordActivityHeartbeatByID_Call {
	return &MockTemporalClient_RecordActivityHeartbeatByID_Call{Call: _e.mock.On(
		"RecordActivityHeartbeatByID",
		append([]interface{}{ctx, namespace, workflowID, runID, activityID}, details...)...,
	)}
}

func (_c *MockTemporalClient_RecordActivityHeartbeatByID_Call) Run(run func(ctx context.Context, namespace string, workflowID string, runID string, activityID string, details ...interface{})) *MockTemporalClient_RecordActivityHeartbeatByID_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			variadicArgs := make([]interface{}, len(args)-5)
			for i, a := range args[5:] {
				if a != nil {
					variadicArgs[i] = a.(interface{})
				}
			}
			run(
				args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string),
				variadicArgs...,
			)
		},
	)
	return _c
}

func (_c *MockTemporalClient_RecordActivityHeartbeatByID_Call) Return(_a0 error) *MockTemporalClient_RecordActivityHeartbeatByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_RecordActivityHeartbeatByID_Call) RunAndReturn(run func(context.Context, string, string, string, string, ...interface{}) error) *MockTemporalClient_RecordActivityHeartbeatByID_Call {
	_c.Call.Return(run)
	return _c
}

// ResetWorkflowExecution provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) ResetWorkflowExecution(ctx context.Context, request *workflowservice.ResetWorkflowExecutionRequest) (*workflowservice.ResetWorkflowExecutionResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *workflowservice.ResetWorkflowExecutionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ResetWorkflowExecutionRequest) (*workflowservice.ResetWorkflowExecutionResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ResetWorkflowExecutionRequest) *workflowservice.ResetWorkflowExecutionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.ResetWorkflowExecutionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflowservice.ResetWorkflowExecutionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_ResetWorkflowExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetWorkflowExecution'
type MockTemporalClient_ResetWorkflowExecution_Call struct {
	*mock.Call
}

// ResetWorkflowExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.ResetWorkflowExecutionRequest
func (_e *MockTemporalClient_Expecter) ResetWorkflowExecution(ctx interface{}, request interface{}) *MockTemporalClient_ResetWorkflowExecution_Call {
	return &MockTemporalClient_ResetWorkflowExecution_Call{Call: _e.mock.On("ResetWorkflowExecution", ctx, request)}
}

func (_c *MockTemporalClient_ResetWorkflowExecution_Call) Run(run func(ctx context.Context, request *workflowservice.ResetWorkflowExecutionRequest)) *MockTemporalClient_ResetWorkflowExecution_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*workflowservice.ResetWorkflowExecutionRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_ResetWorkflowExecution_Call) Return(_a0 *workflowservice.ResetWorkflowExecutionResponse, _a1 error) *MockTemporalClient_ResetWorkflowExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_ResetWorkflowExecution_Call) RunAndReturn(run func(context.Context, *workflowservice.ResetWorkflowExecutionRequest) (*workflowservice.ResetWorkflowExecutionResponse, error)) *MockTemporalClient_ResetWorkflowExecution_Call {
	_c.Call.Return(run)
	return _c
}

// ScanWorkflow provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) ScanWorkflow(ctx context.Context, request *workflowservice.ScanWorkflowExecutionsRequest) (*workflowservice.ScanWorkflowExecutionsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *workflowservice.ScanWorkflowExecutionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ScanWorkflowExecutionsRequest) (*workflowservice.ScanWorkflowExecutionsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.ScanWorkflowExecutionsRequest) *workflowservice.ScanWorkflowExecutionsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.ScanWorkflowExecutionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflowservice.ScanWorkflowExecutionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_ScanWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanWorkflow'
type MockTemporalClient_ScanWorkflow_Call struct {
	*mock.Call
}

// ScanWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.ScanWorkflowExecutionsRequest
func (_e *MockTemporalClient_Expecter) ScanWorkflow(ctx interface{}, request interface{}) *MockTemporalClient_ScanWorkflow_Call {
	return &MockTemporalClient_ScanWorkflow_Call{Call: _e.mock.On("ScanWorkflow", ctx, request)}
}

func (_c *MockTemporalClient_ScanWorkflow_Call) Run(run func(ctx context.Context, request *workflowservice.ScanWorkflowExecutionsRequest)) *MockTemporalClient_ScanWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*workflowservice.ScanWorkflowExecutionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_ScanWorkflow_Call) Return(_a0 *workflowservice.ScanWorkflowExecutionsResponse, _a1 error) *MockTemporalClient_ScanWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_ScanWorkflow_Call) RunAndReturn(run func(context.Context, *workflowservice.ScanWorkflowExecutionsRequest) (*workflowservice.ScanWorkflowExecutionsResponse, error)) *MockTemporalClient_ScanWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleClient provides a mock function with given fields:
func (_m *MockTemporalClient) ScheduleClient() temporalClient.ScheduleClient {
	ret := _m.Called()

	var r0 temporalClient.ScheduleClient
	if rf, ok := ret.Get(0).(func() temporalClient.ScheduleClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.ScheduleClient)
		}
	}

	return r0
}

// MockTemporalClient_ScheduleClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleClient'
type MockTemporalClient_ScheduleClient_Call struct {
	*mock.Call
}

// ScheduleClient is a helper method to define mock.On call
func (_e *MockTemporalClient_Expecter) ScheduleClient() *MockTemporalClient_ScheduleClient_Call {
	return &MockTemporalClient_ScheduleClient_Call{Call: _e.mock.On("ScheduleClient")}
}

func (_c *MockTemporalClient_ScheduleClient_Call) Run(run func()) *MockTemporalClient_ScheduleClient_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run()
		},
	)
	return _c
}

func (_c *MockTemporalClient_ScheduleClient_Call) Return(_a0 temporalClient.ScheduleClient) *MockTemporalClient_ScheduleClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_ScheduleClient_Call) RunAndReturn(run func() temporalClient.ScheduleClient) *MockTemporalClient_ScheduleClient_Call {
	_c.Call.Return(run)
	return _c
}

// SignalWithStartWorkflow provides a mock function with given fields: ctx, workflowID, signalName, signalArg, options, workflow, workflowArgs
func (_m *MockTemporalClient) SignalWithStartWorkflow(ctx context.Context, workflowID string, signalName string, signalArg interface{}, options temporalClient.StartWorkflowOptions, workflow interface{}, workflowArgs ...interface{}) (temporalClient.WorkflowRun, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, signalName, signalArg, options, workflow)
	_ca = append(_ca, workflowArgs...)
	ret := _m.Called(_ca...)

	var r0 temporalClient.WorkflowRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) (temporalClient.WorkflowRun, error)); ok {
		return rf(ctx, workflowID, signalName, signalArg, options, workflow, workflowArgs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) temporalClient.WorkflowRun); ok {
		r0 = rf(ctx, workflowID, signalName, signalArg, options, workflow, workflowArgs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.WorkflowRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) error); ok {
		r1 = rf(ctx, workflowID, signalName, signalArg, options, workflow, workflowArgs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_SignalWithStartWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignalWithStartWorkflow'
type MockTemporalClient_SignalWithStartWorkflow_Call struct {
	*mock.Call
}

// SignalWithStartWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - signalName string
//   - signalArg interface{}
//   - options temporalClient.StartWorkflowOptions
//   - workflow interface{}
//   - workflowArgs ...interface{}
func (_e *MockTemporalClient_Expecter) SignalWithStartWorkflow(ctx interface{}, workflowID interface{}, signalName interface{}, signalArg interface{}, options interface{}, workflow interface{}, workflowArgs ...interface{}) *MockTemporalClient_SignalWithStartWorkflow_Call {
	return &MockTemporalClient_SignalWithStartWorkflow_Call{Call: _e.mock.On(
		"SignalWithStartWorkflow",
		append([]interface{}{ctx, workflowID, signalName, signalArg, options, workflow}, workflowArgs...)...,
	)}
}

func (_c *MockTemporalClient_SignalWithStartWorkflow_Call) Run(run func(ctx context.Context, workflowID string, signalName string, signalArg interface{}, options temporalClient.StartWorkflowOptions, workflow interface{}, workflowArgs ...interface{})) *MockTemporalClient_SignalWithStartWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			variadicArgs := make([]interface{}, len(args)-6)
			for i, a := range args[6:] {
				if a != nil {
					variadicArgs[i] = a.(interface{})
				}
			}
			run(
				args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}),
				args[4].(temporalClient.StartWorkflowOptions), args[5].(interface{}), variadicArgs...,
			)
		},
	)
	return _c
}

func (_c *MockTemporalClient_SignalWithStartWorkflow_Call) Return(_a0 temporalClient.WorkflowRun, _a1 error) *MockTemporalClient_SignalWithStartWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_SignalWithStartWorkflow_Call) RunAndReturn(run func(context.Context, string, string, interface{}, temporalClient.StartWorkflowOptions, interface{}, ...interface{}) (temporalClient.WorkflowRun, error)) *MockTemporalClient_SignalWithStartWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// SignalWorkflow provides a mock function with given fields: ctx, workflowID, runID, signalName, arg
func (_m *MockTemporalClient) SignalWorkflow(ctx context.Context, workflowID string, runID string, signalName string, arg interface{}) error {
	ret := _m.Called(ctx, workflowID, runID, signalName, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, workflowID, runID, signalName, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_SignalWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignalWorkflow'
type MockTemporalClient_SignalWorkflow_Call struct {
	*mock.Call
}

// SignalWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - signalName string
//   - arg interface{}
func (_e *MockTemporalClient_Expecter) SignalWorkflow(ctx interface{}, workflowID interface{}, runID interface{}, signalName interface{}, arg interface{}) *MockTemporalClient_SignalWorkflow_Call {
	return &MockTemporalClient_SignalWorkflow_Call{Call: _e.mock.On(
		"SignalWorkflow", ctx, workflowID, runID, signalName, arg,
	)}
}

func (_c *MockTemporalClient_SignalWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string, signalName string, arg interface{})) *MockTemporalClient_SignalWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(interface{}))
		},
	)
	return _c
}

func (_c *MockTemporalClient_SignalWorkflow_Call) Return(_a0 error) *MockTemporalClient_SignalWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_SignalWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, interface{}) error) *MockTemporalClient_SignalWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateWorkflow provides a mock function with given fields: ctx, workflowID, runID, reason, details
func (_m *MockTemporalClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, runID, reason)
	_ca = append(_ca, details...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) error); ok {
		r0 = rf(ctx, workflowID, runID, reason, details...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_TerminateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateWorkflow'
type MockTemporalClient_TerminateWorkflow_Call struct {
	*mock.Call
}

// TerminateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - reason string
//   - details ...interface{}
func (_e *MockTemporalClient_Expecter) TerminateWorkflow(ctx interface{}, workflowID interface{}, runID interface{}, reason interface{}, details ...interface{}) *MockTemporalClient_TerminateWorkflow_Call {
	return &MockTemporalClient_TerminateWorkflow_Call{Call: _e.mock.On(
		"TerminateWorkflow",
		append([]interface{}{ctx, workflowID, runID, reason}, details...)...,
	)}
}

func (_c *MockTemporalClient_TerminateWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string, reason string, details ...interface{})) *MockTemporalClient_TerminateWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			variadicArgs := make([]interface{}, len(args)-4)
			for i, a := range args[4:] {
				if a != nil {
					variadicArgs[i] = a.(interface{})
				}
			}
			run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
		},
	)
	return _c
}

func (_c *MockTemporalClient_TerminateWorkflow_Call) Return(_a0 error) *MockTemporalClient_TerminateWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_TerminateWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, ...interface{}) error) *MockTemporalClient_TerminateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkerBuildIdCompatibility provides a mock function with given fields: ctx, options
func (_m *MockTemporalClient) UpdateWorkerBuildIdCompatibility(ctx context.Context, options *temporalClient.UpdateWorkerBuildIdCompatibilityOptions) error {
	ret := _m.Called(ctx, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.UpdateWorkerBuildIdCompatibilityOptions) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkerBuildIdCompatibility'
type MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call struct {
	*mock.Call
}

// UpdateWorkerBuildIdCompatibility is a helper method to define mock.On call
//   - ctx context.Context
//   - options *temporalClient.UpdateWorkerBuildIdCompatibilityOptions
func (_e *MockTemporalClient_Expecter) UpdateWorkerBuildIdCompatibility(ctx interface{}, options interface{}) *MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call {
	return &MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call{Call: _e.mock.On(
		"UpdateWorkerBuildIdCompatibility", ctx, options,
	)}
}

func (_c *MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call) Run(run func(ctx context.Context, options *temporalClient.UpdateWorkerBuildIdCompatibilityOptions)) *MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*temporalClient.UpdateWorkerBuildIdCompatibilityOptions))
		},
	)
	return _c
}

func (_c *MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call) Return(_a0 error) *MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call) RunAndReturn(run func(context.Context, *temporalClient.UpdateWorkerBuildIdCompatibilityOptions) error) *MockTemporalClient_UpdateWorkerBuildIdCompatibility_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflow provides a mock function with given fields: ctx, workflowID, workflowRunID, updateName, args
func (_m *MockTemporalClient) UpdateWorkflow(ctx context.Context, workflowID string, workflowRunID string, updateName string, args ...interface{}) (temporalClient.WorkflowUpdateHandle, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, workflowRunID, updateName)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 temporalClient.WorkflowUpdateHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) (temporalClient.WorkflowUpdateHandle, error)); ok {
		return rf(ctx, workflowID, workflowRunID, updateName, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) temporalClient.WorkflowUpdateHandle); ok {
		r0 = rf(ctx, workflowID, workflowRunID, updateName, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.WorkflowUpdateHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, ...interface{}) error); ok {
		r1 = rf(ctx, workflowID, workflowRunID, updateName, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_UpdateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflow'
type MockTemporalClient_UpdateWorkflow_Call struct {
	*mock.Call
}

// UpdateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - workflowRunID string
//   - updateName string
//   - args ...interface{}
func (_e *MockTemporalClient_Expecter) UpdateWorkflow(ctx interface{}, workflowID interface{}, workflowRunID interface{}, updateName interface{}, args ...interface{}) *MockTemporalClient_UpdateWorkflow_Call {
	return &MockTemporalClient_UpdateWorkflow_Call{Call: _e.mock.On(
		"UpdateWorkflow",
		append([]interface{}{ctx, workflowID, workflowRunID, updateName}, args...)...,
	)}
}

func (_c *MockTemporalClient_UpdateWorkflow_Call) Run(run func(ctx context.Context, workflowID string, workflowRunID string, updateName string, args ...interface{})) *MockTemporalClient_UpdateWorkflow_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			variadicArgs := make([]interface{}, len(args)-4)
			for i, a := range args[4:] {
				if a != nil {
					variadicArgs[i] = a.(interface{})
				}
			}
			run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
		},
	)
	return _c
}

func (_c *MockTemporalClient_UpdateWorkflow_Call) Return(_a0 temporalClient.WorkflowUpdateHandle, _a1 error) *MockTemporalClient_UpdateWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_UpdateWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, ...interface{}) (temporalClient.WorkflowUpdateHandle, error)) *MockTemporalClient_UpdateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowWithOptions provides a mock function with given fields: ctx, request
func (_m *MockTemporalClient) UpdateWorkflowWithOptions(ctx context.Context, request *temporalClient.UpdateWorkflowWithOptionsRequest) (temporalClient.WorkflowUpdateHandle, error) {
	ret := _m.Called(ctx, request)

	var r0 temporalClient.WorkflowUpdateHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.UpdateWorkflowWithOptionsRequest) (temporalClient.WorkflowUpdateHandle, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *temporalClient.UpdateWorkflowWithOptionsRequest) temporalClient.WorkflowUpdateHandle); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(temporalClient.WorkflowUpdateHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *temporalClient.UpdateWorkflowWithOptionsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClient_UpdateWorkflowWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowWithOptions'
type MockTemporalClient_UpdateWorkflowWithOptions_Call struct {
	*mock.Call
}

// UpdateWorkflowWithOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - request *temporalClient.UpdateWorkflowWithOptionsRequest
func (_e *MockTemporalClient_Expecter) UpdateWorkflowWithOptions(ctx interface{}, request interface{}) *MockTemporalClient_UpdateWorkflowWithOptions_Call {
	return &MockTemporalClient_UpdateWorkflowWithOptions_Call{Call: _e.mock.On(
		"UpdateWorkflowWithOptions", ctx, request,
	)}
}

func (_c *MockTemporalClient_UpdateWorkflowWithOptions_Call) Run(run func(ctx context.Context, request *temporalClient.UpdateWorkflowWithOptionsRequest)) *MockTemporalClient_UpdateWorkflowWithOptions_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run(args[0].(context.Context), args[1].(*temporalClient.UpdateWorkflowWithOptionsRequest))
		},
	)
	return _c
}

func (_c *MockTemporalClient_UpdateWorkflowWithOptions_Call) Return(_a0 temporalClient.WorkflowUpdateHandle, _a1 error) *MockTemporalClient_UpdateWorkflowWithOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClient_UpdateWorkflowWithOptions_Call) RunAndReturn(run func(context.Context, *temporalClient.UpdateWorkflowWithOptionsRequest) (temporalClient.WorkflowUpdateHandle, error)) *MockTemporalClient_UpdateWorkflowWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// WorkflowService provides a mock function with given fields:
func (_m *MockTemporalClient) WorkflowService() workflowservice.WorkflowServiceClient {
	ret := _m.Called()

	var r0 workflowservice.WorkflowServiceClient
	if rf, ok := ret.Get(0).(func() workflowservice.WorkflowServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflowservice.WorkflowServiceClient)
		}
	}

	return r0
}

// MockTemporalClient_WorkflowService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkflowService'
type MockTemporalClient_WorkflowService_Call struct {
	*mock.Call
}

// WorkflowService is a helper method to define mock.On call
func (_e *MockTemporalClient_Expecter) WorkflowService() *MockTemporalClient_WorkflowService_Call {
	return &MockTemporalClient_WorkflowService_Call{Call: _e.mock.On("WorkflowService")}
}

func (_c *MockTemporalClient_WorkflowService_Call) Run(run func()) *MockTemporalClient_WorkflowService_Call {
	_c.Call.Run(
		func(args mock.Arguments) {
			run()
		},
	)
	return _c
}

func (_c *MockTemporalClient_WorkflowService_Call) Return(_a0 workflowservice.WorkflowServiceClient) *MockTemporalClient_WorkflowService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemporalClient_WorkflowService_Call) RunAndReturn(run func() workflowservice.WorkflowServiceClient) *MockTemporalClient_WorkflowService_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemporalClient creates a new instance of MockTemporalClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemporalClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockTemporalClient {
	mock := &MockTemporalClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
