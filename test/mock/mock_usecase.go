// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"
	entity "financing-offer/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// AdminApproveSubmission provides a mock function with given fields: ctx, submissionId
func (_m *MockUseCase) AdminApproveSubmission(ctx context.Context, submissionId int64) error {
	ret := _m.Called(ctx, submissionId)

	if len(ret) == 0 {
		panic("no return value specified for AdminApproveSubmission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, submissionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_AdminApproveSubmission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminApproveSubmission'
type MockUseCase_AdminApproveSubmission_Call struct {
	*mock.Call
}

// AdminApproveSubmission is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionId int64
func (_e *MockUseCase_Expecter) AdminApproveSubmission(ctx interface{}, submissionId interface{}) *MockUseCase_AdminApproveSubmission_Call {
	return &MockUseCase_AdminApproveSubmission_Call{Call: _e.mock.On("AdminApproveSubmission", ctx, submissionId)}
}

func (_c *MockUseCase_AdminApproveSubmission_Call) Run(run func(ctx context.Context, submissionId int64)) *MockUseCase_AdminApproveSubmission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUseCase_AdminApproveSubmission_Call) Return(_a0 error) *MockUseCase_AdminApproveSubmission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_AdminApproveSubmission_Call) RunAndReturn(run func(context.Context, int64) error) *MockUseCase_AdminApproveSubmission_Call {
	_c.Call.Return(run)
	return _c
}

// AdminRejectSubmission provides a mock function with given fields: ctx, submissionId
func (_m *MockUseCase) AdminRejectSubmission(ctx context.Context, submissionId int64) error {
	ret := _m.Called(ctx, submissionId)

	if len(ret) == 0 {
		panic("no return value specified for AdminRejectSubmission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, submissionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_AdminRejectSubmission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminRejectSubmission'
type MockUseCase_AdminRejectSubmission_Call struct {
	*mock.Call
}

// AdminRejectSubmission is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionId int64
func (_e *MockUseCase_Expecter) AdminRejectSubmission(ctx interface{}, submissionId interface{}) *MockUseCase_AdminRejectSubmission_Call {
	return &MockUseCase_AdminRejectSubmission_Call{Call: _e.mock.On("AdminRejectSubmission", ctx, submissionId)}
}

func (_c *MockUseCase_AdminRejectSubmission_Call) Run(run func(ctx context.Context, submissionId int64)) *MockUseCase_AdminRejectSubmission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUseCase_AdminRejectSubmission_Call) Return(_a0 error) *MockUseCase_AdminRejectSubmission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_AdminRejectSubmission_Call) RunAndReturn(run func(context.Context, int64) error) *MockUseCase_AdminRejectSubmission_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, submissionSheetRequest, loanRate, loanPolicyTemplates
func (_m *MockUseCase) Create(ctx context.Context, submissionSheetRequest entity.SubmissionSheetShorten, loanRate entity.LoanRate, loanPolicyTemplates []entity.AggregateLoanPolicyTemplate) (entity.SubmissionSheet, error) {
	ret := _m.Called(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.SubmissionSheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) (entity.SubmissionSheet, error)); ok {
		return rf(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) entity.SubmissionSheet); ok {
		r0 = rf(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) error); ok {
		r1 = rf(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionSheetRequest entity.SubmissionSheetShorten
//   - loanRate entity.LoanRate
//   - loanPolicyTemplates []entity.AggregateLoanPolicyTemplate
func (_e *MockUseCase_Expecter) Create(ctx interface{}, submissionSheetRequest interface{}, loanRate interface{}, loanPolicyTemplates interface{}) *MockUseCase_Create_Call {
	return &MockUseCase_Create_Call{Call: _e.mock.On("Create", ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)}
}

func (_c *MockUseCase_Create_Call) Run(run func(ctx context.Context, submissionSheetRequest entity.SubmissionSheetShorten, loanRate entity.LoanRate, loanPolicyTemplates []entity.AggregateLoanPolicyTemplate)) *MockUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SubmissionSheetShorten), args[2].(entity.LoanRate), args[3].([]entity.AggregateLoanPolicyTemplate))
	})
	return _c
}

func (_c *MockUseCase_Create_Call) Return(_a0 entity.SubmissionSheet, _a1 error) *MockUseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Create_Call) RunAndReturn(run func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) (entity.SubmissionSheet, error)) *MockUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestByRequestId provides a mock function with given fields: ctx, id
func (_m *MockUseCase) GetLatestByRequestId(ctx context.Context, id int64) (entity.SubmissionSheet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestByRequestId")
	}

	var r0 entity.SubmissionSheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.SubmissionSheet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.SubmissionSheet); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetLatestByRequestId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestByRequestId'
type MockUseCase_GetLatestByRequestId_Call struct {
	*mock.Call
}

// GetLatestByRequestId is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockUseCase_Expecter) GetLatestByRequestId(ctx interface{}, id interface{}) *MockUseCase_GetLatestByRequestId_Call {
	return &MockUseCase_GetLatestByRequestId_Call{Call: _e.mock.On("GetLatestByRequestId", ctx, id)}
}

func (_c *MockUseCase_GetLatestByRequestId_Call) Run(run func(ctx context.Context, id int64)) *MockUseCase_GetLatestByRequestId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUseCase_GetLatestByRequestId_Call) Return(_a0 entity.SubmissionSheet, _a1 error) *MockUseCase_GetLatestByRequestId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetLatestByRequestId_Call) RunAndReturn(run func(context.Context, int64) (entity.SubmissionSheet, error)) *MockUseCase_GetLatestByRequestId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, submissionSheetRequest, loanRate, loanPolicyTemplates
func (_m *MockUseCase) Update(ctx context.Context, submissionSheetRequest entity.SubmissionSheetShorten, loanRate entity.LoanRate, loanPolicyTemplates []entity.AggregateLoanPolicyTemplate) (entity.SubmissionSheet, error) {
	ret := _m.Called(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 entity.SubmissionSheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) (entity.SubmissionSheet, error)); ok {
		return rf(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) entity.SubmissionSheet); ok {
		r0 = rf(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) error); ok {
		r1 = rf(ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionSheetRequest entity.SubmissionSheetShorten
//   - loanRate entity.LoanRate
//   - loanPolicyTemplates []entity.AggregateLoanPolicyTemplate
func (_e *MockUseCase_Expecter) Update(ctx interface{}, submissionSheetRequest interface{}, loanRate interface{}, loanPolicyTemplates interface{}) *MockUseCase_Update_Call {
	return &MockUseCase_Update_Call{Call: _e.mock.On("Update", ctx, submissionSheetRequest, loanRate, loanPolicyTemplates)}
}

func (_c *MockUseCase_Update_Call) Run(run func(ctx context.Context, submissionSheetRequest entity.SubmissionSheetShorten, loanRate entity.LoanRate, loanPolicyTemplates []entity.AggregateLoanPolicyTemplate)) *MockUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SubmissionSheetShorten), args[2].(entity.LoanRate), args[3].([]entity.AggregateLoanPolicyTemplate))
	})
	return _c
}

func (_c *MockUseCase_Update_Call) Return(_a0 entity.SubmissionSheet, _a1 error) *MockUseCase_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Update_Call) RunAndReturn(run func(context.Context, entity.SubmissionSheetShorten, entity.LoanRate, []entity.AggregateLoanPolicyTemplate) (entity.SubmissionSheet, error)) *MockUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, submissionSheetRequest
func (_m *MockUseCase) Upsert(ctx context.Context, submissionSheetRequest entity.SubmissionSheetShorten) (entity.SubmissionSheet, error) {
	ret := _m.Called(ctx, submissionSheetRequest)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 entity.SubmissionSheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetShorten) (entity.SubmissionSheet, error)); ok {
		return rf(ctx, submissionSheetRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SubmissionSheetShorten) entity.SubmissionSheet); ok {
		r0 = rf(ctx, submissionSheetRequest)
	} else {
		r0 = ret.Get(0).(entity.SubmissionSheet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SubmissionSheetShorten) error); ok {
		r1 = rf(ctx, submissionSheetRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockUseCase_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - submissionSheetRequest entity.SubmissionSheetShorten
func (_e *MockUseCase_Expecter) Upsert(ctx interface{}, submissionSheetRequest interface{}) *MockUseCase_Upsert_Call {
	return &MockUseCase_Upsert_Call{Call: _e.mock.On("Upsert", ctx, submissionSheetRequest)}
}

func (_c *MockUseCase_Upsert_Call) Run(run func(ctx context.Context, submissionSheetRequest entity.SubmissionSheetShorten)) *MockUseCase_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SubmissionSheetShorten))
	})
	return _c
}

func (_c *MockUseCase_Upsert_Call) Return(_a0 entity.SubmissionSheet, _a1 error) *MockUseCase_Upsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_Upsert_Call) RunAndReturn(run func(context.Context, entity.SubmissionSheetShorten) (entity.SubmissionSheet, error)) *MockUseCase_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
